/* USER CODE BEGIN Header */
	/**
	******************************************************************************
	* @file    stm32f4xx_it.c
	* @brief   Interrupt Service Routines.
	******************************************************************************
	* @attention
	*
	* Copyright (c) 2023 STMicroelectronics.
	* All rights reserved.
	*
	* This software is licensed under terms that can be found in the LICENSE file
	* in the root directory of this software component.
	* If no LICENSE file comes with this software, it is provided AS-IS.
	*
	******************************************************************************
	*/
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f4xx_it.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */

/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	const int RED_1_ON = 		0b0000000000000010;
	const int RED_1_OFF = 		0b1111111111111101;
	const int GREEN_1_ON =		0b0000000000000100;
	const int GREEN_1_OFF = 	0b1111111111111011;
	const int BLUE_1_ON = 		0b0000000000001000;
	const int BLUE_1_OFF = 		0b1111111111110111;
	const int White_1_ON = 		0b0000000000001110;
	const int White_1_OFF = 	0b1111111111110001;
	const int Yellow_1_ON = 	0b0000000000000110;
	const int Yellow_1_OFF =	0b1111111111111001;
	const int Magenta_1_ON =	0b0000000000001010;
	const int Magenta_1_OFF =	0b1111111111110101;
	const int Cyan_1_ON = 		0b0000000000001100;
	const int Cyan_1_OFF = 		0b1111111111110011;


	const int RED_2_ON = 		0b0000000000010000;
	const int RED_2_OFF =		0b1111111111101111;
	const int GREEN_2_ON =		0b0000000000100000;
	const int GREEN_2_OFF = 	0b1111111111011111;
	const int BLUE_2_ON = 		0b0000000001000000;
	const int BLUE_2_OFF = 		0b1111111110111111;
	const int White_2_ON = 		0b0000000001110000;
	const int White_2_OFF = 	0b1111111110001111;
	const int Yellow_2_ON = 	0b0000000000110000;
	const int Yellow_2_OFF =	0b1111111111001111;
	const int Magenta_2_ON =	0b0000000001010000;
	const int Magenta_2_OFF =	0b1111111110101111;
	const int Cyan_2_ON = 		0b0000000001100000;
	const int Cyan_2_OFF = 		0b1111111110011111;

	const int RED_3_ON = 		0b0000000010000000;
	const int RED_3_OFF =		0b1111111101111111;
	const int GREEN_3_ON =		0b0000000100000000;
	const int GREEN_3_OFF = 	0b1111111011111111;
	const int BLUE_3_ON = 		0b0000001000000000;
	const int BLUE_3_OFF = 		0b1111110111111111;
	const int White_3_ON = 		0b0000001110000000;
	const int White_3_OFF = 	0b1111110001111111;
	const int Yellow_3_ON = 	0b0000000110000000;
	const int Yellow_3_OFF =	0b1111111001111111;
	const int Magenta_3_ON =	0b0000001010000000;
	const int Magenta_3_OFF =	0b1111110101111111;
	const int Cyan_3_ON = 		0b0000001100000000;
	const int Cyan_3_OFF = 		0b1111110011111111;

	const int RED_4_ON = 		0b0000010000000000;
	const int RED_4_OFF =		0b1111101111111111;
	const int GREEN_4_ON =		0b0001000000000000;
	const int GREEN_4_OFF = 	0b1110111111111111;
	const int BLUE_4_ON = 		0b0010000000000000;
	const int BLUE_4_OFF = 		0b1101111111111111;
	const int White_4_ON = 		0b0001110000000000;
	const int White_4_OFF = 	0b1110001111111111;
	const int Yellow_4_ON = 	0b0000110000000000;
	const int Yellow_4_OFF =	0b1111001111111111;
	const int Magenta_4_ON =	0b0001010000000000;
	const int Magenta_4_OFF =	0b1110101111111111;
	const int Cyan_4_ON = 		0b0001100000000000;
	const int Cyan_4_OFF = 		0b1110011111111111;

	const int RED_ON = 			RED_1_ON | RED_2_ON | RED_3_ON | RED_4_ON;
	const int RED_OFF = 		RED_1_OFF & RED_2_OFF & RED_3_OFF & RED_4_OFF;
	const int GREEN_ON =		GREEN_1_ON | GREEN_2_ON | GREEN_3_ON | GREEN_4_ON;
	const int GREEN_OFF = 		GREEN_1_OFF & GREEN_2_OFF & GREEN_3_OFF & GREEN_4_OFF;
	const int BLUE_ON = 		BLUE_1_ON | BLUE_2_ON | BLUE_3_ON | BLUE_4_ON;
	const int BLUE_OFF = 		BLUE_1_OFF & BLUE_2_OFF & BLUE_3_OFF & BLUE_4_OFF;
	const int White_ON = 		White_1_ON | White_2_ON | White_3_ON | White_4_ON;
	const int White_OFF =	 	White_1_OFF & White_2_OFF & White_3_OFF & White_4_OFF;
	const int Yellow_ON = 		Yellow_1_ON | Yellow_2_ON | Yellow_3_ON | Yellow_4_ON;
	const int Yellow_OFF =		Yellow_1_OFF & Yellow_2_OFF & Yellow_3_OFF & Yellow_4_OFF;
	const int Magenta_ON =		Magenta_1_ON | Magenta_2_ON | Magenta_3_ON | Magenta_4_ON;
	const int Magenta_OFF =		Magenta_1_OFF & Magenta_2_OFF & Magenta_3_OFF & Magenta_4_OFF;
	const int Cyan_ON = 		Cyan_1_ON | Cyan_2_ON | Cyan_3_ON | Cyan_4_ON;
	const int Cyan_OFF = 		Cyan_1_OFF & Cyan_2_OFF & Cyan_3_OFF & Cyan_4_OFF;

	const int Dark_Gray = 		0x1180; //buvo 0b0000000001110000;
//	const int Dark_Gray = 		0b0000001110000000; // not gray, but super cool green
	const int Light_gray = 		0x1238; // buvo 0b0000000001111110
//	const int Light_gray = 		0b0001111110000000; // not gray but supper cool light green
	const int Cyan_Soft = 		0x908; // buvo: 0b0000000001111100
	const int Green_Soft_Pale = 0xFA0; // buvo: 0b0000000001110100
	const int Green_Soft_dark = 0x1100; // buvo: 0b0000000000101000
	const int Green_Hard = 		0x900;// buvo: 0b0000000000100100;
	const int Orange_Soft = 	0xF02; // buvo: 0b0000000010100000;
	const int Orange_Light = 	0x1910; //buvo: 0b0000000011100100
	const int Orange_dark = 	0x310; //buvo: 0b0000000010010110
	const int Yellow_Sand = 	0xF80; //buvo: 0b0000000001110110
	const int Selection_Colour= 0xDC0; // buvo: 0b0000000001001100;
	const int Orange_Dark = 	0x310;
	const int Orange_bright = 	0x1910;
	const int Orange = 			0x900;
	const int Skin_Dark = 		0x580;
	const int Skin_Light = 		0x1910;
	const int Red_pale = 		0x1092; // buvo: 0b0000010000010110
	const int Deep_Green = 		0xF00;


	int i1 = 0, i2 = 1; //used to increment while loop, for the score array to have a diferent array with their decimals
	int waste_of_time = 0; //used to stall the timer
	int a = 0;

	uint16_t Lines=0;
	int button_pushed = 0b10;
	int state = 0;
	int Settings_Colour, Settings_Colour_D, Settings_Colour_B;
	int Mine_Colour, Mine_Colour_D, Mine_Colour_B;
	int Selection_button = 0;
	int Menu_state = 0;
	int Mine_state = 0;
	int click[100]; // parodo ar paspaustas langelis ar ne
	int Mine_start = 0;
	int Number_colour[1000];
	int Bomb_pressed = 0;
	int boom[35];
	int winning = 0;
	int flag_click[100];
	int score[21];
	int pixel[1001];
	int score_show = 0;
	int letter_pressed = 0;
	char Score_names[11];  // koks vardaas buvo parasytas per Write name void
	int score_board = 0;
	int variable = 0;
	int Score_val[225];  // naudojamas tasku pavaizdavimui ranks voide.
	int ppixel[251];
	int8_t f1[20];
	uint16_t f2 = 0;
	char all_names[220];
	int word_written = 0;
	int8_t f3=0;
	int8_t delete = 0;
	int8_t finished = 0;




/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim10;
/* USER CODE BEGIN EV */

/* USER CODE END EV */

/******************************************************************************/
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
	{
	}
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32F4xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
//  /* USER CODE BEGIN EXTI0_IRQn 0 */
//
//  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Select_Pin);
//  /* USER CODE BEGIN EXTI0_IRQn 1 */
	int button = 2;
	int ii = 0;
	int aa = 0;
	button = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
	if (button == 1)
	{
	Note('O', 5, 0);
	switch (Mine_start)
		{
		case 0:
			switch(Menu_state)
			{
			case 0:
			Selection_button = 1;
//			letter_pressed = 0; variantas cia statyt, jei geriau nerandi
			break;
			case 1:
			Selection_button = 2;
			score[0] = 0;
//			start = 1; //uzkomentavau kad debugint lengviau eitus
//			winning = 0; //kolkas vel uzkomentavau
			break;
			}
		break;
		case 1:
			if (Bomb_pressed != 1 && winning < 90)
			{
			switch(Random_num[Mine_state])
			{
			case 10:
				while((Random_num[Mine_state+ii+aa] == 10) && click[Mine_state+ii+aa] != 1)
				{
					Number_colour[1+10*(Mine_state+ii+aa)] = Cyan_Soft;
					Number_colour[2+10*(Mine_state+ii+aa)] = Cyan_Soft;
					Number_colour[3+10*(Mine_state+ii+aa)] = Cyan_Soft;
					Number_colour[4+10*(Mine_state+ii+aa)] = Cyan_Soft;
					Number_colour[5+10*(Mine_state+ii+aa)] = Cyan_Soft;
					Number_colour[6+10*(Mine_state+ii+aa)] = Cyan_Soft;
					Number_colour[7+10*(Mine_state+ii+aa)] = Cyan_Soft;
					Number_colour[8+10*(Mine_state+ii+aa)] = Cyan_Soft;
					Number_colour[10*(Mine_state+ii+aa)] = Cyan_Soft;
					click[Mine_state+ii+aa] = 1;
					winning++; // viskas ok
					 ii = 1;
					while ((Random_num[Mine_state+ii+aa]) == 10 && (Mine_state+ii+aa)%10 != 0 && click[Mine_state+ii+aa] != 1)
					{
						Number_colour[1+10*(Mine_state+ii+aa)] = Cyan_Soft;
						Number_colour[2+10*(Mine_state+ii+aa)] = Cyan_Soft;
						Number_colour[3+10*(Mine_state+ii+aa)] = Cyan_Soft;
						Number_colour[4+10*(Mine_state+ii+aa)] = Cyan_Soft;
						Number_colour[5+10*(Mine_state+ii+aa)] = Cyan_Soft;
						Number_colour[6+10*(Mine_state+ii+aa)] = Cyan_Soft;
						Number_colour[7+10*(Mine_state+ii+aa)] = Cyan_Soft;
						Number_colour[8+10*(Mine_state+ii+aa)] = Cyan_Soft;
						Number_colour[10*(Mine_state+ii+aa)] = Cyan_Soft;
						click[Mine_state+ii+aa] = 1;
						winning++; // viskas ok
						ii++;
					}
					ii = 1;
					while ((Random_num[Mine_state-ii+aa]) == 10 && (Mine_state-ii+aa)%10 !=9 && click[Mine_state-ii+aa] != 1)
					{
						Number_colour[1+10*(Mine_state-ii+aa)] = Cyan_Soft;
						Number_colour[2+10*(Mine_state-ii+aa)] = Cyan_Soft;
						Number_colour[3+10*(Mine_state-ii+aa)] = Cyan_Soft;
						Number_colour[4+10*(Mine_state-ii+aa)] = Cyan_Soft;
						Number_colour[5+10*(Mine_state-ii+aa)] = Cyan_Soft;
						Number_colour[6+10*(Mine_state-ii+aa)] = Cyan_Soft;
						Number_colour[7+10*(Mine_state-ii+aa)] = Cyan_Soft;
						Number_colour[8+10*(Mine_state-ii+aa)] = Cyan_Soft;
						Number_colour[10*(Mine_state-ii+aa)] = Cyan_Soft;
						click[Mine_state-ii+aa] = 1;
						winning++;
						ii++;
					}
					ii = 0;
					aa = 10+aa;
				}
				aa = 10;
				while((Random_num[Mine_state+ii-aa] == 10) && click[Mine_state+ii-aa] != 1)
				{
					Number_colour[1+10*(Mine_state+ii-aa)] = Cyan_Soft;
					Number_colour[2+10*(Mine_state+ii-aa)] = Cyan_Soft;
					Number_colour[3+10*(Mine_state+ii-aa)] = Cyan_Soft;
					Number_colour[4+10*(Mine_state+ii-aa)] = Cyan_Soft;
					Number_colour[5+10*(Mine_state+ii-aa)] = Cyan_Soft;
					Number_colour[6+10*(Mine_state+ii-aa)] = Cyan_Soft;
					Number_colour[7+10*(Mine_state+ii-aa)] = Cyan_Soft;
					Number_colour[8+10*(Mine_state+ii-aa)] = Cyan_Soft;
					Number_colour[10*(Mine_state+ii-aa)] = Cyan_Soft;
					click[Mine_state+ii-aa] = 1;
					winning++;
					ii = 1;
					while ((Random_num[Mine_state+ii-aa]) == 10 && (Mine_state+ii-aa)%10 != 0 && click[Mine_state+ii-aa] != 1)
					{
						Number_colour[1+10*(Mine_state+ii-aa)] = Cyan_Soft;
						Number_colour[2+10*(Mine_state+ii-aa)] = Cyan_Soft;
						Number_colour[3+10*(Mine_state+ii-aa)] = Cyan_Soft;
						Number_colour[4+10*(Mine_state+ii-aa)] = Cyan_Soft;
						Number_colour[5+10*(Mine_state+ii-aa)] = Cyan_Soft;
						Number_colour[6+10*(Mine_state+ii-aa)] = Cyan_Soft;
						Number_colour[7+10*(Mine_state+ii-aa)] = Cyan_Soft;
						Number_colour[8+10*(Mine_state+ii-aa)] = Cyan_Soft;
						Number_colour[10*(Mine_state+ii-aa)] = Cyan_Soft;
						click[Mine_state+ii-aa] = 1;
						winning++;
						ii++;
					}
					ii = 1;
					while ((Random_num[Mine_state-ii-aa]) == 10 && (Mine_state-ii-aa)%10 !=9 && click[Mine_state-ii-aa] != 1)
					{
						Number_colour[1+10*(Mine_state-ii-aa)] = Cyan_Soft;
						Number_colour[2+10*(Mine_state-ii-aa)] = Cyan_Soft;
						Number_colour[3+10*(Mine_state-ii-aa)] = Cyan_Soft;
						Number_colour[4+10*(Mine_state-ii-aa)] = Cyan_Soft;
						Number_colour[5+10*(Mine_state-ii-aa)] = Cyan_Soft;
						Number_colour[6+10*(Mine_state-ii-aa)] = Cyan_Soft;
						Number_colour[7+10*(Mine_state-ii-aa)] = Cyan_Soft;
						Number_colour[8+10*(Mine_state-ii-aa)] = Cyan_Soft;
						Number_colour[10*(Mine_state-ii-aa)] = Cyan_Soft;
						winning++;
						click[Mine_state-ii-aa] = 1;
						ii++;
					}
					ii = 0;
					aa = 10+aa;
				}

			break;
			case 0 ... 9:
				Number_colour[1+(10*Mine_state+ii)] = RED_1_ON;
				Number_colour[2+(10*Mine_state+ii)] = RED_1_ON;
				Number_colour[3+(10*Mine_state+ii)] = RED_1_ON;
				Number_colour[4+(10*Mine_state+ii)] = RED_1_ON;
				Number_colour[5+(10*Mine_state+ii)] = RED_1_ON;
				Number_colour[6+(10*Mine_state+ii)] = RED_1_ON;
				Number_colour[7+(10*Mine_state+ii)] = RED_1_ON;
				Number_colour[8+(10*Mine_state+ii)] = RED_1_ON;
				Number_colour[10*(Mine_state+ii)] = RED_1_ON;
				Bomb_pressed = 1;
				click[Mine_state] = 1;
				break;
			case 11:
				Number_colour[1+(10*Mine_state)] = RED_1_ON;
				Number_colour[2+(10*Mine_state)] = Cyan_Soft;
				Number_colour[3+(10*Mine_state)] = Cyan_Soft;
				Number_colour[4+(10*Mine_state)] = Cyan_Soft;
				Number_colour[5+(10*Mine_state)] = Cyan_Soft;
				Number_colour[6+(10*Mine_state)] = Cyan_Soft;
				Number_colour[7+(10*Mine_state)] = Cyan_Soft;
				Number_colour[8+(10*Mine_state)] = Cyan_Soft;
				Number_colour[10*Mine_state] = Cyan_Soft;
				if (click[Mine_state] != 1)
				{
					winning++;
				}
				click[Mine_state] = 1;
				break;
			case 12:
				Number_colour[1+(10*Mine_state)] = RED_1_ON;
				Number_colour[2+(10*Mine_state)] = RED_1_ON;
				Number_colour[3+(10*Mine_state)] = Cyan_Soft;
				Number_colour[4+(10*Mine_state)] = Cyan_Soft;
				Number_colour[5+(10*Mine_state)] = Cyan_Soft;
				Number_colour[6+(10*Mine_state)] = Cyan_Soft;
				Number_colour[7+(10*Mine_state)] = Cyan_Soft;
				Number_colour[8+(10*Mine_state)] = Cyan_Soft;
				Number_colour[10*Mine_state] = Cyan_Soft;
				if (click[Mine_state] != 1)
				{
					winning++;
				}
				click[Mine_state] = 1;
//				winning++;
				break;
			case 13:
				Number_colour[1+(10*Mine_state)] = RED_1_ON;
				Number_colour[2+(10*Mine_state)] = RED_1_ON;
				Number_colour[3+(10*Mine_state)] = RED_1_ON;
				Number_colour[4+(10*Mine_state)] = Cyan_Soft;
				Number_colour[5+(10*Mine_state)] = Cyan_Soft;
				Number_colour[6+(10*Mine_state)] = Cyan_Soft;
				Number_colour[7+(10*Mine_state)] = Cyan_Soft;
				Number_colour[8+(10*Mine_state)] = Cyan_Soft;
				Number_colour[10*Mine_state] = Cyan_Soft;
				if (click[Mine_state] != 1)
				{
					winning++;
				}
				click[Mine_state] = 1;
//				winning++;
				break;
			case 14:
				Number_colour[1+(10*Mine_state)] = RED_1_ON;
				Number_colour[2+(10*Mine_state)] = RED_1_ON;
				Number_colour[3+(10*Mine_state)] = RED_1_ON;
				Number_colour[4+(10*Mine_state)] = RED_1_ON;
				Number_colour[5+(10*Mine_state)] = Cyan_Soft;
				Number_colour[6+(10*Mine_state)] = Cyan_Soft;
				Number_colour[7+(10*Mine_state)] = Cyan_Soft;
				Number_colour[8+(10*Mine_state)] = Cyan_Soft;
				Number_colour[10*Mine_state] = Cyan_Soft;
				if (click[Mine_state] != 1)
				{
					winning++;
				}
				click[Mine_state] = 1;
//				winning++;
				break;
			case 15:
				Number_colour[1+(10*Mine_state)] = RED_1_ON;
				Number_colour[2+(10*Mine_state)] = RED_1_ON;
				Number_colour[3+(10*Mine_state)] = RED_1_ON;
				Number_colour[4+(10*Mine_state)] = RED_1_ON;
				Number_colour[5+(10*Mine_state)] = RED_1_ON;
				Number_colour[6+(10*Mine_state)] = Cyan_Soft;
				Number_colour[7+(10*Mine_state)] = Cyan_Soft;
				Number_colour[8+(10*Mine_state)] = Cyan_Soft;
				Number_colour[10*Mine_state] = Cyan_Soft;
				if (click[Mine_state] != 1)
				{
					winning++;
				}
				click[Mine_state] = 1;
//				winning++;
				break;
			case 16:
				Number_colour[1+(10*Mine_state)] = RED_1_ON;
				Number_colour[2+(10*Mine_state)] = RED_1_ON;
				Number_colour[3+(10*Mine_state)] = RED_1_ON;
				Number_colour[4+(10*Mine_state)] = RED_1_ON;
				Number_colour[5+(10*Mine_state)] = RED_1_ON;
				Number_colour[6+(10*Mine_state)] = RED_1_ON;
				Number_colour[7+(10*Mine_state)] = Cyan_Soft;
				Number_colour[8+(10*Mine_state)] = Cyan_Soft;
				Number_colour[10*Mine_state] = Cyan_Soft;
				if (click[Mine_state] != 1)
				{
					winning++;
				}
				click[Mine_state] = 1;
//				winning++;
				break;
			case 17:
				Number_colour[1+(10*Mine_state)] = RED_1_ON;
				Number_colour[2+(10*Mine_state)] = RED_1_ON;
				Number_colour[3+(10*Mine_state)] = RED_1_ON;
				Number_colour[4+(10*Mine_state)] = RED_1_ON;
				Number_colour[5+(10*Mine_state)] = RED_1_ON;
				Number_colour[6+(10*Mine_state)] = RED_1_ON;
				Number_colour[7+(10*Mine_state)] = RED_1_ON;
				Number_colour[8+(10*Mine_state)] = Cyan_Soft;
				Number_colour[10*Mine_state] = Cyan_Soft;
				if (click[Mine_state] != 1)
				{
					winning++;
				}
				click[Mine_state] = 1;
//				winning ++;
				break;
			case 18:
				Number_colour[1+(10*Mine_state)] = RED_1_ON;
				Number_colour[2+(10*Mine_state)] = RED_1_ON;
				Number_colour[3+(10*Mine_state)] = RED_1_ON;
				Number_colour[4+(10*Mine_state)] = RED_1_ON;
				Number_colour[5+(10*Mine_state)] = RED_1_ON;
				Number_colour[6+(10*Mine_state)] = RED_1_ON;
				Number_colour[7+(10*Mine_state)] = RED_1_ON;
				Number_colour[8+(10*Mine_state)] = RED_1_ON;
				Number_colour[10*Mine_state] = Cyan_Soft;
				if (click[Mine_state] != 1)
				{
					winning++;
				}
				click[Mine_state] = 1;
//				winning++;
				break;
			}
			break;
			}
		}
	button = 0;
	if (winning == 90 && boom[32] == 1)
	{

		score[0] = score[0]*16579/1000000; //rezultatas kiek sekundziu uztruko
//		score[0] = score[0]*16579/1000000; //rezultatas kiek sekundziu uztruko
//		score[0] = 104;
		Sort_the_Score(); //gauni ranka savo
		winning = 91;
		Mine_state = 0; // fix_check ar veikia
//		switch(f1[1])
//		{
//		case 1:
//			variable = 0;
//			break;
//		case 2:
//			variable = 10;
//			break;
//		case 3:
//			variable = 20;
//			break;
//		case 4:
//			variable = 30;
//			break;
//		case 5:
//			variable = 40;
//			break;
//		}
	}
	else if( winning == 91 && letter_pressed < 50)
	{
		switch(Mine_state)
		{
		case 0:
			Score_names[variable] = 'A';
			pixel[1+letter_pressed] = White_OFF;
			pixel[2+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;
			pixel[54+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[101+letter_pressed] = White_OFF;
			pixel[102+letter_pressed] = White_OFF;
			pixel[103+letter_pressed] = White_OFF;
			pixel[104+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;
			pixel[154+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			pixel[204+letter_pressed] = White_OFF;
			break;
		case 1:
			Score_names[variable] = 'B';
			pixel[0+letter_pressed] = White_OFF;
			pixel[1+letter_pressed] = White_OFF;
			pixel[2+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;
			pixel[54+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[101+letter_pressed] = White_OFF;
			pixel[102+letter_pressed] = White_OFF;
			pixel[103+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;
			pixel[154+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			pixel[201+letter_pressed] = White_OFF;
			pixel[202+letter_pressed] = White_OFF;
			pixel[203+letter_pressed] = White_OFF;
			break;
		case 2:
			Score_names[variable] = 'C';
			pixel[1+letter_pressed] = White_OFF;
			pixel[2+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;

			pixel[201+letter_pressed] = White_OFF;
			pixel[202+letter_pressed] = White_OFF;
			pixel[203+letter_pressed] = White_OFF;
			pixel[204+letter_pressed] = White_OFF;
			break;
		case 3:
			Score_names[variable] = 'D';
			pixel[0+letter_pressed] = White_OFF;
			pixel[1+letter_pressed] = White_OFF;
			pixel[2+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;
			pixel[54+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[104+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;
			pixel[154+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			pixel[201+letter_pressed] = White_OFF;
			pixel[202+letter_pressed] = White_OFF;
			pixel[203+letter_pressed] = White_OFF;
			break;
		case 4:
			Score_names[variable] = 'E';
			pixel[0+letter_pressed] = White_OFF;
			pixel[1+letter_pressed] = White_OFF;
			pixel[2+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[101+letter_pressed] = White_OFF;
			pixel[102+letter_pressed] = White_OFF;
			pixel[103+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			pixel[201+letter_pressed] = White_OFF;
			pixel[202+letter_pressed] = White_OFF;
			pixel[203+letter_pressed] = White_OFF;
			pixel[204+letter_pressed] = White_OFF;
			break;
		case 5:
			Score_names[variable] = 'F';
			pixel[0+letter_pressed] = White_OFF;
			pixel[1+letter_pressed] = White_OFF;
			pixel[2+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[101+letter_pressed] = White_OFF;
			pixel[102+letter_pressed] = White_OFF;
			pixel[103+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			break;
		case 6:
			Score_names[variable] = 'G';
			pixel[1+letter_pressed] = White_OFF;
			pixel[2+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[103+letter_pressed] = White_OFF;
			pixel[104+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;
			pixel[154+letter_pressed] = White_OFF;

			pixel[201+letter_pressed] = White_OFF;
			pixel[202+letter_pressed] = White_OFF;
			pixel[203+letter_pressed] = White_OFF;
			pixel[204+letter_pressed] = White_OFF;
			break;
		case 7:
			Score_names[variable] = 'H';
			pixel[0+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;
			pixel[54+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[101+letter_pressed] = White_OFF;
			pixel[102+letter_pressed] = White_OFF;
			pixel[103+letter_pressed] = White_OFF;
			pixel[104+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;
			pixel[154+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			pixel[204+letter_pressed] = White_OFF;
			break;
		case 8:
			Score_names[variable] = 'I';
			pixel[2+letter_pressed] = White_OFF;

			pixel[52+letter_pressed] = White_OFF;

			pixel[102+letter_pressed] = White_OFF;

			pixel[152+letter_pressed] = White_OFF;

			pixel[202+letter_pressed] = White_OFF;
			break;
		case 9:
			Score_names[variable] = 'J';
			pixel[4+letter_pressed] = White_OFF;

			pixel[54+letter_pressed] = White_OFF;

			pixel[104+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;
			pixel[154+letter_pressed] = White_OFF;

			pixel[201+letter_pressed] = White_OFF;
			pixel[202+letter_pressed] = White_OFF;
			pixel[203+letter_pressed] = White_OFF;
			break;
		case 10:
			Score_names[variable] = 'K';
			pixel[0+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;
			pixel[52+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[101+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;
			pixel[152+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			pixel[203+letter_pressed] = White_OFF;
			break;
		case 11:
			Score_names[variable] = 'L';
			pixel[0+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			pixel[201+letter_pressed] = White_OFF;
			pixel[202+letter_pressed] = White_OFF;
			pixel[203+letter_pressed] = White_OFF;
			pixel[204+letter_pressed] = White_OFF;
			break;
		case 12:
			Score_names[variable] = 'M';
			pixel[0+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;
			pixel[51+letter_pressed] = White_OFF;
			pixel[53+letter_pressed] = White_OFF;
			pixel[54+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[102+letter_pressed] = White_OFF;
			pixel[104+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;
			pixel[154+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			pixel[204+letter_pressed] = White_OFF;
			break;
		case 13:
			Score_names[variable] = 'N';
			pixel[0+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;
			pixel[51+letter_pressed] = White_OFF;
			pixel[54+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[102+letter_pressed] = White_OFF;
			pixel[104+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;
			pixel[153+letter_pressed] = White_OFF;
			pixel[154+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			pixel[204+letter_pressed] = White_OFF;
			break;
		case 14:
			Score_names[variable] = 'O';
			pixel[1+letter_pressed] = White_OFF;
			pixel[2+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;
			pixel[54+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[104+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;
			pixel[154+letter_pressed] = White_OFF;

			pixel[201+letter_pressed] = White_OFF;
			pixel[202+letter_pressed] = White_OFF;
			pixel[203+letter_pressed] = White_OFF;
			break;
		case 15:
			Score_names[variable] = 'P';
			pixel[0+letter_pressed] = White_OFF;
			pixel[1+letter_pressed] = White_OFF;
			pixel[2+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;
			pixel[54+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[101+letter_pressed] = White_OFF;
			pixel[102+letter_pressed] = White_OFF;
			pixel[103+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			break;
		case 16:
			Score_names[variable] = 'Q';
			pixel[1+letter_pressed] = White_OFF;
			pixel[2+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;
			pixel[54+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[102+letter_pressed] = White_OFF;
			pixel[104+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;
			pixel[153+letter_pressed] = White_OFF;

			pixel[201+letter_pressed] = White_OFF;
			pixel[202+letter_pressed] = White_OFF;
			pixel[204+letter_pressed] = White_OFF;
			break;
		case 17:
			Score_names[variable] = 'R';
			pixel[0+letter_pressed] = White_OFF;
			pixel[1+letter_pressed] = White_OFF;
			pixel[2+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;
			pixel[54+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[101+letter_pressed] = White_OFF;
			pixel[102+letter_pressed] = White_OFF;
			pixel[103+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;
			pixel[153+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			pixel[204+letter_pressed] = White_OFF;
			break;
		case 18:
			Score_names[variable] = 'S';
			pixel[1+letter_pressed] = White_OFF;
			pixel[2+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;

			pixel[101+letter_pressed] = White_OFF;
			pixel[102+letter_pressed] = White_OFF;
			pixel[103+letter_pressed] = White_OFF;

			pixel[154+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			pixel[201+letter_pressed] = White_OFF;
			pixel[202+letter_pressed] = White_OFF;
			pixel[203+letter_pressed] = White_OFF;
			break;
		case 19:
			Score_names[variable] = 'T';
			pixel[0+letter_pressed] = White_OFF;
			pixel[1+letter_pressed] = White_OFF;
			pixel[2+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[52+letter_pressed] = White_OFF;

			pixel[102+letter_pressed] = White_OFF;

			pixel[152+letter_pressed] = White_OFF;

			pixel[202+letter_pressed] = White_OFF;
			break;
		case 20:
			Score_names[variable] = 'U';
			pixel[0+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;
			pixel[54+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[104+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;
			pixel[154+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			pixel[201+letter_pressed] = White_OFF;
			pixel[202+letter_pressed] = White_OFF;
			pixel[203+letter_pressed] = White_OFF;
			pixel[204+letter_pressed] = White_OFF;
			break;
		case 21:
			Score_names[variable] = 'V';
			pixel[0+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;
			pixel[54+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[104+letter_pressed] = White_OFF;

			pixel[151+letter_pressed] = White_OFF;
			pixel[153+letter_pressed] = White_OFF;

			pixel[202+letter_pressed] = White_OFF;
			break;
		case 22:
			Score_names[variable] = 'W';
			pixel[0+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[50+letter_pressed] = White_OFF;
			pixel[54+letter_pressed] = White_OFF;

			pixel[100+letter_pressed] = White_OFF;
			pixel[104+letter_pressed] = White_OFF;

			pixel[150+letter_pressed] = White_OFF;
			pixel[152+letter_pressed] = White_OFF;
			pixel[154+letter_pressed] = White_OFF;

			pixel[201+letter_pressed] = White_OFF;
			pixel[203+letter_pressed] = White_OFF;
			break;
		case 23:
			Score_names[variable] = 'X';
			pixel[0+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[51+letter_pressed] = White_OFF;
			pixel[53+letter_pressed] = White_OFF;

			pixel[102+letter_pressed] = White_OFF;

			pixel[151+letter_pressed] = White_OFF;
			pixel[153+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			pixel[204+letter_pressed] = White_OFF;
			break;
		case 24:
			Score_names[variable] = 'Y';
			pixel[0+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[51+letter_pressed] = White_OFF;
			pixel[53+letter_pressed] = White_OFF;

			pixel[102+letter_pressed] = White_OFF;

			pixel[152+letter_pressed] = White_OFF;

			pixel[202+letter_pressed] = White_OFF;
			break;
		case 25:
			Score_names[variable] = 'Z';
			pixel[0+letter_pressed] = White_OFF;
			pixel[1+letter_pressed] = White_OFF;
			pixel[2+letter_pressed] = White_OFF;
			pixel[3+letter_pressed] = White_OFF;
			pixel[4+letter_pressed] = White_OFF;

			pixel[53+letter_pressed] = White_OFF;

			pixel[102+letter_pressed] = White_OFF;

			pixel[151+letter_pressed] = White_OFF;

			pixel[200+letter_pressed] = White_OFF;
			pixel[201+letter_pressed] = White_OFF;
			pixel[202+letter_pressed] = White_OFF;
			pixel[203+letter_pressed] = White_OFF;
			pixel[204+letter_pressed] = White_OFF;
			break;
		case 26:
			Score_names[variable] = '|';
		break;
		case 27:
			Score_names[variable] = '.';
			pixel[202+letter_pressed] = White_OFF;
			break;
		case 28:
			Score_names[variable] = '!';
			pixel[2+letter_pressed] = White_OFF;

			pixel[52+letter_pressed] = White_OFF;

			pixel[102+letter_pressed] = White_OFF;

			pixel[202+letter_pressed] = White_OFF;
			break;
		case 29:
			f = 1; //cia buvo f = 2;
			winning = 92;
			Mine_state = 100;
			letter_pressed = 0;
			break;
		}
	letter_pressed = letter_pressed+5;
	variable++;
	}
	else if(Mine_state == 29 && letter_pressed > 25)
	{
//		f = 2;
		f = 1;
		winning = 92;
		Mine_state = 100;
		letter_pressed = 0;
	}
	}
	else if (button == 0)
	{
		if (Bomb_pressed == 1)
		{
			Note('c', 1, 0);
			Note('g', 1, 0);
		}
		else
		{
			Note('c', 5, 0);

		}
	}
//
//
//  /* USER CODE END EXTI0_IRQn 1 */
}

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
//  /* USER CODE BEGIN EXTI1_IRQn 0 */
//
//  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Down_Pin);
//  /* USER CODE BEGIN EXTI1_IRQn 1 */
	int button1 = 2;
	button1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
	if (button1 == 1)
	{
		Note('O', 5, 0);
		state = state - 1;
		if (state < 0)
		{
			state = 0;
		}
		if (Menu_state == 1 && Selection_button == 2 && Bomb_pressed != 1 && winning != 91)
		{
			Mine_state = Mine_state+10;
			if (Mine_state > 99)
			{
				Mine_state = Mine_state - 10;
			}
		}
		else if(Menu_state == 1 && Selection_button == 2 && winning == 91)
		{
			Mine_state = Mine_state+10;
			if (Mine_state > 29)
			{
				Mine_state = Mine_state - 10;
			}
		}
		if (Selection_button == 0)
		{
		Menu_state = Menu_state + 2;
		if (Menu_state > 3)
		{
			Menu_state = Menu_state - 2;
		}
		}
	}
	else if (button1 == 0)
	{
		if (score_show == 1)
		{
			finished = 0;
			score_board++;
			if (score_board > 3)
			{
				score_board = 3;
			}
		}
		if (Bomb_pressed == 1)
		{
			Note('c', 1, 0);
			Note('g', 1, 0);
		}
		else
		{
			Note('d', 5, 0);
		}
	}
//  /* USER CODE END EXTI1_IRQn 1 */
}

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
//  /* USER CODE BEGIN EXTI2_IRQn 0 */
//
//  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Up_Pin);
//  /* USER CODE BEGIN EXTI2_IRQn 1 */
	int button = 2;
	button = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
	if (button == 1)
	{
	Note('O', 5, 0);
	state = state + 1;
	if (Menu_state == 1 && Selection_button == 2 && Bomb_pressed != 1 && winning != 91)
	{
		Mine_state = Mine_state-10;
		if (Mine_state < 0)
		{
			Mine_state = Mine_state+10;
		}
	}
	else if(Menu_state == 1 && Selection_button == 2 && winning == 91)
	{
		Mine_state = Mine_state-10;
		if (Mine_state < 0)
		{
			Mine_state = Mine_state+10;
		}
	}
	if (Selection_button == 0)
	{
	Menu_state = Menu_state - 2;
	if (Menu_state < 0)
	{
		Menu_state = Menu_state + 2;
	}
	}
	}
	else if (button == 0)
	{
		if (score_show == 1)
		{
			finished = 0;
			score_board--;
			if (score_board < 0)
			{
				score_board = 0;
			}
		}
		if (Bomb_pressed == 1)
		{
			Note('c', 1, 0);
			Note('g', 1, 0);
		}
		else
		{
			Note('E', 5, 0);
		}

	}
//  /* USER CODE END EXTI2_IRQn 1 */
}

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
//  /* USER CODE BEGIN EXTI4_IRQn 0 */
//
//  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Right_Pin);
  /* USER CODE BEGIN EXTI4_IRQn 1 */
	int button = 2;
	button = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
	if (button == 1)
	{
	Note('O', 5, 0);
		if (state == 0)
		{
			button_pushed = button_pushed + 1;
			if (button_pushed > 9) // kolkas padarau iki 8
			{
				button_pushed = 9;
			}
		}
		else if (state == 1)
		{
			button_pushed = button_pushed + 0b10;
		}
		else if (state == 2)
		{
			button_pushed = button_pushed + 0b10;
		}
		if (Selection_button == 0)
		{
		Menu_state++;
		if (Menu_state > 3)
		{
			Menu_state = 3;
		}
		}
		if (Menu_state == 1 && Selection_button == 2 && Bomb_pressed != 1 && winning != 91)
		{
			Mine_state++;
			if (Mine_state > 99)
			{
				Mine_state = 99;
			}
		}
		else if (Menu_state == 1 && Selection_button == 2 && winning == 91)
		{
			Mine_state++;
				if (Mine_state > 29)
				{
					Mine_state = 29;
				}
		}
	}
	else if (button == 0)
	{

		if (Bomb_pressed == 1)
		{
			Note('c', 1, 0);
			Note('g', 1, 0);
		}
		else
		{
			Note('f', 5, 0);
		}
	}
//  /* USER CODE END EXTI4_IRQn 1 */
}

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
//  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
//
//  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Left_Pin);
  HAL_GPIO_EXTI_IRQHandler(Button_Back_Pin);
  HAL_GPIO_EXTI_IRQHandler(Button_Menu_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
	int button1 = 2;
	int button2 = 2;
	int button3 = 2;
	int button = 0;
	button1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
	button2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
	button3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);

	if (button1 == 0)
	{

		if (Bomb_pressed == 1)
		{
			Note('c', 1, 0);
			Note('g', 1, 0);
		}
		else
		{
			Note('g', 5, 0);
		}
		a = 1;
	}
	else if (button2 == 0)
	{

		if (Bomb_pressed == 1)
		{
			Note('c', 1, 0);
			Note('g', 1, 0);
		}
		else
		{
			Note('a', 5, 0);
		}
		a = 2;
	}
	else if (button3 == 0)
	{

		if (Bomb_pressed == 1)
		{
			Note('c', 1, 0);
			Note('g', 1, 0);
		}
		else
		{
			Note('B', 5, 0);
		}
		a = 3;
	}
	else if (button1 == 1 && a == 1)
	{
		Note('O', 5, 0);
		a = 0;
		if (state == 0)
		{
			button_pushed = button_pushed - 1;
			if (button_pushed < 0)
			{
				button_pushed = 0;
			}
		}
		else if (state == 1)
		{
			button_pushed = button_pushed - 0b10;
			if (button_pushed < 0)
			{
				button_pushed = 0;
			}
		}
		else if (state == 2)
		{
			button_pushed = button_pushed << 1;
		}
		if (Selection_button == 0)
		{
		Menu_state--;
		if (Menu_state < 0)
		{
			Menu_state = 0;
		}
		}
		if (Menu_state == 1 && Selection_button == 2 && Bomb_pressed != 1 && winning != 91)
		{
			Mine_state--;
			if (Mine_state < 0)
			{
				Mine_state = 0;
			}
		}
		else if(Menu_state == 1 && Selection_button == 2 && winning == 91)
		{
			Mine_state--;
			if (Mine_state < 0)
			{
				Mine_state = 0;
			}
		}
	}
	else if (button2 == 1 && a == 2)
	{
	Note('O', 5, 0);
	a = 0;
	if (Menu_state == 1 && Selection_button == 2 && Bomb_pressed != 1 && click[Mine_state] == 0)
	{
		switch(flag_click[Mine_state])
		{
		case 0:
			flag_click[Mine_state] = 1;
		break;
		case 1:
			flag_click[Mine_state] = 0;
		break;
		}
	}
	if (winning == 91) // kol vyksta write_name paspaudus back mygtuka istrina raides
	{
		letter_pressed = 0;
		memset(Score_names, 0, sizeof(Score_names));
		f = 1;
	}

	if (state == 0)
	{
		button_pushed = 0;
	}
	else if (state == 1)
	{
		button_pushed = 0b10;
	}
	else if (state == 2)
	{
		button_pushed = 0;
	}
	}
	else if (button3 == 1 && a == 3)
	{
	Note('O', 5, 0);
	a = 0;
	button_pushed = 0;
	Selection_button = 0;
	Menu_state = 0;
	state = 0;
	Mine_start = 0;
	Mine_state = 0;
	memset(click, 0, sizeof(click));
	memset(Random_num, 0, sizeof(Random_num));
	bomb = 11;
	Bomb_pressed = 0;
	memset(boom, 0, sizeof(boom));
	memset(Number_colour, 0, sizeof(Number_colour));
	winning = 0;
	memset(flag_click, 0, sizeof(flag_click));
	letter_pressed = 0;
	score_show = 0;
	f2 = 0;
	variable = 0;
	start = 1;
	memset(Score_names,0,sizeof(Score_names));

//	//TESTING!!
//
////	Selection_button = 1;
////	button_pushed = 2;
////	winning = 90;
////	boom[32] = 1;
//
	}
//
//
//
//
//
//  /* USER CODE END EXTI9_5_IRQn 1 */
}

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
//	  Color_compare(0b10000000000, White_OFF,0b100000000000,White_OFF,0b1000000000000,White_OFF,White_OFF,White_OFF,White_OFF,White_OFF); // buve 10, 100, 1000

	if (start == 0)
	{
		switch(Selection_button)
		{
		case 0:
			switch(Menu_state)
			{
			case 0:
				GPIOC->ODR = 0x908;
				Main_Screen(Cyan_Soft, Green_Soft_Pale, Selection_Colour, Selection_Colour, Orange_Soft, Orange_dark, Orange_Light, Deep_Green, Green_Soft_dark, Green_Hard, Dark_Gray, White_1_OFF, White_1_OFF);
//				Main_Screen(0x908, GREEN_2_ON, GREEN_4_ON, GREEN_4_ON, RED_1_ON, RED_4_ON, RED_3_ON);
				break;
			case 1:
				GPIOC->ODR = 0x908;
				Main_Screen(Cyan_Soft, Green_Soft_Pale, Green_Soft_dark, Green_Hard, Orange_Soft, Selection_Colour, Selection_Colour, Deep_Green, Green_Soft_dark, Green_Hard, Dark_Gray, White_1_OFF, White_1_OFF);
//				Main_Screen(Cyan_2_ON, GREEN_2_ON, GREEN_3_ON, GREEN_4_ON, RED_1_ON, GREEN_4_ON, GREEN_4_ON);
			break;
			case 2:
			GPIOC->ODR = 0x908;
			Main_Screen(Cyan_Soft, Green_Soft_Pale, Green_Soft_dark, Green_Hard, Orange_Soft, Orange_dark, Orange_Light, Deep_Green, Selection_Colour, Selection_Colour, Dark_Gray, White_1_OFF, White_1_OFF);
			break;
			case 3:
			GPIOC->ODR = 0x908;
			Main_Screen(Cyan_Soft, Green_Soft_Pale, Green_Soft_dark, Green_Hard, Orange_Soft, Orange_dark, Orange_Light, Deep_Green, Green_Soft_dark, Green_Hard, Dark_Gray, Selection_Colour, Selection_Colour);
			break;
			}
		break;
		case 1:
			switch (state)
			{
			case 0:
//				colours(button_pushed);
				break;
			case 1:
				test_colours(button_pushed);
				break;
			case 2:
				Color_test(button_pushed, !button_pushed);
				break;
			case 3 ... 4:
				state = 2;
				break;
			}
		break;
		case 2:
			if (bomb != 11 && boom[32] != 1 && boom[31] != 1)
			{
			Draw_MineSweeper(White_ON, Light_gray, Dark_Gray);
			}
			else if (boom[32] == 1 && winning == 90)
			{
				bomb = 11;// reikia cia padet, nes kitaip drawina minesweeperi vel
				GPIOC->ODR = Orange;
				Draw_Winner(Orange, Orange_bright, Orange_Dark, Red_pale, Skin_Light, Skin_Dark);
			}
			else if (boom[31] == 1 && boom[32] != 1)
			{
				bomb = 11;// reikia cia padet, nes kitaip drawina minesweeperi vel
	//			start = 1;
				Draw_Looser();
			}
			else if (winning == 91 && f1[0] != 0) // basicly a loop kol white_name voide nesuvedei
			{
				boom[32] = 0;
				Write_Name();
	//			Menu_state = 1, Selection_button = 2, winning = 91; // delete this
			}
			else if (score_show == 1 )
			{
				int variable1 = 0; // f1 yra score rank, nesvarbu ar 5 ar 10
				switch(score_board)
				{
				case 0:
					if(finished == 0)
					{
						variable1 = 0;
						while(variable1 < 1000)
						{
							pixel[variable1] = 0xF00;
							variable1++;
						}
						variable1 = 0;
						while(variable1 < 250)
						{
							ppixel[variable1] = 0xF00;
							Score_val[variable1] = 0xF00;
							variable1++;
						}
						letter_pressed = 0;
						variable1 = 0;
						while(variable1 !=50) // palik 50, nes 10 raizdiu ant 5 eiluciu
						{
							Name_Placement(variable1);
							variable1++;
						}
						int score_decimal[15]; // cia po 3 skaitmenis penkiom eilutem
						i1 = 0, i2 = 1; // palik sita, reikalingas while loopui i1 turi buti 0, o i2 = 1;
						while(i1 < 15)
						{
							score_decimal[i1] = score[i2]%1000/100;
							i1++;
							score_decimal[i1] = score[i2]%100/10;
							i1++;
							score_decimal[i1] = score[i2]%10;
							i1++;
							i2++;
						}
						variable1 = 0; //palik 1 cia.
						f3 = 0, f2 = 0; //maybe delete
						while(variable1 < 15) // palik 15, nes 3 raides ant 5 eiluciu
						{
							calculate_scores_for_Ranks(variable1,score_decimal);
							variable1++;
						}
						finished = 1;
					}
					else if (finished == 1)
					{
						Ranks(0);
					}
					break;
				case 1:
					if(finished == 0)
					{
						variable1 = 0;
						while(variable1 < 1000)
						{
							pixel[variable1] = 0xF00;
							variable1++;
						}
						variable1 = 0;
						while(variable1 < 250)
						{
							ppixel[variable1] = 0xF00;
							Score_val[variable1] = 0xF00;
							variable1++;
						}
						letter_pressed = 0;
						variable1 = 50;
						while(variable1 !=100) // palik 50, nes 10 raizdiu ant 5 eiluciu
						{
							Name_Placement(variable1);
							variable1++;
						}
						int score_decimal[15]; // cia po 3 skaitmenis penkiom eilutem
						i1 = 0, i2 = 6; // palik sita, reikalingas while loopui i1 turi buti 0, o i2 = 1;
						while(i1 < 15)
						{
							score_decimal[i1] = score[i2]%1000/100;
							i1++;
							score_decimal[i1] = score[i2]%100/10;
							i1++;
							score_decimal[i1] = score[i2]%10;
							i1++;
							i2++;
						}
						variable1 = 0; //palik 1 cia.
						f3 = 0, f2 = 0; //maybe delete
						while(variable1 < 15) // palik 15, nes 3 raides ant 5 eiluciu
						{
							calculate_scores_for_Ranks(variable1,score_decimal);
							variable1++;
						}
						finished = 1;
					}
					else if (finished == 1)
					{
						Ranks(1);
					}
					break;
				case 2:
					if(finished == 0)
					{
						variable1 = 0;
						while(variable1 < 1000)
						{
							pixel[variable1] = 0xF00;
							variable1++;
						}
						variable1 = 0;
						while(variable1 < 250)
						{
							ppixel[variable1] = 0xF00;
							Score_val[variable1] = 0xF00;
							variable1++;
						}
						letter_pressed = 0;
						variable1 = 100;
						while(variable1 !=150) // palik 50, nes 10 raizdiu ant 5 eiluciu
						{
							Name_Placement(variable1);
							variable1++;
						}
						int score_decimal[15]; // cia po 3 skaitmenis penkiom eilutem
						i1 = 0, i2 = 11; // palik sita, reikalingas while loopui i1 turi buti 0, o i2 = 1;
						while(i1 < 15)
						{
							score_decimal[i1] = score[i2]%1000/100;
							i1++;
							score_decimal[i1] = score[i2]%100/10;
							i1++;
							score_decimal[i1] = score[i2]%10;
							i1++;
							i2++;
						}
						variable1 = 0; //palik 1 cia.
						f3 = 0, f2 = 0; //maybe delete
						while(variable1 < 15) // palik 15, nes 3 raides ant 5 eiluciu
						{
							calculate_scores_for_Ranks(variable1,score_decimal);
							variable1++;
						}
						finished = 1;
					}
					else if (finished == 1)
					{
						Ranks(2);
					}
					break;
				case 3:
					if(finished == 0)
					{
						variable1 = 0;
						while(variable1 < 1000)
						{
							pixel[variable1] = 0xF00;
							variable1++;
						}
						variable1 = 0;
						while(variable1 < 250)
						{
							ppixel[variable1] = 0xF00;
							Score_val[variable1] = 0xF00;
							variable1++;
						}
						letter_pressed = 0;
						variable1 = 150;
						while(variable1 !=200) // palik 50, nes 10 raizdiu ant 5 eiluciu
						{
							Name_Placement(variable1);
							variable1++;
						}
						int score_decimal[15]; // cia po 3 skaitmenis penkiom eilutem
						i1 = 0, i2 = 16; // palik sita, reikalingas while loopui i1 turi buti 0, o i2 = 1;
						while(i1 < 15)
						{
							score_decimal[i1] = score[i2]%1000/100;
							i1++;
							score_decimal[i1] = score[i2]%100/10;
							i1++;
							score_decimal[i1] = score[i2]%10;
							i1++;
							i2++;
						}
						variable1 = 0; //palik 1 cia.
						f3 = 0, f2 = 0;
						while(variable1 < 15) // palik 15, nes 3 raides ant 5 eiluciu
						{
							calculate_scores_for_Ranks(variable1,score_decimal);
							variable1++;
						}
						finished = 1;
					}
					else if (finished == 1)
					{
						Ranks(3);
					}
					break;
				}
			}
		break;
		}
	}

//				int variable1 = 0; // f1 yra score rank, nesvarbu ar 5 ar 10
//				letter_pressed = 0;
//				switch(score_board)
//				{
//				case 0:
//					variable1 = 0;
//					while(variable1 !=50) // palik 50, nes 10 raizdiu ant 5 eiluciu
//					{
//						Name_Placement(variable1);
//						variable1++;
//					}
//					break;
//				case 1:
//					variable1 = 50;
//					while(variable1 !=100) // palik 50, nes 10 raizdiu ant 5 eiluciu
//					{
//						Name_Placement(variable1);
//						variable1++;
//					}
//					break;
//				case 2:
//					variable1 = 100;
//					while(variable1 !=150) // palik 50, nes 10 raizdiu ant 5 eiluciu
//					{
//						Name_Placement(variable1);
//						variable1++;
//					}
//					break;
//				case 3:
//					variable1 = 150;
//					while(variable1 !=200) // palik 50, nes 10 raizdiu ant 5 eiluciu
//					{
//						Name_Placement(variable1);
//						variable1++;
//					}
//					break;
//
//				}
//				int score_decimal[15]; // cia po 3 skaitmenis penkiom eilutem
//				i1 = 0, i2 = 1; // palik sita, reikalingas while loopui i1 turi buti 0, o i2 = 1;
//				while(i1 < 15)
//				{
//					score_decimal[i1] = score[i2]%1000/100;
//					i1++;
//					score_decimal[i1] = score[i2]%100/10;
//					i1++;
//					score_decimal[i1] = score[i2]%10;
//					i1++;
//					i2++;
//				}
//				variable1 = 0; //palik 1 cia.
//				f3 = 0, f2 = 0; //maybe delete
//				while(variable1 < 15) // palik 15, nes 3 raides ant 5 eiluciu
//				{
//					calculate_scores_for_Ranks(variable1,score_decimal);
//					variable1++;
//				}
//	  	  	score_show = 2;

//			else if(score_show == 2)
//			{


//			}


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if (Lines > 601 && Lines < 606 ) // pabandyk ši�?ia padaryt > 601 && Lines <= 605
	{
	GPIOA->ODR &= 0b01111111;
	}
	else
	{
	GPIOA->ODR |= 0b10000000;
	}
	if (Lines >= 628)
	{
	Lines = 0;
	if (winning != 90)
	{
	score[0]++;
	}
	}
	else
	{
	Lines++;

	}

  /* USER CODE END TIM3_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void Sort_the_Score()
{
	int max = 0;
	int max_pos = 0;
	int result_pos=0;
	int i = 0;
	for (int i = 1; i <= 20; i++) //find out the biggest member of array
	{
	    if (score[i] > max)
	    {
            max = score[i];
            max_pos = i;
	    }
	}
	if (score[max_pos] > score[0]) //is that member bigger than your score?
	{
	    score[max_pos] = score[0];
	}
    else
    {
    	f1[0] = 0;
    	result_pos = 0;
    }
	max = 0;
    max_pos = 0;
	for(int n = 20; n>=1; n--) // sorting the array from smallest to biggest
	{
        for (int i= 1; i<=n; i++)
        {
            if (score[i] > max)
            {
                max = score[i];
                max_pos = i;
            }

        }
        for (int i1 = max_pos; i1<=n; i1++)
        {
            score[i1] = score[i1+1];
        }
        score[n] = max;
       max = 0;
	}
	for (int i = 0; i<=20; i++)
	{
        if(score[i] == score[0])
        {
            result_pos = i;
        }
	}

	 int var = 0;
switch(result_pos)
{
case 1:
		f1[1] = 1;
		f1[0] = 1;
		for(int ii = 199; ii >= 0; ii--)
		{
			all_names[ii] = all_names[ii-10];
		}
		while (var <= 1000)
		{
			pixel[var] = 0xF00;
			var++;
		}
		f1[2] = 1;
	 break;
case 2:
	 f1[2] = 1;
	 f1[0] = 2;
	for(int i = 199; i >= 10; i--)
	{
	  all_names[i] = all_names[i-10];
	}
	var = 250;
	while (var <= 1000)
	{
		pixel[var] = 0xF00;
		var++;
	}
	  f1[3] = 1;
	 break;
case 3:
	 f1[3] = 1;
	 f1[0] = 3;
	  for(int i = 199; i >= 20; i--)
	  {
		  all_names[i] = all_names[i-10];
	  }
	var = 500;
	while (var <= 1000)
	{
		pixel[var] = 0xF00;
		var++;
	}
	  f1[4] = 1;
	 break;
case 4:
	 f1[4] = 1;
	 f1[0] = 4;
	  for(int i = 199; i >= 30; i--)
	  {
		  all_names[i] = all_names[i-10];
	  }
	var = 750;
	while (var <= 1000)
	{
		pixel[var] = 0xF00;
		var++;
	}
		f1[5] = 1;
	 break;
case 5:
	 f1[5] = 1;
	 f1[0] = 5;
	  for(int i = 199; i >= 40; i--)
	  {
		  all_names[i] = all_names[i-10];
	  }
	var = 0;
	while (var <= 250)
	{
		ppixel[var] = 0xF00;
		var++;
	}
	f1[6] = 1;
	 break;
case 6:
	 f1[6] = 1;
	 f1[0] = 6;
		for(int ii = 199; ii >= 50; ii--)
		{
			all_names[ii] = all_names[ii-10];
		}
		while (var <= 1000)
		{
			pixel[var] = 0xF00;
			var++;
		}
		f1[7] = 1;
	 break;
case 7:
	 f1[7] = 1;
	 f1[0] = 7;
		for(int i = 199; i >= 60; i--)
		{
		  all_names[i] = all_names[i-10];
		}
		var = 250;
		while (var <= 1000)
		{
			pixel[var] = 0xF00;
			var++;
		}
		  f1[8] = 1;
	 break;
case 8:
	 f1[8] = 1;
	 f1[0] = 8;
	  for(int i = 199; i >= 70; i--)
	  {
		  all_names[i] = all_names[i-10];
	  }
	var = 500;
	while (var <= 1000)
	{
		pixel[var] = 0xF00;
		var++;
	}
	  f1[9] = 1;
	 break;
case 9:
	 f1[9] = 1;
	 f1[0] = 9;
	  for(int i = 199; i >= 80; i--)
	  {
		  all_names[i] = all_names[i-10];
	  }
	var = 750;
	while (var <= 1000)
	{
		pixel[var] = 0xF00;
		var++;
	}
		f1[10] = 1;
	 break;
case 10:
	 f1[10] = 1;
	 f1[0] = 10;
	  for(int i = 199; i >= 90; i--)
	  {
		  all_names[i] = all_names[i-10];
	  }
	var = 0;
	while (var <= 250)
	{
		ppixel[var] = 0xF00;
		var++;
	}
	f1[11] = 1;
	 break;
case 11:
	 f1[11] = 1;
	 f1[0] = 11;
		for(int ii = 199; ii >= 100; ii--)
		{
			all_names[ii] = all_names[ii-10];
		}
		while (var <= 1000)
		{
			pixel[var] = 0xF00;
			var++;
		}
		f1[12] = 1;
	 break;
case 12:
	 f1[12] = 1;
	 f1[0] = 12;
		for(int i = 199; i >= 110; i--)
		{
		  all_names[i] = all_names[i-10];
		}
		var = 250;
		while (var <= 1000)
		{
			pixel[var] = 0xF00;
			var++;
		}
		  f1[13] = 1;
	 break;
case 13:
	 f1[13] = 1;
	 f1[0] = 13;
	  for(int i = 199; i >= 120; i--)
	  {
		  all_names[i] = all_names[i-10];
	  }
	var = 500;
	while (var <= 1000)
	{
		pixel[var] = 0xF00;
		var++;
	}
	  f1[14] = 1;
	 break;
case 14:
	 f1[14] = 1;
	 f1[0] = 14;
	  for(int i = 199; i >= 130; i--)
	  {
		  all_names[i] = all_names[i-10];
	  }
	var = 750;
	while (var <= 1000)
	{
		pixel[var] = 0xF00;
		var++;
	}
		f1[15] = 1;
	 break;
case 15:
	 f1[15] = 1;
	 f1[0] = 15;
	  for(int i = 199; i >= 140; i--)
	  {
		  all_names[i] = all_names[i-10];
	  }
	var = 0;
	while (var <= 250)
	{
		ppixel[var] = 0xF00;
		var++;
	}
	f1[16] = 1;
	 break;
case 16:
	 f1[16] = 1;
	 f1[0] = 16;
	 for(int ii = 199; ii >= 150; ii--)
	 {
	 	 all_names[ii] = all_names[ii-10];
	 }
	 while (var <= 1000)
 	 {
		 pixel[var] = 0xF00;
		 var++;
	 }
	 f1[17] = 1;
	 break;
case 17:
	 f1[17] = 1;
	 f1[0] = 17;
		for(int i = 199; i >= 160; i--)
		{
		  all_names[i] = all_names[i-10];
		}
		var = 250;
		while (var <= 1000)
		{
			pixel[var] = 0xF00;
			var++;
		}
	f1[18] = 1;
	 break;
case 18:
	 f1[18] = 1;
	 f1[0] = 18;
	  for(int i = 199; i >= 170; i--)
	  {
		  all_names[i] = all_names[i-10];
	  }
	var = 500;
	while (var <= 1000)
	{
		pixel[var] = 0xF00;
		var++;
	}
	  f1[19] = 1;
	 break;
case 19:
	 f1[19] = 1;
	 f1[0] = 19;
	  for(int i = 199; i >= 180; i--)
	  {
		  all_names[i] = all_names[i-10];
	  }
	var = 750;
	while (var <= 1000)
	{
		pixel[var] = 0xF00;
		var++;
	}
		f1[20] = 1;
	 break;
case 20:
	 f1[20] = 1;
	 f1[0] = 20;
	  for(int i = 199; i >= 190; i--)
	  {
		  all_names[i] = all_names[i-10];
	  }
	var = 0;
	while (var <= 250)
	{
		ppixel[var] = 0xF00;
		var++;
	}
 break;
}
score[0] = 0;


//	  if(f1[0] == 1 && f1[1] == 1)
//	  {
//		  for(int ii = 199; ii >= 0; ii--)
//		  {
//			  all_names[ii] = all_names[ii-10];
//		  }
//			while (var <= 1000)
//			{
//
//				pixel[var] = 8190;
//	//			ppixel[var] = 8190;
//	//			Score_val[var] = 8190;
//				var++;
//			}
//
//		  f1[2] = 1;
//	  }

//	  else if(f1[0] == 2 && f1[2] == 1)
//	  {
//		for(int i = 199; i >= 10; i--)
//		{
//		  all_names[i] = all_names[i-10];
//		}
//		var = 250;
//		while (var <= 1000)
//		{
//
//			pixel[var] = 8190;
//		//			ppixel[var] = 8190;
//		//			Score_val[var] = 8190;
//			var++;
//		}
//		  f1[3] = 1;
//	  }
//	  else if(f1[0] == 3 && f1[3] == 1)
//	  {
//		  for(int i = 199; i >= 20; i--)
//		  {
//			  all_names[i] = all_names[i-10];
//		  }
//		var = 500;
//		while (var <= 1000)
//		{
//
//			pixel[var] = 8190;
//		//			ppixel[var] = 8190;
//		//			Score_val[var] = 8190;
//			var++;
//		}
//		  f1[4] = 1;
//	  }
//	  else if(f1[0] == 4 && f1[4] == 1)
//	  {
//		  for(int i = 199; i >= 30; i--)
//		  {
//			  all_names[i] = all_names[i-10];
//		  }
//		var = 750;
//		while (var <= 1000)
//		{
//
//			pixel[var] = 8190;
//		//			ppixel[var] = 8190;
//		//			Score_val[var] = 8190;
//			var++;
//		}
//			f1[5] = 1;
//	  }
//	  else if(f1[0] == 5 && f1[5] == 1)
//	  {
//		  for(int i = 199; i >= 40; i--)
//		  {
//			  all_names[i] = all_names[i-10];
//		  }
//		var = 0;
//		while (var <= 250)
//		{
//
////		pixel[var] = 8190;
//			ppixel[var] = 8190;
////		Score_val[var] = 8190;
//			var++;
//		}
//			f1[6] = 1;
//	  }

}

void calculate_scores_for_Ranks(int variable1, int score_decimal[60])
{
	switch(score_decimal[variable1])
	{
	case 0:
		Score_val[f2+0+f3] = White_OFF;
		Score_val[f2+1+f3] = White_OFF;
		Score_val[f2+2+f3] = White_OFF;

		Score_val[f2+9+f3] = White_OFF;
		Score_val[f2+11+f3] = White_OFF;

		Score_val[f2+18+f3] = White_OFF;
		Score_val[f2+20+f3] = White_OFF;

		Score_val[f2+27+f3] = White_OFF;
		Score_val[f2+29+f3] = White_OFF;

		Score_val[f2+36+f3] = White_OFF;
		Score_val[f2+37+f3] = White_OFF;
		Score_val[f2+38+f3] = White_OFF;
		break;
	case 1:
		Score_val[f2+1+f3] = White_OFF;

		Score_val[f2+9+f3] = White_OFF;
		Score_val[f2+10+f3] = White_OFF;

		Score_val[f2+19+f3] = White_OFF;

		Score_val[f2+28+f3] = White_OFF;

		Score_val[f2+37+f3] = White_OFF;
		break;
	case 2:
		Score_val[f2+0+f3] = White_OFF;
		Score_val[f2+1+f3] = White_OFF;
		Score_val[f2+2+f3] = White_OFF;

		Score_val[f2+11+f3] = White_OFF;

		Score_val[f2+18+f3] = White_OFF;
		Score_val[f2+19+f3] = White_OFF;
		Score_val[f2+20+f3] = White_OFF;

		Score_val[f2+27+f3] = White_OFF;

		Score_val[f2+36+f3] = White_OFF;
		Score_val[f2+37+f3] = White_OFF;
		Score_val[f2+38+f3] = White_OFF;
		break;
	case 3:
		Score_val[f2+0+f3] = White_OFF;
		Score_val[f2+1+f3] = White_OFF;
		Score_val[f2+2+f3] = White_OFF;

		Score_val[f2+11+f3] = White_OFF;

		Score_val[f2+18+f3] = White_OFF;
		Score_val[f2+19+f3] = White_OFF;
		Score_val[f2+20+f3] = White_OFF;

		Score_val[f2+29+f3] = White_OFF;

		Score_val[f2+36+f3] = White_OFF;
		Score_val[f2+37+f3] = White_OFF;
		Score_val[f2+38+f3] = White_OFF;
		break;
	case 4:
		Score_val[f2+0+f3] = White_OFF;
		Score_val[f2+2+f3] = White_OFF;

		Score_val[f2+9+f3] = White_OFF;
		Score_val[f2+11+f3] = White_OFF;

		Score_val[f2+18+f3] = White_OFF;
		Score_val[f2+19+f3] = White_OFF;
		Score_val[f2+20+f3] = White_OFF;

		Score_val[f2+29+f3] = White_OFF;

		Score_val[f2+38+f3] = White_OFF;
		break;
	case 5:
		Score_val[f2+0+f3] = White_OFF;
		Score_val[f2+1+f3] = White_OFF;
		Score_val[f2+2+f3] = White_OFF;

		Score_val[f2+9+f3] = White_OFF;

		Score_val[f2+18+f3] = White_OFF;
		Score_val[f2+19+f3] = White_OFF;
		Score_val[f2+20+f3] = White_OFF;

		Score_val[f2+29+f3] = White_OFF;

		Score_val[f2+36+f3] = White_OFF;
		Score_val[f2+37+f3] = White_OFF;
		Score_val[f2+38+f3] = White_OFF;
		break;
	case 6:
		Score_val[f2+0+f3] = White_OFF;
		Score_val[f2+1+f3] = White_OFF;
		Score_val[f2+2+f3] = White_OFF;

		Score_val[f2+9+f3] = White_OFF;

		Score_val[f2+18+f3] = White_OFF;
		Score_val[f2+19+f3] = White_OFF;
		Score_val[f2+20+f3] = White_OFF;

		Score_val[f2+27+f3] = White_OFF;
		Score_val[f2+29+f3] = White_OFF;

		Score_val[f2+36+f3] = White_OFF;
		Score_val[f2+37+f3] = White_OFF;
		Score_val[f2+38+f3] = White_OFF;
		break;
	case 7:
		Score_val[f2+0+f3] = White_OFF;
		Score_val[f2+1+f3] = White_OFF;
		Score_val[f2+2+f3] = White_OFF;

		Score_val[f2+11+f3] = White_OFF;

		Score_val[f2+20+f3] = White_OFF;

		Score_val[f2+29+f3] = White_OFF;

		Score_val[f2+38+f3] = White_OFF;
		break;
	case 8:
		Score_val[f2+0+f3] = White_OFF;
		Score_val[f2+1+f3] = White_OFF;
		Score_val[f2+2+f3] = White_OFF;

		Score_val[f2+9+f3] = White_OFF;
		Score_val[f2+11+f3] = White_OFF;

		Score_val[f2+18+f3] = White_OFF;
		Score_val[f2+19+f3] = White_OFF;
		Score_val[f2+20+f3] = White_OFF;

		Score_val[f2+27+f3] = White_OFF;
		Score_val[f2+29+f3] = White_OFF;

		Score_val[f2+36+f3] = White_OFF;
		Score_val[f2+37+f3] = White_OFF;
		Score_val[f2+38+f3] = White_OFF;
		break;
	case 9:
		Score_val[f2+0+f3] = White_OFF;
		Score_val[f2+1+f3] = White_OFF;
		Score_val[f2+2+f3] = White_OFF;

		Score_val[f2+9+f3] = White_OFF;
		Score_val[f2+11+f3] = White_OFF;

		Score_val[f2+18+f3] = White_OFF;
		Score_val[f2+19+f3] = White_OFF;
		Score_val[f2+20+f3] = White_OFF;

		Score_val[29+f3+f2] = White_OFF;

		Score_val[36+f3+f2] = White_OFF;
		Score_val[37+f3+f2] = White_OFF;
		Score_val[38+f3+f2] = White_OFF;
		break;
	}
	f3 = f3 +3;
	if (f3 > 6 )
	{
		f3 = 0;
		f2 = f2+45;
//		if (f2 == 180) reikes kazka daryt kai kita lapa piesi
//		{
//			f2 = 0;
//		}
	}
}

void Name_Placement(int variable1) //kur nupiesti varda
{
	int add=0;
	int p=0;
	if (letter_pressed > 46 )
	{
		letter_pressed = 0;
	}
switch(variable1)
{
case 0 ... 9:
add = 0;
p = 1;
break;
case 10 ... 19:
add = 250;
p = 1;
break;
case 20 ... 29:
add = 500;
p = 1;
break;
case 30 ... 39:
add = 750;
p = 1;
break;
case 40 ... 49:
add = 0;
p = 2;
break;
}
	switch(p)
	{
	case 1:
		switch(all_names[variable1])
		{
		case 'A':
			pixel[add+1+letter_pressed] = White_OFF;
			pixel[add+2+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;
			pixel[add+54+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+101+letter_pressed] = White_OFF;
			pixel[add+102+letter_pressed] = White_OFF;
			pixel[add+103+letter_pressed] = White_OFF;
			pixel[add+104+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;
			pixel[add+154+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			pixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'B':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+1+letter_pressed] = White_OFF;
			pixel[add+2+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;
			pixel[add+54+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+101+letter_pressed] = White_OFF;
			pixel[add+102+letter_pressed] = White_OFF;
			pixel[add+103+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;
			pixel[add+154+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			pixel[add+201+letter_pressed] = White_OFF;
			pixel[add+202+letter_pressed] = White_OFF;
			pixel[add+203+letter_pressed] = White_OFF;
			break;
		case 'C':
			pixel[add+1+letter_pressed] = White_OFF;
			pixel[add+2+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;

			pixel[add+201+letter_pressed] = White_OFF;
			pixel[add+202+letter_pressed] = White_OFF;
			pixel[add+203+letter_pressed] = White_OFF;
			pixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'D':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+1+letter_pressed] = White_OFF;
			pixel[add+2+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;
			pixel[add+54+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+104+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;
			pixel[add+154+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			pixel[add+201+letter_pressed] = White_OFF;
			pixel[add+202+letter_pressed] = White_OFF;
			pixel[add+203+letter_pressed] = White_OFF;
			break;
		case 'E':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+1+letter_pressed] = White_OFF;
			pixel[add+2+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+101+letter_pressed] = White_OFF;
			pixel[add+102+letter_pressed] = White_OFF;
			pixel[add+103+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			pixel[add+201+letter_pressed] = White_OFF;
			pixel[add+202+letter_pressed] = White_OFF;
			pixel[add+203+letter_pressed] = White_OFF;
			pixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'F':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+1+letter_pressed] = White_OFF;
			pixel[add+2+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+101+letter_pressed] = White_OFF;
			pixel[add+102+letter_pressed] = White_OFF;
			pixel[add+103+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			break;
		case 'G':
			pixel[add+1+letter_pressed] = White_OFF;
			pixel[add+2+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+103+letter_pressed] = White_OFF;
			pixel[add+104+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;
			pixel[add+154+letter_pressed] = White_OFF;

			pixel[add+201+letter_pressed] = White_OFF;
			pixel[add+202+letter_pressed] = White_OFF;
			pixel[add+203+letter_pressed] = White_OFF;
			pixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'H':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;
			pixel[add+54+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+101+letter_pressed] = White_OFF;
			pixel[add+102+letter_pressed] = White_OFF;
			pixel[add+103+letter_pressed] = White_OFF;
			pixel[add+104+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;
			pixel[add+154+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			pixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'I':
			pixel[add+2+letter_pressed] = White_OFF;

			pixel[add+52+letter_pressed] = White_OFF;

			pixel[add+102+letter_pressed] = White_OFF;

			pixel[add+152+letter_pressed] = White_OFF;

			pixel[add+202+letter_pressed] = White_OFF;
			break;
		case 'J':
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+54+letter_pressed] = White_OFF;

			pixel[add+104+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;
			pixel[add+154+letter_pressed] = White_OFF;

			pixel[add+201+letter_pressed] = White_OFF;
			pixel[add+202+letter_pressed] = White_OFF;
			pixel[add+203+letter_pressed] = White_OFF;
			break;
		case 'K':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;
			pixel[add+52+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+101+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;
			pixel[add+152+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			pixel[add+203+letter_pressed] = White_OFF;
			break;
		case 'L':
			pixel[add+0+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			pixel[add+201+letter_pressed] = White_OFF;
			pixel[add+202+letter_pressed] = White_OFF;
			pixel[add+203+letter_pressed] = White_OFF;
			pixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'M':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;
			pixel[add+51+letter_pressed] = White_OFF;
			pixel[add+53+letter_pressed] = White_OFF;
			pixel[add+54+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+102+letter_pressed] = White_OFF;
			pixel[add+104+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;
			pixel[add+154+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			pixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'N':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;
			pixel[add+51+letter_pressed] = White_OFF;
			pixel[add+54+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+102+letter_pressed] = White_OFF;
			pixel[add+104+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;
			pixel[add+153+letter_pressed] = White_OFF;
			pixel[add+154+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			pixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'O':
			pixel[add+1+letter_pressed] = White_OFF;
			pixel[add+2+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;
			pixel[add+54+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+104+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;
			pixel[add+154+letter_pressed] = White_OFF;

			pixel[add+201+letter_pressed] = White_OFF;
			pixel[add+202+letter_pressed] = White_OFF;
			pixel[add+203+letter_pressed] = White_OFF;
			break;
		case 'P':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+1+letter_pressed] = White_OFF;
			pixel[add+2+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;
			pixel[add+54+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+101+letter_pressed] = White_OFF;
			pixel[add+102+letter_pressed] = White_OFF;
			pixel[add+103+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			break;
		case 'Q':
			pixel[add+1+letter_pressed] = White_OFF;
			pixel[add+2+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;
			pixel[add+54+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+102+letter_pressed] = White_OFF;
			pixel[add+104+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;
			pixel[add+153+letter_pressed] = White_OFF;

			pixel[add+201+letter_pressed] = White_OFF;
			pixel[add+202+letter_pressed] = White_OFF;
			pixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'R':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+1+letter_pressed] = White_OFF;
			pixel[add+2+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;
			pixel[add+54+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+101+letter_pressed] = White_OFF;
			pixel[add+102+letter_pressed] = White_OFF;
			pixel[add+103+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;
			pixel[add+153+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			pixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'S':
			pixel[add+1+letter_pressed] = White_OFF;
			pixel[add+2+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;

			pixel[add+101+letter_pressed] = White_OFF;
			pixel[add+102+letter_pressed] = White_OFF;
			pixel[add+103+letter_pressed] = White_OFF;

			pixel[add+154+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			pixel[add+201+letter_pressed] = White_OFF;
			pixel[add+202+letter_pressed] = White_OFF;
			pixel[add+203+letter_pressed] = White_OFF;
			break;
		case 'T':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+1+letter_pressed] = White_OFF;
			pixel[add+2+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+52+letter_pressed] = White_OFF;

			pixel[add+102+letter_pressed] = White_OFF;

			pixel[add+152+letter_pressed] = White_OFF;

			pixel[add+202+letter_pressed] = White_OFF;
			break;
		case 'U':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;
			pixel[add+54+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+104+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;
			pixel[add+154+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			pixel[add+201+letter_pressed] = White_OFF;
			pixel[add+202+letter_pressed] = White_OFF;
			pixel[add+203+letter_pressed] = White_OFF;
			pixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'V':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;
			pixel[add+54+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+104+letter_pressed] = White_OFF;

			pixel[add+151+letter_pressed] = White_OFF;
			pixel[add+153+letter_pressed] = White_OFF;

			pixel[add+202+letter_pressed] = White_OFF;
			break;
		case 'W':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+50+letter_pressed] = White_OFF;
			pixel[add+54+letter_pressed] = White_OFF;

			pixel[add+100+letter_pressed] = White_OFF;
			pixel[add+104+letter_pressed] = White_OFF;

			pixel[add+150+letter_pressed] = White_OFF;
			pixel[add+152+letter_pressed] = White_OFF;
			pixel[add+154+letter_pressed] = White_OFF;

			pixel[add+201+letter_pressed] = White_OFF;
			pixel[add+203+letter_pressed] = White_OFF;
			break;
		case 'X':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+51+letter_pressed] = White_OFF;
			pixel[add+53+letter_pressed] = White_OFF;

			pixel[add+102+letter_pressed] = White_OFF;

			pixel[add+151+letter_pressed] = White_OFF;
			pixel[add+153+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			pixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'Y':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+51+letter_pressed] = White_OFF;
			pixel[add+53+letter_pressed] = White_OFF;

			pixel[add+102+letter_pressed] = White_OFF;

			pixel[add+152+letter_pressed] = White_OFF;

			pixel[add+202+letter_pressed] = White_OFF;
			break;
		case 'Z':
			pixel[add+0+letter_pressed] = White_OFF;
			pixel[add+1+letter_pressed] = White_OFF;
			pixel[add+2+letter_pressed] = White_OFF;
			pixel[add+3+letter_pressed] = White_OFF;
			pixel[add+4+letter_pressed] = White_OFF;

			pixel[add+53+letter_pressed] = White_OFF;

			pixel[add+102+letter_pressed] = White_OFF;

			pixel[add+151+letter_pressed] = White_OFF;

			pixel[add+200+letter_pressed] = White_OFF;
			pixel[add+201+letter_pressed] = White_OFF;
			pixel[add+202+letter_pressed] = White_OFF;
			pixel[add+203+letter_pressed] = White_OFF;
			pixel[add+204+letter_pressed] = White_OFF;
			break;
		case '|':
		break;
		case '.':
			pixel[add+202+letter_pressed] = White_OFF;
			break;
		case '!':
			pixel[add+2+letter_pressed] = White_OFF;

			pixel[add+52+letter_pressed] = White_OFF;

			pixel[add+102+letter_pressed] = White_OFF;

			pixel[add+202+letter_pressed] = White_OFF;
			break;
		}
	letter_pressed = letter_pressed+5;
		break;
	case 2:
		switch(all_names[variable1])
		{
		case 'A':
			ppixel[add+1+letter_pressed] = White_OFF;
			ppixel[add+2+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;
			ppixel[add+54+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+101+letter_pressed] = White_OFF;
			ppixel[add+102+letter_pressed] = White_OFF;
			ppixel[add+103+letter_pressed] = White_OFF;
			ppixel[add+104+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;
			ppixel[add+154+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			ppixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'B':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+1+letter_pressed] = White_OFF;
			ppixel[add+2+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;
			ppixel[add+54+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+101+letter_pressed] = White_OFF;
			ppixel[add+102+letter_pressed] = White_OFF;
			ppixel[add+103+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;
			ppixel[add+154+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			ppixel[add+201+letter_pressed] = White_OFF;
			ppixel[add+202+letter_pressed] = White_OFF;
			ppixel[add+203+letter_pressed] = White_OFF;
			break;
		case 'C':
			ppixel[add+1+letter_pressed] = White_OFF;
			ppixel[add+2+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;

			ppixel[add+201+letter_pressed] = White_OFF;
			ppixel[add+202+letter_pressed] = White_OFF;
			ppixel[add+203+letter_pressed] = White_OFF;
			ppixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'D':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+1+letter_pressed] = White_OFF;
			ppixel[add+2+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;
			ppixel[add+54+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+104+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;
			ppixel[add+154+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			ppixel[add+201+letter_pressed] = White_OFF;
			ppixel[add+202+letter_pressed] = White_OFF;
			ppixel[add+203+letter_pressed] = White_OFF;
			break;
		case 'E':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+1+letter_pressed] = White_OFF;
			ppixel[add+2+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+101+letter_pressed] = White_OFF;
			ppixel[add+102+letter_pressed] = White_OFF;
			ppixel[add+103+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			ppixel[add+201+letter_pressed] = White_OFF;
			ppixel[add+202+letter_pressed] = White_OFF;
			ppixel[add+203+letter_pressed] = White_OFF;
			ppixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'F':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+1+letter_pressed] = White_OFF;
			ppixel[add+2+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+101+letter_pressed] = White_OFF;
			ppixel[add+102+letter_pressed] = White_OFF;
			ppixel[add+103+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			break;
		case 'G':
			ppixel[add+1+letter_pressed] = White_OFF;
			ppixel[add+2+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+103+letter_pressed] = White_OFF;
			ppixel[add+104+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;
			ppixel[add+154+letter_pressed] = White_OFF;

			ppixel[add+201+letter_pressed] = White_OFF;
			ppixel[add+202+letter_pressed] = White_OFF;
			ppixel[add+203+letter_pressed] = White_OFF;
			ppixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'H':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;
			ppixel[add+54+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+101+letter_pressed] = White_OFF;
			ppixel[add+102+letter_pressed] = White_OFF;
			ppixel[add+103+letter_pressed] = White_OFF;
			ppixel[add+104+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;
			ppixel[add+154+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			ppixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'I':
			ppixel[add+2+letter_pressed] = White_OFF;

			ppixel[add+52+letter_pressed] = White_OFF;

			ppixel[add+102+letter_pressed] = White_OFF;

			ppixel[add+152+letter_pressed] = White_OFF;

			ppixel[add+202+letter_pressed] = White_OFF;
			break;
		case 'J':
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+54+letter_pressed] = White_OFF;

			ppixel[add+104+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;
			ppixel[add+154+letter_pressed] = White_OFF;

			ppixel[add+201+letter_pressed] = White_OFF;
			ppixel[add+202+letter_pressed] = White_OFF;
			ppixel[add+203+letter_pressed] = White_OFF;
			break;
		case 'K':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;
			ppixel[add+52+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+101+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;
			ppixel[add+152+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			ppixel[add+203+letter_pressed] = White_OFF;
			break;
		case 'L':
			ppixel[add+0+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			ppixel[add+201+letter_pressed] = White_OFF;
			ppixel[add+202+letter_pressed] = White_OFF;
			ppixel[add+203+letter_pressed] = White_OFF;
			ppixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'M':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;
			ppixel[add+51+letter_pressed] = White_OFF;
			ppixel[add+53+letter_pressed] = White_OFF;
			ppixel[add+54+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+102+letter_pressed] = White_OFF;
			ppixel[add+104+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;
			ppixel[add+154+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			ppixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'N':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;
			ppixel[add+51+letter_pressed] = White_OFF;
			ppixel[add+54+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+102+letter_pressed] = White_OFF;
			ppixel[add+104+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;
			ppixel[add+153+letter_pressed] = White_OFF;
			ppixel[add+154+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			ppixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'O':
			ppixel[add+1+letter_pressed] = White_OFF;
			ppixel[add+2+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;
			ppixel[add+54+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+104+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;
			ppixel[add+154+letter_pressed] = White_OFF;

			ppixel[add+201+letter_pressed] = White_OFF;
			ppixel[add+202+letter_pressed] = White_OFF;
			ppixel[add+203+letter_pressed] = White_OFF;
			break;
		case 'P':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+1+letter_pressed] = White_OFF;
			ppixel[add+2+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;
			ppixel[add+54+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+101+letter_pressed] = White_OFF;
			ppixel[add+102+letter_pressed] = White_OFF;
			ppixel[add+103+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			break;
		case 'Q':
			ppixel[add+1+letter_pressed] = White_OFF;
			ppixel[add+2+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;
			ppixel[add+54+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+102+letter_pressed] = White_OFF;
			ppixel[add+104+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;
			ppixel[add+153+letter_pressed] = White_OFF;

			ppixel[add+201+letter_pressed] = White_OFF;
			ppixel[add+202+letter_pressed] = White_OFF;
			ppixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'R':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+1+letter_pressed] = White_OFF;
			ppixel[add+2+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;
			ppixel[add+54+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+101+letter_pressed] = White_OFF;
			ppixel[add+102+letter_pressed] = White_OFF;
			ppixel[add+103+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;
			ppixel[add+153+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			ppixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'S':
			ppixel[add+1+letter_pressed] = White_OFF;
			ppixel[add+2+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;

			ppixel[add+101+letter_pressed] = White_OFF;
			ppixel[add+102+letter_pressed] = White_OFF;
			ppixel[add+103+letter_pressed] = White_OFF;

			ppixel[add+154+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			ppixel[add+201+letter_pressed] = White_OFF;
			ppixel[add+202+letter_pressed] = White_OFF;
			ppixel[add+203+letter_pressed] = White_OFF;
			break;
		case 'T':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+1+letter_pressed] = White_OFF;
			ppixel[add+2+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+52+letter_pressed] = White_OFF;

			ppixel[add+102+letter_pressed] = White_OFF;

			ppixel[add+152+letter_pressed] = White_OFF;

			ppixel[add+202+letter_pressed] = White_OFF;
			break;
		case 'U':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;
			ppixel[add+54+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+104+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;
			ppixel[add+154+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			ppixel[add+201+letter_pressed] = White_OFF;
			ppixel[add+202+letter_pressed] = White_OFF;
			ppixel[add+203+letter_pressed] = White_OFF;
			ppixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'V':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;
			ppixel[add+54+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+104+letter_pressed] = White_OFF;

			ppixel[add+151+letter_pressed] = White_OFF;
			ppixel[add+153+letter_pressed] = White_OFF;

			ppixel[add+202+letter_pressed] = White_OFF;
			break;
		case 'W':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+50+letter_pressed] = White_OFF;
			ppixel[add+54+letter_pressed] = White_OFF;

			ppixel[add+100+letter_pressed] = White_OFF;
			ppixel[add+104+letter_pressed] = White_OFF;

			ppixel[add+150+letter_pressed] = White_OFF;
			ppixel[add+152+letter_pressed] = White_OFF;
			ppixel[add+154+letter_pressed] = White_OFF;

			ppixel[add+201+letter_pressed] = White_OFF;
			ppixel[add+203+letter_pressed] = White_OFF;
			break;
		case 'X':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+51+letter_pressed] = White_OFF;
			ppixel[add+53+letter_pressed] = White_OFF;

			ppixel[add+102+letter_pressed] = White_OFF;

			ppixel[add+151+letter_pressed] = White_OFF;
			ppixel[add+153+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			ppixel[add+204+letter_pressed] = White_OFF;
			break;
		case 'Y':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+51+letter_pressed] = White_OFF;
			ppixel[add+53+letter_pressed] = White_OFF;

			ppixel[add+102+letter_pressed] = White_OFF;

			ppixel[add+152+letter_pressed] = White_OFF;

			ppixel[add+202+letter_pressed] = White_OFF;
			break;
		case 'Z':
			ppixel[add+0+letter_pressed] = White_OFF;
			ppixel[add+1+letter_pressed] = White_OFF;
			ppixel[add+2+letter_pressed] = White_OFF;
			ppixel[add+3+letter_pressed] = White_OFF;
			ppixel[add+4+letter_pressed] = White_OFF;

			ppixel[add+53+letter_pressed] = White_OFF;

			ppixel[add+102+letter_pressed] = White_OFF;

			ppixel[add+151+letter_pressed] = White_OFF;

			ppixel[add+200+letter_pressed] = White_OFF;
			ppixel[add+201+letter_pressed] = White_OFF;
			ppixel[add+202+letter_pressed] = White_OFF;
			ppixel[add+203+letter_pressed] = White_OFF;
			ppixel[add+204+letter_pressed] = White_OFF;
			break;
		case '|':
		break;
		case '.':
			ppixel[add+202+letter_pressed] = White_OFF;
			break;
		case '!':
			ppixel[add+2+letter_pressed] = White_OFF;

			ppixel[add+52+letter_pressed] = White_OFF;

			ppixel[add+102+letter_pressed] = White_OFF;

			ppixel[add+202+letter_pressed] = White_OFF;
			break;
		}
	letter_pressed = letter_pressed+5;
		break;
	}
//	word_written = word_written +1; //perkelt kitur
}

void Ranks(int page)
{
	switch(page)
	{
	case 0:
		switch(Lines)
		{
		case 0 ... 30:
		GPIOC->ODR &= White_OFF;
		break;
		case 31 ... 55: //scorecase = 1
		while(waste_of_time<18)
		{
			GPIOC->ODR &= White_OFF;
			waste_of_time++;
		}
		waste_of_time = 0;
		switch(Lines)
		{
		case 31 ... 35: //SSS1
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//CCC1

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//OOO1

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR1

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE1

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::1

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 36 ... 40: //SSS2
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //CCC2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //OOO2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::2

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		break;
		case 41 ... 45:
		GPIOC->ODR = White_OFF; //SSS3
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //CCC3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //OOO3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::3

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		break;
		case 46 ... 50:
		GPIOC->ODR = White_OFF; //SSS4
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //CCC4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //OOO4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::4

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		break;
		case 51 ... 55:
		GPIOC->ODR = Deep_Green; //SSS5
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = White_OFF; //CCC5
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//OOO5

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR5

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE5

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::5

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		}
		break;
		case 95 ... 600: //scorecase = 2
		switch(Lines)
		{
		case 95 ... 134:
		switch(Lines)
			{
			case 95  ... 99:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			while(waste_of_time<49)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 100 ... 104: //11a
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[0]; // first pixel of first letter of first rank
			GPIOC->ODR = pixel[0];

			GPIOC->ODR = pixel[1];
			GPIOC->ODR = pixel[1];

			GPIOC->ODR = pixel[2];
			GPIOC->ODR = pixel[2];

			GPIOC->ODR = pixel[3];
			GPIOC->ODR = pixel[3];

			GPIOC->ODR = pixel[4];
			GPIOC->ODR = pixel[4];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[5];
			GPIOC->ODR = pixel[5];

			GPIOC->ODR = pixel[6];
			GPIOC->ODR = pixel[6];

			GPIOC->ODR = pixel[7];
			GPIOC->ODR = pixel[7];

			GPIOC->ODR = pixel[8];
			GPIOC->ODR = pixel[8];

			GPIOC->ODR = pixel[9];
			GPIOC->ODR = pixel[9];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[10];
			GPIOC->ODR = pixel[10];

			GPIOC->ODR = pixel[11];
			GPIOC->ODR = pixel[11];

			GPIOC->ODR = pixel[12];
			GPIOC->ODR = pixel[12];

			GPIOC->ODR = pixel[13];
			GPIOC->ODR = pixel[13];

			GPIOC->ODR = pixel[14];
			GPIOC->ODR = pixel[14];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[15];
			GPIOC->ODR = pixel[15];

			GPIOC->ODR = pixel[16];
			GPIOC->ODR = pixel[16];

			GPIOC->ODR = pixel[17];
			GPIOC->ODR = pixel[17];

			GPIOC->ODR = pixel[18];
			GPIOC->ODR = pixel[18];

			GPIOC->ODR = pixel[19];
			GPIOC->ODR = pixel[19];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[20];
			GPIOC->ODR = pixel[20];

			GPIOC->ODR = pixel[21];
			GPIOC->ODR = pixel[21];

			GPIOC->ODR = pixel[22];
			GPIOC->ODR = pixel[22];

			GPIOC->ODR = pixel[23];
			GPIOC->ODR = pixel[23];

			GPIOC->ODR = pixel[24];
			GPIOC->ODR = pixel[24];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[25];
			GPIOC->ODR = pixel[25];

			GPIOC->ODR = pixel[26];
			GPIOC->ODR = pixel[26];

			GPIOC->ODR = pixel[27];
			GPIOC->ODR = pixel[27];

			GPIOC->ODR = pixel[28];
			GPIOC->ODR = pixel[28];

			GPIOC->ODR = pixel[29];
			GPIOC->ODR = pixel[29];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[30];
			GPIOC->ODR = pixel[30];

			GPIOC->ODR = pixel[31];
			GPIOC->ODR = pixel[31];

			GPIOC->ODR = pixel[32];
			GPIOC->ODR = pixel[32];

			GPIOC->ODR = pixel[33];
			GPIOC->ODR = pixel[33];

			GPIOC->ODR = pixel[34];
			GPIOC->ODR = pixel[34];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[35];
			GPIOC->ODR = pixel[35];

			GPIOC->ODR = pixel[36];
			GPIOC->ODR = pixel[36];

			GPIOC->ODR = pixel[37];
			GPIOC->ODR = pixel[37];

			GPIOC->ODR = pixel[38];
			GPIOC->ODR = pixel[38];

			GPIOC->ODR = pixel[39];
			GPIOC->ODR = pixel[39];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[40];
			GPIOC->ODR = pixel[40];

			GPIOC->ODR = pixel[41];
			GPIOC->ODR = pixel[41];

			GPIOC->ODR = pixel[42];
			GPIOC->ODR = pixel[42];

			GPIOC->ODR = pixel[43];
			GPIOC->ODR = pixel[43];

			GPIOC->ODR = pixel[44];
			GPIOC->ODR = pixel[44];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[45];
			GPIOC->ODR = pixel[45];

			GPIOC->ODR = pixel[46];
			GPIOC->ODR = pixel[46];

			GPIOC->ODR = pixel[47];
			GPIOC->ODR = pixel[47];

			GPIOC->ODR = pixel[48];
			GPIOC->ODR = pixel[48];

			GPIOC->ODR = pixel[49];
			GPIOC->ODR = pixel[49];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[0];
			GPIOC->ODR = Score_val[0];

			GPIOC->ODR = Score_val[1];
			GPIOC->ODR = Score_val[1];

			GPIOC->ODR = Score_val[2];
			GPIOC->ODR = Score_val[2];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[3];
			GPIOC->ODR = Score_val[3];

			GPIOC->ODR = Score_val[4];
			GPIOC->ODR = Score_val[4];

			GPIOC->ODR = Score_val[5];
			GPIOC->ODR = Score_val[5];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[6];
			GPIOC->ODR = Score_val[6];

			GPIOC->ODR = Score_val[7];
			GPIOC->ODR = Score_val[7];

			GPIOC->ODR = Score_val[8];
			GPIOC->ODR = Score_val[8];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			break;
			case 105 ... 109: //11b
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[50];
			GPIOC->ODR = pixel[50];

			GPIOC->ODR = pixel[51];
			GPIOC->ODR = pixel[51];

			GPIOC->ODR = pixel[52];
			GPIOC->ODR = pixel[52];

			GPIOC->ODR = pixel[53];
			GPIOC->ODR = pixel[53];

			GPIOC->ODR = pixel[54];
			GPIOC->ODR = pixel[54];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[55];
			GPIOC->ODR = pixel[55];

			GPIOC->ODR = pixel[56];
			GPIOC->ODR = pixel[56];

			GPIOC->ODR = pixel[57];
			GPIOC->ODR = pixel[57];

			GPIOC->ODR = pixel[58];
			GPIOC->ODR = pixel[58];

			GPIOC->ODR = pixel[59];
			GPIOC->ODR = pixel[59];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[60];
			GPIOC->ODR = pixel[60];

			GPIOC->ODR = pixel[61];
			GPIOC->ODR = pixel[61];

			GPIOC->ODR = pixel[62];
			GPIOC->ODR = pixel[62];

			GPIOC->ODR = pixel[63];
			GPIOC->ODR = pixel[63];

			GPIOC->ODR = pixel[64];
			GPIOC->ODR = pixel[64];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[65];
			GPIOC->ODR = pixel[65];

			GPIOC->ODR = pixel[66];
			GPIOC->ODR = pixel[66];

			GPIOC->ODR = pixel[67];
			GPIOC->ODR = pixel[67];

			GPIOC->ODR = pixel[68];
			GPIOC->ODR = pixel[68];

			GPIOC->ODR = pixel[69];
			GPIOC->ODR = pixel[69];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[70];
			GPIOC->ODR = pixel[70];

			GPIOC->ODR = pixel[71];
			GPIOC->ODR = pixel[71];

			GPIOC->ODR = pixel[72];
			GPIOC->ODR = pixel[72];

			GPIOC->ODR = pixel[73];
			GPIOC->ODR = pixel[73];

			GPIOC->ODR = pixel[74];
			GPIOC->ODR = pixel[74];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[75];
			GPIOC->ODR = pixel[75];

			GPIOC->ODR = pixel[76];
			GPIOC->ODR = pixel[76];

			GPIOC->ODR = pixel[77];
			GPIOC->ODR = pixel[77];

			GPIOC->ODR = pixel[78];
			GPIOC->ODR = pixel[78];

			GPIOC->ODR = pixel[79];
			GPIOC->ODR = pixel[79];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[80];
			GPIOC->ODR = pixel[80];

			GPIOC->ODR = pixel[81];
			GPIOC->ODR = pixel[81];

			GPIOC->ODR = pixel[82];
			GPIOC->ODR = pixel[82];

			GPIOC->ODR = pixel[83];
			GPIOC->ODR = pixel[83];

			GPIOC->ODR = pixel[84];
			GPIOC->ODR = pixel[84];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[85];
			GPIOC->ODR = pixel[85];

			GPIOC->ODR = pixel[86];
			GPIOC->ODR = pixel[86];

			GPIOC->ODR = pixel[87];
			GPIOC->ODR = pixel[87];

			GPIOC->ODR = pixel[88];
			GPIOC->ODR = pixel[88];

			GPIOC->ODR = pixel[89];
			GPIOC->ODR = pixel[89];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[90];
			GPIOC->ODR = pixel[90];

			GPIOC->ODR = pixel[91];
			GPIOC->ODR = pixel[91];

			GPIOC->ODR = pixel[92];
			GPIOC->ODR = pixel[92];

			GPIOC->ODR = pixel[93];
			GPIOC->ODR = pixel[93];

			GPIOC->ODR = pixel[94];
			GPIOC->ODR = pixel[94];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[95];
			GPIOC->ODR = pixel[95];

			GPIOC->ODR = pixel[96];
			GPIOC->ODR = pixel[96];

			GPIOC->ODR = pixel[97];
			GPIOC->ODR = pixel[97];

			GPIOC->ODR = pixel[98];
			GPIOC->ODR = pixel[98];

			GPIOC->ODR = pixel[99];
			GPIOC->ODR = pixel[99];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[9];
			GPIOC->ODR = Score_val[9];

			GPIOC->ODR = Score_val[10];
			GPIOC->ODR = Score_val[10];

			GPIOC->ODR = Score_val[11];
			GPIOC->ODR = Score_val[11];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[12];
			GPIOC->ODR = Score_val[12];

			GPIOC->ODR = Score_val[13];
			GPIOC->ODR = Score_val[13];

			GPIOC->ODR = Score_val[14];
			GPIOC->ODR = Score_val[14];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[15];
			GPIOC->ODR = Score_val[15];

			GPIOC->ODR = Score_val[16];
			GPIOC->ODR = Score_val[16];

			GPIOC->ODR = Score_val[17];
			GPIOC->ODR = Score_val[17];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 110 ... 114: //11c
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[100];
			GPIOC->ODR = pixel[100];

			GPIOC->ODR = pixel[101];
			GPIOC->ODR = pixel[101];

			GPIOC->ODR = pixel[102];
			GPIOC->ODR = pixel[102];

			GPIOC->ODR = pixel[103];
			GPIOC->ODR = pixel[103];

			GPIOC->ODR = pixel[104];
			GPIOC->ODR = pixel[104];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[105];
			GPIOC->ODR = pixel[105];

			GPIOC->ODR = pixel[106];
			GPIOC->ODR = pixel[106];

			GPIOC->ODR = pixel[107];
			GPIOC->ODR = pixel[107];

			GPIOC->ODR = pixel[108];
			GPIOC->ODR = pixel[108];

			GPIOC->ODR = pixel[109];
			GPIOC->ODR = pixel[109];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[110];
			GPIOC->ODR = pixel[110];

			GPIOC->ODR = pixel[111];
			GPIOC->ODR = pixel[111];

			GPIOC->ODR = pixel[112];
			GPIOC->ODR = pixel[112];

			GPIOC->ODR = pixel[113];
			GPIOC->ODR = pixel[113];

			GPIOC->ODR = pixel[114];
			GPIOC->ODR = pixel[114];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[115];
			GPIOC->ODR = pixel[115];

			GPIOC->ODR = pixel[116];
			GPIOC->ODR = pixel[116];

			GPIOC->ODR = pixel[117];
			GPIOC->ODR = pixel[117];

			GPIOC->ODR = pixel[118];
			GPIOC->ODR = pixel[118];

			GPIOC->ODR = pixel[119];
			GPIOC->ODR = pixel[119];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[120];
			GPIOC->ODR = pixel[120];

			GPIOC->ODR = pixel[121];
			GPIOC->ODR = pixel[121];

			GPIOC->ODR = pixel[122];
			GPIOC->ODR = pixel[122];

			GPIOC->ODR = pixel[123];
			GPIOC->ODR = pixel[123];

			GPIOC->ODR = pixel[124];
			GPIOC->ODR = pixel[124];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[125];
			GPIOC->ODR = pixel[125];

			GPIOC->ODR = pixel[126];
			GPIOC->ODR = pixel[126];

			GPIOC->ODR = pixel[127];
			GPIOC->ODR = pixel[127];

			GPIOC->ODR = pixel[128];
			GPIOC->ODR = pixel[128];

			GPIOC->ODR = pixel[129];
			GPIOC->ODR = pixel[129];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[130];
			GPIOC->ODR = pixel[130];

			GPIOC->ODR = pixel[131];
			GPIOC->ODR = pixel[131];

			GPIOC->ODR = pixel[132];
			GPIOC->ODR = pixel[132];

			GPIOC->ODR = pixel[133];
			GPIOC->ODR = pixel[133];

			GPIOC->ODR = pixel[134];
			GPIOC->ODR = pixel[134];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[135];
			GPIOC->ODR = pixel[135];

			GPIOC->ODR = pixel[136];
			GPIOC->ODR = pixel[136];

			GPIOC->ODR = pixel[137];
			GPIOC->ODR = pixel[137];

			GPIOC->ODR = pixel[138];
			GPIOC->ODR = pixel[138];

			GPIOC->ODR = pixel[139];
			GPIOC->ODR = pixel[139];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[140];
			GPIOC->ODR = pixel[140];

			GPIOC->ODR = pixel[141];
			GPIOC->ODR = pixel[141];

			GPIOC->ODR = pixel[142];
			GPIOC->ODR = pixel[142];

			GPIOC->ODR = pixel[143];
			GPIOC->ODR = pixel[143];

			GPIOC->ODR = pixel[144];
			GPIOC->ODR = pixel[144];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[145];
			GPIOC->ODR = pixel[145];

			GPIOC->ODR = pixel[146];
			GPIOC->ODR = pixel[146];

			GPIOC->ODR = pixel[147];
			GPIOC->ODR = pixel[147];

			GPIOC->ODR = pixel[148];
			GPIOC->ODR = pixel[148];

			GPIOC->ODR = pixel[149];
			GPIOC->ODR = pixel[149];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[18];
			GPIOC->ODR = Score_val[18];

			GPIOC->ODR = Score_val[19];
			GPIOC->ODR = Score_val[19];

			GPIOC->ODR = Score_val[20];
			GPIOC->ODR = Score_val[20];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[21];
			GPIOC->ODR = Score_val[21];

			GPIOC->ODR = Score_val[22];
			GPIOC->ODR = Score_val[22];

			GPIOC->ODR = Score_val[23];
			GPIOC->ODR = Score_val[23];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[24];
			GPIOC->ODR = Score_val[24];

			GPIOC->ODR = Score_val[25];
			GPIOC->ODR = Score_val[25];

			GPIOC->ODR = Score_val[26];
			GPIOC->ODR = Score_val[26];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 115 ... 119://11d
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[150];
			GPIOC->ODR = pixel[150];

			GPIOC->ODR = pixel[151];
			GPIOC->ODR = pixel[151];

			GPIOC->ODR = pixel[152];
			GPIOC->ODR = pixel[152];

			GPIOC->ODR = pixel[153];
			GPIOC->ODR = pixel[153];

			GPIOC->ODR = pixel[154];
			GPIOC->ODR = pixel[154];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[155];
			GPIOC->ODR = pixel[155];

			GPIOC->ODR = pixel[156];
			GPIOC->ODR = pixel[156];

			GPIOC->ODR = pixel[157];
			GPIOC->ODR = pixel[157];

			GPIOC->ODR = pixel[158];
			GPIOC->ODR = pixel[158];

			GPIOC->ODR = pixel[159];
			GPIOC->ODR = pixel[159];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[160];
			GPIOC->ODR = pixel[160];

			GPIOC->ODR = pixel[161];
			GPIOC->ODR = pixel[161];

			GPIOC->ODR = pixel[162];
			GPIOC->ODR = pixel[162];

			GPIOC->ODR = pixel[163];
			GPIOC->ODR = pixel[163];

			GPIOC->ODR = pixel[164];
			GPIOC->ODR = pixel[164];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[165];
			GPIOC->ODR = pixel[165];

			GPIOC->ODR = pixel[166];
			GPIOC->ODR = pixel[166];

			GPIOC->ODR = pixel[167];
			GPIOC->ODR = pixel[167];

			GPIOC->ODR = pixel[168];
			GPIOC->ODR = pixel[168];

			GPIOC->ODR = pixel[169];
			GPIOC->ODR = pixel[169];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[170];
			GPIOC->ODR = pixel[170];

			GPIOC->ODR = pixel[171];
			GPIOC->ODR = pixel[171];

			GPIOC->ODR = pixel[172];
			GPIOC->ODR = pixel[172];

			GPIOC->ODR = pixel[173];
			GPIOC->ODR = pixel[173];

			GPIOC->ODR = pixel[174];
			GPIOC->ODR = pixel[174];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[175];
			GPIOC->ODR = pixel[175];

			GPIOC->ODR = pixel[176];
			GPIOC->ODR = pixel[176];

			GPIOC->ODR = pixel[177];
			GPIOC->ODR = pixel[177];

			GPIOC->ODR = pixel[178];
			GPIOC->ODR = pixel[178];

			GPIOC->ODR = pixel[179];
			GPIOC->ODR = pixel[179];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[180];
			GPIOC->ODR = pixel[180];

			GPIOC->ODR = pixel[181];
			GPIOC->ODR = pixel[181];

			GPIOC->ODR = pixel[182];
			GPIOC->ODR = pixel[182];

			GPIOC->ODR = pixel[183];
			GPIOC->ODR = pixel[183];

			GPIOC->ODR = pixel[184];
			GPIOC->ODR = pixel[184];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[185];
			GPIOC->ODR = pixel[185];

			GPIOC->ODR = pixel[186];
			GPIOC->ODR = pixel[186];

			GPIOC->ODR = pixel[187];
			GPIOC->ODR = pixel[187];

			GPIOC->ODR = pixel[188];
			GPIOC->ODR = pixel[188];

			GPIOC->ODR = pixel[189];
			GPIOC->ODR = pixel[189];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[190];
			GPIOC->ODR = pixel[190];

			GPIOC->ODR = pixel[191];
			GPIOC->ODR = pixel[191];

			GPIOC->ODR = pixel[192];
			GPIOC->ODR = pixel[192];

			GPIOC->ODR = pixel[193];
			GPIOC->ODR = pixel[193];

			GPIOC->ODR = pixel[194];
			GPIOC->ODR = pixel[194];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[195];
			GPIOC->ODR = pixel[195];

			GPIOC->ODR = pixel[196];
			GPIOC->ODR = pixel[196];

			GPIOC->ODR = pixel[197];
			GPIOC->ODR = pixel[197];

			GPIOC->ODR = pixel[198];
			GPIOC->ODR = pixel[198];

			GPIOC->ODR = pixel[199];
			GPIOC->ODR = pixel[199];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[27];
			GPIOC->ODR = Score_val[27];

			GPIOC->ODR = Score_val[28];
			GPIOC->ODR = Score_val[28];

			GPIOC->ODR = Score_val[29];
			GPIOC->ODR = Score_val[29];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[30];
			GPIOC->ODR = Score_val[30];

			GPIOC->ODR = Score_val[31];
			GPIOC->ODR = Score_val[31];

			GPIOC->ODR = Score_val[32];
			GPIOC->ODR = Score_val[32];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[33];
			GPIOC->ODR = Score_val[33];

			GPIOC->ODR = Score_val[34];
			GPIOC->ODR = Score_val[34];

			GPIOC->ODR = Score_val[35];
			GPIOC->ODR = Score_val[35];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 120 ... 124://11e
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;//dot
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[200];
			GPIOC->ODR = pixel[200];

			GPIOC->ODR = pixel[201];
			GPIOC->ODR = pixel[201];

			GPIOC->ODR = pixel[202];
			GPIOC->ODR = pixel[202];

			GPIOC->ODR = pixel[203];
			GPIOC->ODR = pixel[203];

			GPIOC->ODR = pixel[204];
			GPIOC->ODR = pixel[204];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[205];
			GPIOC->ODR = pixel[205];

			GPIOC->ODR = pixel[206];
			GPIOC->ODR = pixel[206];

			GPIOC->ODR = pixel[207];
			GPIOC->ODR = pixel[207];

			GPIOC->ODR = pixel[208];
			GPIOC->ODR = pixel[208];

			GPIOC->ODR = pixel[209];
			GPIOC->ODR = pixel[209];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[210];
			GPIOC->ODR = pixel[210];

			GPIOC->ODR = pixel[211];
			GPIOC->ODR = pixel[211];

			GPIOC->ODR = pixel[212];
			GPIOC->ODR = pixel[212];

			GPIOC->ODR = pixel[213];
			GPIOC->ODR = pixel[213];

			GPIOC->ODR = pixel[214];
			GPIOC->ODR = pixel[214];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[215];
			GPIOC->ODR = pixel[215];

			GPIOC->ODR = pixel[216];
			GPIOC->ODR = pixel[216];

			GPIOC->ODR = pixel[217];
			GPIOC->ODR = pixel[217];

			GPIOC->ODR = pixel[218];
			GPIOC->ODR = pixel[218];

			GPIOC->ODR = pixel[219];
			GPIOC->ODR = pixel[219];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[220];
			GPIOC->ODR = pixel[220];

			GPIOC->ODR = pixel[221];
			GPIOC->ODR = pixel[221];

			GPIOC->ODR = pixel[222];
			GPIOC->ODR = pixel[222];

			GPIOC->ODR = pixel[223];
			GPIOC->ODR = pixel[223];

			GPIOC->ODR = pixel[224];
			GPIOC->ODR = pixel[224];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[225];
			GPIOC->ODR = pixel[225];

			GPIOC->ODR = pixel[226];
			GPIOC->ODR = pixel[226];

			GPIOC->ODR = pixel[227];
			GPIOC->ODR = pixel[227];

			GPIOC->ODR = pixel[228];
			GPIOC->ODR = pixel[228];

			GPIOC->ODR = pixel[229];
			GPIOC->ODR = pixel[229];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[230];
			GPIOC->ODR = pixel[230];

			GPIOC->ODR = pixel[231];
			GPIOC->ODR = pixel[231];

			GPIOC->ODR = pixel[232];
			GPIOC->ODR = pixel[232];

			GPIOC->ODR = pixel[233];
			GPIOC->ODR = pixel[233];

			GPIOC->ODR = pixel[234];
			GPIOC->ODR = pixel[234];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[235];
			GPIOC->ODR = pixel[235];

			GPIOC->ODR = pixel[236];
			GPIOC->ODR = pixel[236];

			GPIOC->ODR = pixel[237];
			GPIOC->ODR = pixel[237];

			GPIOC->ODR = pixel[238];
			GPIOC->ODR = pixel[238];

			GPIOC->ODR = pixel[239];
			GPIOC->ODR = pixel[239];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[240];
			GPIOC->ODR = pixel[240];

			GPIOC->ODR = pixel[241];
			GPIOC->ODR = pixel[241];

			GPIOC->ODR = pixel[242];
			GPIOC->ODR = pixel[242];

			GPIOC->ODR = pixel[243];
			GPIOC->ODR = pixel[243];

			GPIOC->ODR = pixel[244];
			GPIOC->ODR = pixel[244];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[245];
			GPIOC->ODR = pixel[245];

			GPIOC->ODR = pixel[246];
			GPIOC->ODR = pixel[246];

			GPIOC->ODR = pixel[247];
			GPIOC->ODR = pixel[247];

			GPIOC->ODR = pixel[248];
			GPIOC->ODR = pixel[248];

			GPIOC->ODR = pixel[249];
			GPIOC->ODR = pixel[249];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[36];
			GPIOC->ODR = Score_val[36];

			GPIOC->ODR = Score_val[37];
			GPIOC->ODR = Score_val[37];

			GPIOC->ODR = Score_val[38];
			GPIOC->ODR = Score_val[38];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[39];
			GPIOC->ODR = Score_val[39];

			GPIOC->ODR = Score_val[40];
			GPIOC->ODR = Score_val[40];

			GPIOC->ODR = Score_val[41];
			GPIOC->ODR = Score_val[41];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[42];
			GPIOC->ODR = Score_val[42];

			GPIOC->ODR = Score_val[43];
			GPIOC->ODR = Score_val[43];

			GPIOC->ODR = Score_val[44];
			GPIOC->ODR = Score_val[44];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 125 ... 129:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

//			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<51)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = White_OFF;
			break;
			case 130 ... 130:
			GPIOC->ODR = White_OFF;
			break;
			case 131 ... 134:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<49)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;

			}
		break;
		case 135 ... 169: //twos
			switch(Lines)
			{
			case 135 ... 139:
			GPIOC->ODR = White_OFF; //22a
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[250];
			GPIOC->ODR = pixel[250];

			GPIOC->ODR = pixel[251];
			GPIOC->ODR = pixel[251];

			GPIOC->ODR = pixel[252];
			GPIOC->ODR = pixel[252];

			GPIOC->ODR = pixel[253];
			GPIOC->ODR = pixel[253];

			GPIOC->ODR = pixel[254];
			GPIOC->ODR = pixel[254];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[255];
			GPIOC->ODR = pixel[255];

			GPIOC->ODR = pixel[256];
			GPIOC->ODR = pixel[256];

			GPIOC->ODR = pixel[257];
			GPIOC->ODR = pixel[257];

			GPIOC->ODR = pixel[258];
			GPIOC->ODR = pixel[258];

			GPIOC->ODR = pixel[259];
			GPIOC->ODR = pixel[259];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[260];
			GPIOC->ODR = pixel[260];

			GPIOC->ODR = pixel[261];
			GPIOC->ODR = pixel[261];

			GPIOC->ODR = pixel[262];
			GPIOC->ODR = pixel[262];

			GPIOC->ODR = pixel[263];
			GPIOC->ODR = pixel[263];

			GPIOC->ODR = pixel[264];
			GPIOC->ODR = pixel[264];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[265];
			GPIOC->ODR = pixel[265];

			GPIOC->ODR = pixel[266];
			GPIOC->ODR = pixel[266];

			GPIOC->ODR = pixel[267];
			GPIOC->ODR = pixel[267];

			GPIOC->ODR = pixel[268];
			GPIOC->ODR = pixel[268];

			GPIOC->ODR = pixel[269];
			GPIOC->ODR = pixel[269];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[270];
			GPIOC->ODR = pixel[270];

			GPIOC->ODR = pixel[271];
			GPIOC->ODR = pixel[271];

			GPIOC->ODR = pixel[272];
			GPIOC->ODR = pixel[272];

			GPIOC->ODR = pixel[273];
			GPIOC->ODR = pixel[273];

			GPIOC->ODR = pixel[274];
			GPIOC->ODR = pixel[274];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[275];
			GPIOC->ODR = pixel[275];

			GPIOC->ODR = pixel[276];
			GPIOC->ODR = pixel[276];

			GPIOC->ODR = pixel[277];
			GPIOC->ODR = pixel[277];

			GPIOC->ODR = pixel[278];
			GPIOC->ODR = pixel[278];

			GPIOC->ODR = pixel[279];
			GPIOC->ODR = pixel[279];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[280];
			GPIOC->ODR = pixel[280];

			GPIOC->ODR = pixel[281];
			GPIOC->ODR = pixel[281];

			GPIOC->ODR = pixel[282];
			GPIOC->ODR = pixel[282];

			GPIOC->ODR = pixel[283];
			GPIOC->ODR = pixel[283];

			GPIOC->ODR = pixel[284];
			GPIOC->ODR = pixel[284];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[285];
			GPIOC->ODR = pixel[285];

			GPIOC->ODR = pixel[286];
			GPIOC->ODR = pixel[286];

			GPIOC->ODR = pixel[287];
			GPIOC->ODR = pixel[287];

			GPIOC->ODR = pixel[288];
			GPIOC->ODR = pixel[288];

			GPIOC->ODR = pixel[289];
			GPIOC->ODR = pixel[289];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[290];
			GPIOC->ODR = pixel[290];

			GPIOC->ODR = pixel[291];
			GPIOC->ODR = pixel[291];

			GPIOC->ODR = pixel[292];
			GPIOC->ODR = pixel[292];

			GPIOC->ODR = pixel[293];
			GPIOC->ODR = pixel[293];

			GPIOC->ODR = pixel[294];
			GPIOC->ODR = pixel[294];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[295];
			GPIOC->ODR = pixel[295];

			GPIOC->ODR = pixel[296];
			GPIOC->ODR = pixel[296];

			GPIOC->ODR = pixel[297];
			GPIOC->ODR = pixel[297];

			GPIOC->ODR = pixel[298];
			GPIOC->ODR = pixel[298];

			GPIOC->ODR = pixel[299];
			GPIOC->ODR = pixel[299];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[45];
			GPIOC->ODR = Score_val[45];

			GPIOC->ODR = Score_val[46];
			GPIOC->ODR = Score_val[46];

			GPIOC->ODR = Score_val[47];
			GPIOC->ODR = Score_val[47];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[48];
			GPIOC->ODR = Score_val[48];

			GPIOC->ODR = Score_val[49];
			GPIOC->ODR = Score_val[49];

			GPIOC->ODR = Score_val[50];
			GPIOC->ODR = Score_val[50];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[51];
			GPIOC->ODR = Score_val[51];

			GPIOC->ODR = Score_val[52];
			GPIOC->ODR = Score_val[52];

			GPIOC->ODR = Score_val[53];
			GPIOC->ODR = Score_val[53];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 140 ... 144: //22b

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[300];
			GPIOC->ODR = pixel[300];

			GPIOC->ODR = pixel[301];
			GPIOC->ODR = pixel[301];

			GPIOC->ODR = pixel[302];
			GPIOC->ODR = pixel[302];

			GPIOC->ODR = pixel[303];
			GPIOC->ODR = pixel[303];

			GPIOC->ODR = pixel[304];
			GPIOC->ODR = pixel[304];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[305];
			GPIOC->ODR = pixel[305];

			GPIOC->ODR = pixel[306];
			GPIOC->ODR = pixel[306];

			GPIOC->ODR = pixel[307];
			GPIOC->ODR = pixel[307];

			GPIOC->ODR = pixel[308];
			GPIOC->ODR = pixel[308];

			GPIOC->ODR = pixel[309];
			GPIOC->ODR = pixel[309];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[310];
			GPIOC->ODR = pixel[310];

			GPIOC->ODR = pixel[311];
			GPIOC->ODR = pixel[311];

			GPIOC->ODR = pixel[312];
			GPIOC->ODR = pixel[312];

			GPIOC->ODR = pixel[313];
			GPIOC->ODR = pixel[313];

			GPIOC->ODR = pixel[314];
			GPIOC->ODR = pixel[314];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[315];
			GPIOC->ODR = pixel[315];

			GPIOC->ODR = pixel[316];
			GPIOC->ODR = pixel[316];

			GPIOC->ODR = pixel[317];
			GPIOC->ODR = pixel[317];

			GPIOC->ODR = pixel[318];
			GPIOC->ODR = pixel[318];

			GPIOC->ODR = pixel[319];
			GPIOC->ODR = pixel[319];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[320];
			GPIOC->ODR = pixel[320];

			GPIOC->ODR = pixel[321];
			GPIOC->ODR = pixel[321];

			GPIOC->ODR = pixel[322];
			GPIOC->ODR = pixel[322];

			GPIOC->ODR = pixel[323];
			GPIOC->ODR = pixel[323];

			GPIOC->ODR = pixel[324];
			GPIOC->ODR = pixel[324];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[325];
			GPIOC->ODR = pixel[325];

			GPIOC->ODR = pixel[326];
			GPIOC->ODR = pixel[326];

			GPIOC->ODR = pixel[327];
			GPIOC->ODR = pixel[327];

			GPIOC->ODR = pixel[328];
			GPIOC->ODR = pixel[328];

			GPIOC->ODR = pixel[329];
			GPIOC->ODR = pixel[329];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[330];
			GPIOC->ODR = pixel[330];

			GPIOC->ODR = pixel[331];
			GPIOC->ODR = pixel[331];

			GPIOC->ODR = pixel[332];
			GPIOC->ODR = pixel[332];

			GPIOC->ODR = pixel[333];
			GPIOC->ODR = pixel[333];

			GPIOC->ODR = pixel[334];
			GPIOC->ODR = pixel[334];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[335];
			GPIOC->ODR = pixel[335];

			GPIOC->ODR = pixel[336];
			GPIOC->ODR = pixel[336];

			GPIOC->ODR = pixel[337];
			GPIOC->ODR = pixel[337];

			GPIOC->ODR = pixel[338];
			GPIOC->ODR = pixel[338];

			GPIOC->ODR = pixel[339];
			GPIOC->ODR = pixel[339];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[340];
			GPIOC->ODR = pixel[340];

			GPIOC->ODR = pixel[341];
			GPIOC->ODR = pixel[341];

			GPIOC->ODR = pixel[342];
			GPIOC->ODR = pixel[342];

			GPIOC->ODR = pixel[343];
			GPIOC->ODR = pixel[343];

			GPIOC->ODR = pixel[344];
			GPIOC->ODR = pixel[344];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[345];
			GPIOC->ODR = pixel[345];

			GPIOC->ODR = pixel[346];
			GPIOC->ODR = pixel[346];

			GPIOC->ODR = pixel[347];
			GPIOC->ODR = pixel[347];

			GPIOC->ODR = pixel[348];
			GPIOC->ODR = pixel[348];

			GPIOC->ODR = pixel[349];
			GPIOC->ODR = pixel[349];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[54];
			GPIOC->ODR = Score_val[54];

			GPIOC->ODR = Score_val[55];
			GPIOC->ODR = Score_val[55];

			GPIOC->ODR = Score_val[56];
			GPIOC->ODR = Score_val[56];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[57];
			GPIOC->ODR = Score_val[57];

			GPIOC->ODR = Score_val[58];
			GPIOC->ODR = Score_val[58];

			GPIOC->ODR = Score_val[59];
			GPIOC->ODR = Score_val[59];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[60];
			GPIOC->ODR = Score_val[60];

			GPIOC->ODR = Score_val[61];
			GPIOC->ODR = Score_val[61];

			GPIOC->ODR = Score_val[62];
			GPIOC->ODR = Score_val[62];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 145 ... 149: //22c


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[350];
			GPIOC->ODR = pixel[350];

			GPIOC->ODR = pixel[351];
			GPIOC->ODR = pixel[351];

			GPIOC->ODR = pixel[352];
			GPIOC->ODR = pixel[352];

			GPIOC->ODR = pixel[353];
			GPIOC->ODR = pixel[353];

			GPIOC->ODR = pixel[354];
			GPIOC->ODR = pixel[354];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[355];
			GPIOC->ODR = pixel[355];

			GPIOC->ODR = pixel[356];
			GPIOC->ODR = pixel[356];

			GPIOC->ODR = pixel[357];
			GPIOC->ODR = pixel[357];

			GPIOC->ODR = pixel[358];
			GPIOC->ODR = pixel[358];

			GPIOC->ODR = pixel[359];
			GPIOC->ODR = pixel[359];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[360];
			GPIOC->ODR = pixel[360];

			GPIOC->ODR = pixel[361];
			GPIOC->ODR = pixel[361];

			GPIOC->ODR = pixel[362];
			GPIOC->ODR = pixel[362];

			GPIOC->ODR = pixel[363];
			GPIOC->ODR = pixel[363];

			GPIOC->ODR = pixel[364];
			GPIOC->ODR = pixel[364];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[365];
			GPIOC->ODR = pixel[365];

			GPIOC->ODR = pixel[366];
			GPIOC->ODR = pixel[366];

			GPIOC->ODR = pixel[367];
			GPIOC->ODR = pixel[367];

			GPIOC->ODR = pixel[368];
			GPIOC->ODR = pixel[368];

			GPIOC->ODR = pixel[369];
			GPIOC->ODR = pixel[369];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[370];
			GPIOC->ODR = pixel[370];

			GPIOC->ODR = pixel[371];
			GPIOC->ODR = pixel[371];

			GPIOC->ODR = pixel[372];
			GPIOC->ODR = pixel[372];

			GPIOC->ODR = pixel[373];
			GPIOC->ODR = pixel[373];

			GPIOC->ODR = pixel[374];
			GPIOC->ODR = pixel[374];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[375];
			GPIOC->ODR = pixel[375];

			GPIOC->ODR = pixel[376];
			GPIOC->ODR = pixel[376];

			GPIOC->ODR = pixel[377];
			GPIOC->ODR = pixel[377];

			GPIOC->ODR = pixel[378];
			GPIOC->ODR = pixel[378];

			GPIOC->ODR = pixel[379];
			GPIOC->ODR = pixel[379];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[380];
			GPIOC->ODR = pixel[380];

			GPIOC->ODR = pixel[381];
			GPIOC->ODR = pixel[381];

			GPIOC->ODR = pixel[382];
			GPIOC->ODR = pixel[382];

			GPIOC->ODR = pixel[383];
			GPIOC->ODR = pixel[383];

			GPIOC->ODR = pixel[384];
			GPIOC->ODR = pixel[384];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[385];
			GPIOC->ODR = pixel[385];

			GPIOC->ODR = pixel[386];
			GPIOC->ODR = pixel[386];

			GPIOC->ODR = pixel[387];
			GPIOC->ODR = pixel[387];

			GPIOC->ODR = pixel[388];
			GPIOC->ODR = pixel[388];

			GPIOC->ODR = pixel[389];
			GPIOC->ODR = pixel[389];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[390];
			GPIOC->ODR = pixel[390];

			GPIOC->ODR = pixel[391];
			GPIOC->ODR = pixel[391];

			GPIOC->ODR = pixel[392];
			GPIOC->ODR = pixel[392];

			GPIOC->ODR = pixel[393];
			GPIOC->ODR = pixel[393];

			GPIOC->ODR = pixel[394];
			GPIOC->ODR = pixel[394];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[395];
			GPIOC->ODR = pixel[395];

			GPIOC->ODR = pixel[396];
			GPIOC->ODR = pixel[396];

			GPIOC->ODR = pixel[397];
			GPIOC->ODR = pixel[397];

			GPIOC->ODR = pixel[398];
			GPIOC->ODR = pixel[398];

			GPIOC->ODR = pixel[399];
			GPIOC->ODR = pixel[399];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[63];
			GPIOC->ODR = Score_val[63];

			GPIOC->ODR = Score_val[64];
			GPIOC->ODR = Score_val[64];

			GPIOC->ODR = Score_val[65];
			GPIOC->ODR = Score_val[65];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[66];
			GPIOC->ODR = Score_val[66];

			GPIOC->ODR = Score_val[67];
			GPIOC->ODR = Score_val[67];

			GPIOC->ODR = Score_val[68];
			GPIOC->ODR = Score_val[68];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[69];
			GPIOC->ODR = Score_val[69];

			GPIOC->ODR = Score_val[70];
			GPIOC->ODR = Score_val[70];

			GPIOC->ODR = Score_val[71];
			GPIOC->ODR = Score_val[71];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 150 ... 154: // 22d

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[400];
			GPIOC->ODR = pixel[400];

			GPIOC->ODR = pixel[401];
			GPIOC->ODR = pixel[401];

			GPIOC->ODR = pixel[402];
			GPIOC->ODR = pixel[402];

			GPIOC->ODR = pixel[403];
			GPIOC->ODR = pixel[403];

			GPIOC->ODR = pixel[404];
			GPIOC->ODR = pixel[404];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[405];
			GPIOC->ODR = pixel[405];

			GPIOC->ODR = pixel[406];
			GPIOC->ODR = pixel[406];

			GPIOC->ODR = pixel[407];
			GPIOC->ODR = pixel[407];

			GPIOC->ODR = pixel[408];
			GPIOC->ODR = pixel[408];

			GPIOC->ODR = pixel[409];
			GPIOC->ODR = pixel[409];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[410];
			GPIOC->ODR = pixel[410];

			GPIOC->ODR = pixel[411];
			GPIOC->ODR = pixel[411];

			GPIOC->ODR = pixel[412];
			GPIOC->ODR = pixel[412];

			GPIOC->ODR = pixel[413];
			GPIOC->ODR = pixel[413];

			GPIOC->ODR = pixel[414];
			GPIOC->ODR = pixel[414];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[415];
			GPIOC->ODR = pixel[415];

			GPIOC->ODR = pixel[416];
			GPIOC->ODR = pixel[416];

			GPIOC->ODR = pixel[417];
			GPIOC->ODR = pixel[417];

			GPIOC->ODR = pixel[418];
			GPIOC->ODR = pixel[418];

			GPIOC->ODR = pixel[419];
			GPIOC->ODR = pixel[419];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[420];
			GPIOC->ODR = pixel[420];

			GPIOC->ODR = pixel[421];
			GPIOC->ODR = pixel[421];

			GPIOC->ODR = pixel[422];
			GPIOC->ODR = pixel[422];

			GPIOC->ODR = pixel[423];
			GPIOC->ODR = pixel[423];

			GPIOC->ODR = pixel[424];
			GPIOC->ODR = pixel[424];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[425];
			GPIOC->ODR = pixel[425];

			GPIOC->ODR = pixel[426];
			GPIOC->ODR = pixel[426];

			GPIOC->ODR = pixel[427];
			GPIOC->ODR = pixel[427];

			GPIOC->ODR = pixel[428];
			GPIOC->ODR = pixel[428];

			GPIOC->ODR = pixel[429];
			GPIOC->ODR = pixel[429];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[430];
			GPIOC->ODR = pixel[430];

			GPIOC->ODR = pixel[431];
			GPIOC->ODR = pixel[431];

			GPIOC->ODR = pixel[432];
			GPIOC->ODR = pixel[432];

			GPIOC->ODR = pixel[433];
			GPIOC->ODR = pixel[433];

			GPIOC->ODR = pixel[434];
			GPIOC->ODR = pixel[434];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[435];
			GPIOC->ODR = pixel[435];

			GPIOC->ODR = pixel[436];
			GPIOC->ODR = pixel[436];

			GPIOC->ODR = pixel[437];
			GPIOC->ODR = pixel[437];

			GPIOC->ODR = pixel[438];
			GPIOC->ODR = pixel[438];

			GPIOC->ODR = pixel[439];
			GPIOC->ODR = pixel[439];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[440];
			GPIOC->ODR = pixel[440];

			GPIOC->ODR = pixel[441];
			GPIOC->ODR = pixel[441];

			GPIOC->ODR = pixel[442];
			GPIOC->ODR = pixel[442];

			GPIOC->ODR = pixel[443];
			GPIOC->ODR = pixel[443];

			GPIOC->ODR = pixel[444];
			GPIOC->ODR = pixel[444];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[445];
			GPIOC->ODR = pixel[445];

			GPIOC->ODR = pixel[446];
			GPIOC->ODR = pixel[446];

			GPIOC->ODR = pixel[447];
			GPIOC->ODR = pixel[447];

			GPIOC->ODR = pixel[448];
			GPIOC->ODR = pixel[448];

			GPIOC->ODR = pixel[449];
			GPIOC->ODR = pixel[449];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[72];
			GPIOC->ODR = Score_val[72];

			GPIOC->ODR = Score_val[73];
			GPIOC->ODR = Score_val[73];

			GPIOC->ODR = Score_val[74];
			GPIOC->ODR = Score_val[74];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[75];
			GPIOC->ODR = Score_val[75];

			GPIOC->ODR = Score_val[76];
			GPIOC->ODR = Score_val[76];

			GPIOC->ODR = Score_val[77];
			GPIOC->ODR = Score_val[77];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[78];
			GPIOC->ODR = Score_val[78];

			GPIOC->ODR = Score_val[79];
			GPIOC->ODR = Score_val[79];

			GPIOC->ODR = Score_val[80];
			GPIOC->ODR = Score_val[80];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 155 ... 159: // 22e

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green; //dot
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[450];
			GPIOC->ODR = pixel[450];

			GPIOC->ODR = pixel[451];
			GPIOC->ODR = pixel[451];

			GPIOC->ODR = pixel[452];
			GPIOC->ODR = pixel[452];

			GPIOC->ODR = pixel[453];
			GPIOC->ODR = pixel[453];

			GPIOC->ODR = pixel[454];
			GPIOC->ODR = pixel[454];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[455];
			GPIOC->ODR = pixel[455];

			GPIOC->ODR = pixel[456];
			GPIOC->ODR = pixel[456];

			GPIOC->ODR = pixel[457];
			GPIOC->ODR = pixel[457];

			GPIOC->ODR = pixel[458];
			GPIOC->ODR = pixel[458];

			GPIOC->ODR = pixel[459];
			GPIOC->ODR = pixel[459];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[460];
			GPIOC->ODR = pixel[460];

			GPIOC->ODR = pixel[461];
			GPIOC->ODR = pixel[461];

			GPIOC->ODR = pixel[462];
			GPIOC->ODR = pixel[462];

			GPIOC->ODR = pixel[463];
			GPIOC->ODR = pixel[463];

			GPIOC->ODR = pixel[464];
			GPIOC->ODR = pixel[464];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[465];
			GPIOC->ODR = pixel[465];

			GPIOC->ODR = pixel[466];
			GPIOC->ODR = pixel[466];

			GPIOC->ODR = pixel[467];
			GPIOC->ODR = pixel[467];

			GPIOC->ODR = pixel[468];
			GPIOC->ODR = pixel[468];

			GPIOC->ODR = pixel[469];
			GPIOC->ODR = pixel[469];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[470];
			GPIOC->ODR = pixel[470];

			GPIOC->ODR = pixel[471];
			GPIOC->ODR = pixel[471];

			GPIOC->ODR = pixel[472];
			GPIOC->ODR = pixel[472];

			GPIOC->ODR = pixel[473];
			GPIOC->ODR = pixel[473];

			GPIOC->ODR = pixel[474];
			GPIOC->ODR = pixel[474];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[475];
			GPIOC->ODR = pixel[475];

			GPIOC->ODR = pixel[476];
			GPIOC->ODR = pixel[476];

			GPIOC->ODR = pixel[477];
			GPIOC->ODR = pixel[477];

			GPIOC->ODR = pixel[478];
			GPIOC->ODR = pixel[478];

			GPIOC->ODR = pixel[479];
			GPIOC->ODR = pixel[479];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[480];
			GPIOC->ODR = pixel[480];

			GPIOC->ODR = pixel[481];
			GPIOC->ODR = pixel[481];

			GPIOC->ODR = pixel[482];
			GPIOC->ODR = pixel[482];

			GPIOC->ODR = pixel[483];
			GPIOC->ODR = pixel[483];

			GPIOC->ODR = pixel[484];
			GPIOC->ODR = pixel[484];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[485];
			GPIOC->ODR = pixel[485];

			GPIOC->ODR = pixel[486];
			GPIOC->ODR = pixel[486];

			GPIOC->ODR = pixel[487];
			GPIOC->ODR = pixel[487];

			GPIOC->ODR = pixel[488];
			GPIOC->ODR = pixel[488];

			GPIOC->ODR = pixel[489];
			GPIOC->ODR = pixel[489];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[490];
			GPIOC->ODR = pixel[490];

			GPIOC->ODR = pixel[491];
			GPIOC->ODR = pixel[491];

			GPIOC->ODR = pixel[492];
			GPIOC->ODR = pixel[492];

			GPIOC->ODR = pixel[493];
			GPIOC->ODR = pixel[493];

			GPIOC->ODR = pixel[494];
			GPIOC->ODR = pixel[494];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[495];
			GPIOC->ODR = pixel[495];

			GPIOC->ODR = pixel[496];
			GPIOC->ODR = pixel[496];

			GPIOC->ODR = pixel[497];
			GPIOC->ODR = pixel[497];

			GPIOC->ODR = pixel[498];
			GPIOC->ODR = pixel[498];

			GPIOC->ODR = pixel[499];
			GPIOC->ODR = pixel[499];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[81];
			GPIOC->ODR = Score_val[81];

			GPIOC->ODR = Score_val[82];
			GPIOC->ODR = Score_val[82];

			GPIOC->ODR = Score_val[83];
			GPIOC->ODR = Score_val[83];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[84];
			GPIOC->ODR = Score_val[84];

			GPIOC->ODR = Score_val[85];
			GPIOC->ODR = Score_val[85];

			GPIOC->ODR = Score_val[86];
			GPIOC->ODR = Score_val[86];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[87];
			GPIOC->ODR = Score_val[87];

			GPIOC->ODR = Score_val[88];
			GPIOC->ODR = Score_val[88];

			GPIOC->ODR = Score_val[89];
			GPIOC->ODR = Score_val[89];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 160 ... 164:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
//
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = White_OFF;
			break;
			case 165 ... 165:
			GPIOC->ODR = White_OFF;
			break;
			case 166 ... 169:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
//			GPIOC->ODR = White_OFF;
//			GPIOC->ODR = White_OFF;

			while(waste_of_time<49)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			}
		break;
		case 170 ... 204: //threes
			switch(Lines)
			{
			case 170 ... 174: //33a


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[500];
			GPIOC->ODR = pixel[500];

			GPIOC->ODR = pixel[501];
			GPIOC->ODR = pixel[501];

			GPIOC->ODR = pixel[502];
			GPIOC->ODR = pixel[502];

			GPIOC->ODR = pixel[503];
			GPIOC->ODR = pixel[503];

			GPIOC->ODR = pixel[504];
			GPIOC->ODR = pixel[504];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[505];
			GPIOC->ODR = pixel[505];

			GPIOC->ODR = pixel[506];
			GPIOC->ODR = pixel[506];

			GPIOC->ODR = pixel[507];
			GPIOC->ODR = pixel[507];

			GPIOC->ODR = pixel[508];
			GPIOC->ODR = pixel[508];

			GPIOC->ODR = pixel[509];
			GPIOC->ODR = pixel[509];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[510];
			GPIOC->ODR = pixel[510];

			GPIOC->ODR = pixel[511];
			GPIOC->ODR = pixel[511];

			GPIOC->ODR = pixel[512];
			GPIOC->ODR = pixel[512];

			GPIOC->ODR = pixel[513];
			GPIOC->ODR = pixel[513];

			GPIOC->ODR = pixel[514];
			GPIOC->ODR = pixel[514];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[515];
			GPIOC->ODR = pixel[515];

			GPIOC->ODR = pixel[516];
			GPIOC->ODR = pixel[516];

			GPIOC->ODR = pixel[517];
			GPIOC->ODR = pixel[517];

			GPIOC->ODR = pixel[518];
			GPIOC->ODR = pixel[518];

			GPIOC->ODR = pixel[519];
			GPIOC->ODR = pixel[519];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[520];
			GPIOC->ODR = pixel[520];

			GPIOC->ODR = pixel[521];
			GPIOC->ODR = pixel[521];

			GPIOC->ODR = pixel[522];
			GPIOC->ODR = pixel[522];

			GPIOC->ODR = pixel[523];
			GPIOC->ODR = pixel[523];

			GPIOC->ODR = pixel[524];
			GPIOC->ODR = pixel[524];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[525];
			GPIOC->ODR = pixel[525];

			GPIOC->ODR = pixel[526];
			GPIOC->ODR = pixel[526];

			GPIOC->ODR = pixel[527];
			GPIOC->ODR = pixel[527];

			GPIOC->ODR = pixel[528];
			GPIOC->ODR = pixel[528];

			GPIOC->ODR = pixel[529];
			GPIOC->ODR = pixel[529];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[530];
			GPIOC->ODR = pixel[530];

			GPIOC->ODR = pixel[531];
			GPIOC->ODR = pixel[531];

			GPIOC->ODR = pixel[532];
			GPIOC->ODR = pixel[532];

			GPIOC->ODR = pixel[533];
			GPIOC->ODR = pixel[533];

			GPIOC->ODR = pixel[534];
			GPIOC->ODR = pixel[534];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[535];
			GPIOC->ODR = pixel[535];

			GPIOC->ODR = pixel[536];
			GPIOC->ODR = pixel[536];

			GPIOC->ODR = pixel[537];
			GPIOC->ODR = pixel[537];

			GPIOC->ODR = pixel[538];
			GPIOC->ODR = pixel[538];

			GPIOC->ODR = pixel[539];
			GPIOC->ODR = pixel[539];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[540];
			GPIOC->ODR = pixel[540];

			GPIOC->ODR = pixel[541];
			GPIOC->ODR = pixel[541];

			GPIOC->ODR = pixel[542];
			GPIOC->ODR = pixel[542];

			GPIOC->ODR = pixel[543];
			GPIOC->ODR = pixel[543];

			GPIOC->ODR = pixel[544];
			GPIOC->ODR = pixel[544];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[545];
			GPIOC->ODR = pixel[545];

			GPIOC->ODR = pixel[546];
			GPIOC->ODR = pixel[546];

			GPIOC->ODR = pixel[547];
			GPIOC->ODR = pixel[547];

			GPIOC->ODR = pixel[548];
			GPIOC->ODR = pixel[548];

			GPIOC->ODR = pixel[549];
			GPIOC->ODR = pixel[549];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[90];
			GPIOC->ODR = Score_val[90];

			GPIOC->ODR = Score_val[91];
			GPIOC->ODR = Score_val[91];

			GPIOC->ODR = Score_val[92];
			GPIOC->ODR = Score_val[92];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[93];
			GPIOC->ODR = Score_val[93];

			GPIOC->ODR = Score_val[94];
			GPIOC->ODR = Score_val[94];

			GPIOC->ODR = Score_val[95];
			GPIOC->ODR = Score_val[95];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[96];
			GPIOC->ODR = Score_val[96];

			GPIOC->ODR = Score_val[97];
			GPIOC->ODR = Score_val[97];

			GPIOC->ODR = Score_val[98];
			GPIOC->ODR = Score_val[98];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 175 ... 179: //33b


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[550];
			GPIOC->ODR = pixel[550];

			GPIOC->ODR = pixel[551];
			GPIOC->ODR = pixel[551];

			GPIOC->ODR = pixel[552];
			GPIOC->ODR = pixel[552];

			GPIOC->ODR = pixel[553];
			GPIOC->ODR = pixel[553];

			GPIOC->ODR = pixel[554];
			GPIOC->ODR = pixel[554];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[555];
			GPIOC->ODR = pixel[555];

			GPIOC->ODR = pixel[556];
			GPIOC->ODR = pixel[556];

			GPIOC->ODR = pixel[557];
			GPIOC->ODR = pixel[557];

			GPIOC->ODR = pixel[558];
			GPIOC->ODR = pixel[558];

			GPIOC->ODR = pixel[559];
			GPIOC->ODR = pixel[559];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[560];
			GPIOC->ODR = pixel[560];

			GPIOC->ODR = pixel[561];
			GPIOC->ODR = pixel[561];

			GPIOC->ODR = pixel[562];
			GPIOC->ODR = pixel[562];

			GPIOC->ODR = pixel[563];
			GPIOC->ODR = pixel[563];

			GPIOC->ODR = pixel[564];
			GPIOC->ODR = pixel[564];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[565];
			GPIOC->ODR = pixel[565];

			GPIOC->ODR = pixel[566];
			GPIOC->ODR = pixel[566];

			GPIOC->ODR = pixel[567];
			GPIOC->ODR = pixel[567];

			GPIOC->ODR = pixel[568];
			GPIOC->ODR = pixel[568];

			GPIOC->ODR = pixel[569];
			GPIOC->ODR = pixel[569];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[570];
			GPIOC->ODR = pixel[570];

			GPIOC->ODR = pixel[571];
			GPIOC->ODR = pixel[571];

			GPIOC->ODR = pixel[572];
			GPIOC->ODR = pixel[572];

			GPIOC->ODR = pixel[573];
			GPIOC->ODR = pixel[573];

			GPIOC->ODR = pixel[574];
			GPIOC->ODR = pixel[574];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[575];
			GPIOC->ODR = pixel[575];

			GPIOC->ODR = pixel[576];
			GPIOC->ODR = pixel[576];

			GPIOC->ODR = pixel[577];
			GPIOC->ODR = pixel[577];

			GPIOC->ODR = pixel[578];
			GPIOC->ODR = pixel[578];

			GPIOC->ODR = pixel[579];
			GPIOC->ODR = pixel[579];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[580];
			GPIOC->ODR = pixel[580];

			GPIOC->ODR = pixel[581];
			GPIOC->ODR = pixel[581];

			GPIOC->ODR = pixel[582];
			GPIOC->ODR = pixel[582];

			GPIOC->ODR = pixel[583];
			GPIOC->ODR = pixel[583];

			GPIOC->ODR = pixel[584];
			GPIOC->ODR = pixel[584];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[585];
			GPIOC->ODR = pixel[585];

			GPIOC->ODR = pixel[586];
			GPIOC->ODR = pixel[586];

			GPIOC->ODR = pixel[587];
			GPIOC->ODR = pixel[587];

			GPIOC->ODR = pixel[588];
			GPIOC->ODR = pixel[588];

			GPIOC->ODR = pixel[589];
			GPIOC->ODR = pixel[589];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[590];
			GPIOC->ODR = pixel[590];

			GPIOC->ODR = pixel[591];
			GPIOC->ODR = pixel[591];

			GPIOC->ODR = pixel[592];
			GPIOC->ODR = pixel[592];

			GPIOC->ODR = pixel[593];
			GPIOC->ODR = pixel[593];

			GPIOC->ODR = pixel[594];
			GPIOC->ODR = pixel[594];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[595];
			GPIOC->ODR = pixel[595];

			GPIOC->ODR = pixel[596];
			GPIOC->ODR = pixel[596];

			GPIOC->ODR = pixel[597];
			GPIOC->ODR = pixel[597];

			GPIOC->ODR = pixel[598];
			GPIOC->ODR = pixel[598];

			GPIOC->ODR = pixel[599];
			GPIOC->ODR = pixel[599];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[99];
			GPIOC->ODR = Score_val[99];

			GPIOC->ODR = Score_val[100];
			GPIOC->ODR = Score_val[100];

			GPIOC->ODR = Score_val[101];
			GPIOC->ODR = Score_val[101];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[102];
			GPIOC->ODR = Score_val[102];

			GPIOC->ODR = Score_val[103];
			GPIOC->ODR = Score_val[103];

			GPIOC->ODR = Score_val[104];
			GPIOC->ODR = Score_val[104];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[105];
			GPIOC->ODR = Score_val[105];

			GPIOC->ODR = Score_val[106];
			GPIOC->ODR = Score_val[106];

			GPIOC->ODR = Score_val[107];
			GPIOC->ODR = Score_val[107];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 180 ... 184: //33c


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[600];
			GPIOC->ODR = pixel[600];

			GPIOC->ODR = pixel[601];
			GPIOC->ODR = pixel[601];

			GPIOC->ODR = pixel[602];
			GPIOC->ODR = pixel[602];

			GPIOC->ODR = pixel[603];
			GPIOC->ODR = pixel[603];

			GPIOC->ODR = pixel[604];
			GPIOC->ODR = pixel[604];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[605];
			GPIOC->ODR = pixel[605];

			GPIOC->ODR = pixel[606];
			GPIOC->ODR = pixel[606];

			GPIOC->ODR = pixel[607];
			GPIOC->ODR = pixel[607];

			GPIOC->ODR = pixel[608];
			GPIOC->ODR = pixel[608];

			GPIOC->ODR = pixel[609];
			GPIOC->ODR = pixel[609];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[610];
			GPIOC->ODR = pixel[610];

			GPIOC->ODR = pixel[611];
			GPIOC->ODR = pixel[611];

			GPIOC->ODR = pixel[612];
			GPIOC->ODR = pixel[612];

			GPIOC->ODR = pixel[613];
			GPIOC->ODR = pixel[613];

			GPIOC->ODR = pixel[614];
			GPIOC->ODR = pixel[614];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[615];
			GPIOC->ODR = pixel[615];

			GPIOC->ODR = pixel[616];
			GPIOC->ODR = pixel[616];

			GPIOC->ODR = pixel[617];
			GPIOC->ODR = pixel[617];

			GPIOC->ODR = pixel[618];
			GPIOC->ODR = pixel[618];

			GPIOC->ODR = pixel[619];
			GPIOC->ODR = pixel[619];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[620];
			GPIOC->ODR = pixel[620];

			GPIOC->ODR = pixel[621];
			GPIOC->ODR = pixel[621];

			GPIOC->ODR = pixel[622];
			GPIOC->ODR = pixel[622];

			GPIOC->ODR = pixel[623];
			GPIOC->ODR = pixel[623];

			GPIOC->ODR = pixel[624];
			GPIOC->ODR = pixel[624];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[625];
			GPIOC->ODR = pixel[625];

			GPIOC->ODR = pixel[626];
			GPIOC->ODR = pixel[626];

			GPIOC->ODR = pixel[627];
			GPIOC->ODR = pixel[627];

			GPIOC->ODR = pixel[628];
			GPIOC->ODR = pixel[628];

			GPIOC->ODR = pixel[629];
			GPIOC->ODR = pixel[629];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[630];
			GPIOC->ODR = pixel[630];

			GPIOC->ODR = pixel[631];
			GPIOC->ODR = pixel[631];

			GPIOC->ODR = pixel[632];
			GPIOC->ODR = pixel[632];

			GPIOC->ODR = pixel[633];
			GPIOC->ODR = pixel[633];

			GPIOC->ODR = pixel[634];
			GPIOC->ODR = pixel[634];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[635];
			GPIOC->ODR = pixel[635];

			GPIOC->ODR = pixel[636];
			GPIOC->ODR = pixel[636];

			GPIOC->ODR = pixel[637];
			GPIOC->ODR = pixel[637];

			GPIOC->ODR = pixel[638];
			GPIOC->ODR = pixel[638];

			GPIOC->ODR = pixel[639];
			GPIOC->ODR = pixel[639];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[640];
			GPIOC->ODR = pixel[640];

			GPIOC->ODR = pixel[641];
			GPIOC->ODR = pixel[641];

			GPIOC->ODR = pixel[642];
			GPIOC->ODR = pixel[642];

			GPIOC->ODR = pixel[643];
			GPIOC->ODR = pixel[643];

			GPIOC->ODR = pixel[644];
			GPIOC->ODR = pixel[644];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[645];
			GPIOC->ODR = pixel[645];

			GPIOC->ODR = pixel[646];
			GPIOC->ODR = pixel[646];

			GPIOC->ODR = pixel[647];
			GPIOC->ODR = pixel[647];

			GPIOC->ODR = pixel[648];
			GPIOC->ODR = pixel[648];

			GPIOC->ODR = pixel[649];
			GPIOC->ODR = pixel[649];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[108];
			GPIOC->ODR = Score_val[108];

			GPIOC->ODR = Score_val[109];
			GPIOC->ODR = Score_val[109];

			GPIOC->ODR = Score_val[110];
			GPIOC->ODR = Score_val[110];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[111];
			GPIOC->ODR = Score_val[111];

			GPIOC->ODR = Score_val[112];
			GPIOC->ODR = Score_val[112];

			GPIOC->ODR = Score_val[113];
			GPIOC->ODR = Score_val[113];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[114];
			GPIOC->ODR = Score_val[114];

			GPIOC->ODR = Score_val[115];
			GPIOC->ODR = Score_val[115];

			GPIOC->ODR = Score_val[116];
			GPIOC->ODR = Score_val[116];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 185 ... 189: //33d

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[650];
			GPIOC->ODR = pixel[650];

			GPIOC->ODR = pixel[651];
			GPIOC->ODR = pixel[651];

			GPIOC->ODR = pixel[652];
			GPIOC->ODR = pixel[652];

			GPIOC->ODR = pixel[653];
			GPIOC->ODR = pixel[653];

			GPIOC->ODR = pixel[654];
			GPIOC->ODR = pixel[654];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[655];
			GPIOC->ODR = pixel[655];

			GPIOC->ODR = pixel[656];
			GPIOC->ODR = pixel[656];

			GPIOC->ODR = pixel[657];
			GPIOC->ODR = pixel[657];

			GPIOC->ODR = pixel[658];
			GPIOC->ODR = pixel[658];

			GPIOC->ODR = pixel[659];
			GPIOC->ODR = pixel[659];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[660];
			GPIOC->ODR = pixel[660];

			GPIOC->ODR = pixel[661];
			GPIOC->ODR = pixel[661];

			GPIOC->ODR = pixel[662];
			GPIOC->ODR = pixel[662];

			GPIOC->ODR = pixel[663];
			GPIOC->ODR = pixel[663];

			GPIOC->ODR = pixel[664];
			GPIOC->ODR = pixel[664];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[665];
			GPIOC->ODR = pixel[665];

			GPIOC->ODR = pixel[666];
			GPIOC->ODR = pixel[666];

			GPIOC->ODR = pixel[667];
			GPIOC->ODR = pixel[667];

			GPIOC->ODR = pixel[668];
			GPIOC->ODR = pixel[668];

			GPIOC->ODR = pixel[669];
			GPIOC->ODR = pixel[669];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[670];
			GPIOC->ODR = pixel[670];

			GPIOC->ODR = pixel[671];
			GPIOC->ODR = pixel[671];

			GPIOC->ODR = pixel[672];
			GPIOC->ODR = pixel[672];

			GPIOC->ODR = pixel[673];
			GPIOC->ODR = pixel[673];

			GPIOC->ODR = pixel[674];
			GPIOC->ODR = pixel[674];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[675];
			GPIOC->ODR = pixel[675];

			GPIOC->ODR = pixel[676];
			GPIOC->ODR = pixel[676];

			GPIOC->ODR = pixel[677];
			GPIOC->ODR = pixel[677];

			GPIOC->ODR = pixel[678];
			GPIOC->ODR = pixel[678];

			GPIOC->ODR = pixel[679];
			GPIOC->ODR = pixel[679];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[680];
			GPIOC->ODR = pixel[680];

			GPIOC->ODR = pixel[681];
			GPIOC->ODR = pixel[681];

			GPIOC->ODR = pixel[682];
			GPIOC->ODR = pixel[682];

			GPIOC->ODR = pixel[683];
			GPIOC->ODR = pixel[683];

			GPIOC->ODR = pixel[684];
			GPIOC->ODR = pixel[684];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[685];
			GPIOC->ODR = pixel[685];

			GPIOC->ODR = pixel[686];
			GPIOC->ODR = pixel[686];

			GPIOC->ODR = pixel[687];
			GPIOC->ODR = pixel[687];

			GPIOC->ODR = pixel[688];
			GPIOC->ODR = pixel[688];

			GPIOC->ODR = pixel[689];
			GPIOC->ODR = pixel[689];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[690];
			GPIOC->ODR = pixel[690];

			GPIOC->ODR = pixel[691];
			GPIOC->ODR = pixel[691];

			GPIOC->ODR = pixel[692];
			GPIOC->ODR = pixel[692];

			GPIOC->ODR = pixel[693];
			GPIOC->ODR = pixel[693];

			GPIOC->ODR = pixel[694];
			GPIOC->ODR = pixel[694];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[695];
			GPIOC->ODR = pixel[695];

			GPIOC->ODR = pixel[696];
			GPIOC->ODR = pixel[696];

			GPIOC->ODR = pixel[697];
			GPIOC->ODR = pixel[697];

			GPIOC->ODR = pixel[698];
			GPIOC->ODR = pixel[698];

			GPIOC->ODR = pixel[699];
			GPIOC->ODR = pixel[699];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[117];
			GPIOC->ODR = Score_val[117];

			GPIOC->ODR = Score_val[118];
			GPIOC->ODR = Score_val[118];

			GPIOC->ODR = Score_val[119];
			GPIOC->ODR = Score_val[119];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[120];
			GPIOC->ODR = Score_val[120];

			GPIOC->ODR = Score_val[121];
			GPIOC->ODR = Score_val[121];

			GPIOC->ODR = Score_val[122];
			GPIOC->ODR = Score_val[122];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[123];
			GPIOC->ODR = Score_val[123];

			GPIOC->ODR = Score_val[124];
			GPIOC->ODR = Score_val[124];

			GPIOC->ODR = Score_val[125];
			GPIOC->ODR = Score_val[125];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 190 ... 194: //33e


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green; // dot
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[700];
			GPIOC->ODR = pixel[700];

			GPIOC->ODR = pixel[701];
			GPIOC->ODR = pixel[701];

			GPIOC->ODR = pixel[702];
			GPIOC->ODR = pixel[702];

			GPIOC->ODR = pixel[703];
			GPIOC->ODR = pixel[703];

			GPIOC->ODR = pixel[704];
			GPIOC->ODR = pixel[704];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[705];
			GPIOC->ODR = pixel[705];

			GPIOC->ODR = pixel[706];
			GPIOC->ODR = pixel[706];

			GPIOC->ODR = pixel[707];
			GPIOC->ODR = pixel[707];

			GPIOC->ODR = pixel[708];
			GPIOC->ODR = pixel[708];

			GPIOC->ODR = pixel[709];
			GPIOC->ODR = pixel[709];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[710];
			GPIOC->ODR = pixel[710];

			GPIOC->ODR = pixel[711];
			GPIOC->ODR = pixel[711];

			GPIOC->ODR = pixel[712];
			GPIOC->ODR = pixel[712];

			GPIOC->ODR = pixel[713];
			GPIOC->ODR = pixel[713];

			GPIOC->ODR = pixel[714];
			GPIOC->ODR = pixel[714];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[715];
			GPIOC->ODR = pixel[715];

			GPIOC->ODR = pixel[716];
			GPIOC->ODR = pixel[716];

			GPIOC->ODR = pixel[717];
			GPIOC->ODR = pixel[717];

			GPIOC->ODR = pixel[718];
			GPIOC->ODR = pixel[718];

			GPIOC->ODR = pixel[719];
			GPIOC->ODR = pixel[719];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[720];
			GPIOC->ODR = pixel[720];

			GPIOC->ODR = pixel[721];
			GPIOC->ODR = pixel[721];

			GPIOC->ODR = pixel[722];
			GPIOC->ODR = pixel[722];

			GPIOC->ODR = pixel[723];
			GPIOC->ODR = pixel[723];

			GPIOC->ODR = pixel[724];
			GPIOC->ODR = pixel[724];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[725];
			GPIOC->ODR = pixel[725];

			GPIOC->ODR = pixel[726];
			GPIOC->ODR = pixel[726];

			GPIOC->ODR = pixel[727];
			GPIOC->ODR = pixel[727];

			GPIOC->ODR = pixel[728];
			GPIOC->ODR = pixel[728];

			GPIOC->ODR = pixel[729];
			GPIOC->ODR = pixel[729];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[730];
			GPIOC->ODR = pixel[730];

			GPIOC->ODR = pixel[731];
			GPIOC->ODR = pixel[731];

			GPIOC->ODR = pixel[732];
			GPIOC->ODR = pixel[732];

			GPIOC->ODR = pixel[733];
			GPIOC->ODR = pixel[733];

			GPIOC->ODR = pixel[734];
			GPIOC->ODR = pixel[734];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[735];
			GPIOC->ODR = pixel[735];

			GPIOC->ODR = pixel[736];
			GPIOC->ODR = pixel[736];

			GPIOC->ODR = pixel[737];
			GPIOC->ODR = pixel[737];

			GPIOC->ODR = pixel[738];
			GPIOC->ODR = pixel[738];

			GPIOC->ODR = pixel[739];
			GPIOC->ODR = pixel[739];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[740];
			GPIOC->ODR = pixel[740];

			GPIOC->ODR = pixel[741];
			GPIOC->ODR = pixel[741];

			GPIOC->ODR = pixel[742];
			GPIOC->ODR = pixel[742];

			GPIOC->ODR = pixel[743];
			GPIOC->ODR = pixel[743];

			GPIOC->ODR = pixel[744];
			GPIOC->ODR = pixel[744];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[745];
			GPIOC->ODR = pixel[745];

			GPIOC->ODR = pixel[746];
			GPIOC->ODR = pixel[746];

			GPIOC->ODR = pixel[747];
			GPIOC->ODR = pixel[747];

			GPIOC->ODR = pixel[748];
			GPIOC->ODR = pixel[748];

			GPIOC->ODR = pixel[749];
			GPIOC->ODR = pixel[749];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[126];
			GPIOC->ODR = Score_val[126];

			GPIOC->ODR = Score_val[127];
			GPIOC->ODR = Score_val[127];

			GPIOC->ODR = Score_val[128];
			GPIOC->ODR = Score_val[128];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[129];
			GPIOC->ODR = Score_val[129];

			GPIOC->ODR = Score_val[130];
			GPIOC->ODR = Score_val[130];

			GPIOC->ODR = Score_val[131];
			GPIOC->ODR = Score_val[131];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[132];
			GPIOC->ODR = Score_val[132];

			GPIOC->ODR = Score_val[133];
			GPIOC->ODR = Score_val[133];

			GPIOC->ODR = Score_val[134];
			GPIOC->ODR = Score_val[134];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 195 ... 199:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
//			GPIOC->ODR = White_OFF;
//			GPIOC->ODR = White_OFF;
//			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = White_OFF;
			break;
			case 200 ... 200:
			GPIOC->ODR = White_OFF;
			break;
			case 201 ... 204:
//			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
//			GPIOC->ODR = White_OFF;
//			GPIOC->ODR = White_OFF;

			while(waste_of_time<49)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			}
		break;
		case 205 ... 239:  //fours
			switch(Lines)
			{
			case 205 ... 209: //44a


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;//dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[750];
			GPIOC->ODR = pixel[750];

			GPIOC->ODR = pixel[751];
			GPIOC->ODR = pixel[751];

			GPIOC->ODR = pixel[752];
			GPIOC->ODR = pixel[752];

			GPIOC->ODR = pixel[753];
			GPIOC->ODR = pixel[753];

			GPIOC->ODR = pixel[754];
			GPIOC->ODR = pixel[754];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[755];
			GPIOC->ODR = pixel[755];

			GPIOC->ODR = pixel[756];
			GPIOC->ODR = pixel[756];

			GPIOC->ODR = pixel[757];
			GPIOC->ODR = pixel[757];

			GPIOC->ODR = pixel[758];
			GPIOC->ODR = pixel[758];

			GPIOC->ODR = pixel[759];
			GPIOC->ODR = pixel[759];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[760];
			GPIOC->ODR = pixel[760];

			GPIOC->ODR = pixel[761];
			GPIOC->ODR = pixel[761];

			GPIOC->ODR = pixel[762];
			GPIOC->ODR = pixel[762];

			GPIOC->ODR = pixel[763];
			GPIOC->ODR = pixel[763];

			GPIOC->ODR = pixel[764];
			GPIOC->ODR = pixel[764];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[765];
			GPIOC->ODR = pixel[765];

			GPIOC->ODR = pixel[766];
			GPIOC->ODR = pixel[766];

			GPIOC->ODR = pixel[767];
			GPIOC->ODR = pixel[767];

			GPIOC->ODR = pixel[768];
			GPIOC->ODR = pixel[768];

			GPIOC->ODR = pixel[769];
			GPIOC->ODR = pixel[769];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[770];
			GPIOC->ODR = pixel[770];

			GPIOC->ODR = pixel[771];
			GPIOC->ODR = pixel[771];

			GPIOC->ODR = pixel[772];
			GPIOC->ODR = pixel[772];

			GPIOC->ODR = pixel[773];
			GPIOC->ODR = pixel[773];

			GPIOC->ODR = pixel[774];
			GPIOC->ODR = pixel[774];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[775];
			GPIOC->ODR = pixel[775];

			GPIOC->ODR = pixel[776];
			GPIOC->ODR = pixel[776];

			GPIOC->ODR = pixel[777];
			GPIOC->ODR = pixel[777];

			GPIOC->ODR = pixel[778];
			GPIOC->ODR = pixel[778];

			GPIOC->ODR = pixel[779];
			GPIOC->ODR = pixel[779];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[780];
			GPIOC->ODR = pixel[780];

			GPIOC->ODR = pixel[781];
			GPIOC->ODR = pixel[781];

			GPIOC->ODR = pixel[782];
			GPIOC->ODR = pixel[782];

			GPIOC->ODR = pixel[783];
			GPIOC->ODR = pixel[783];

			GPIOC->ODR = pixel[784];
			GPIOC->ODR = pixel[784];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[785];
			GPIOC->ODR = pixel[785];

			GPIOC->ODR = pixel[786];
			GPIOC->ODR = pixel[786];

			GPIOC->ODR = pixel[787];
			GPIOC->ODR = pixel[787];

			GPIOC->ODR = pixel[788];
			GPIOC->ODR = pixel[788];

			GPIOC->ODR = pixel[789];
			GPIOC->ODR = pixel[789];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[790];
			GPIOC->ODR = pixel[790];

			GPIOC->ODR = pixel[791];
			GPIOC->ODR = pixel[791];

			GPIOC->ODR = pixel[792];
			GPIOC->ODR = pixel[792];

			GPIOC->ODR = pixel[793];
			GPIOC->ODR = pixel[793];

			GPIOC->ODR = pixel[794];
			GPIOC->ODR = pixel[794];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[795];
			GPIOC->ODR = pixel[795];

			GPIOC->ODR = pixel[796];
			GPIOC->ODR = pixel[796];

			GPIOC->ODR = pixel[797];
			GPIOC->ODR = pixel[797];

			GPIOC->ODR = pixel[798];
			GPIOC->ODR = pixel[798];

			GPIOC->ODR = pixel[799];
			GPIOC->ODR = pixel[799];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[135];
			GPIOC->ODR = Score_val[135];

			GPIOC->ODR = Score_val[136];
			GPIOC->ODR = Score_val[136];

			GPIOC->ODR = Score_val[137];
			GPIOC->ODR = Score_val[137];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[138];
			GPIOC->ODR = Score_val[138];

			GPIOC->ODR = Score_val[139];
			GPIOC->ODR = Score_val[139];

			GPIOC->ODR = Score_val[140];
			GPIOC->ODR = Score_val[140];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[141];
			GPIOC->ODR = Score_val[141];

			GPIOC->ODR = Score_val[142];
			GPIOC->ODR = Score_val[142];

			GPIOC->ODR = Score_val[143];
			GPIOC->ODR = Score_val[143];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 210 ... 214: //44b


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[800];
			GPIOC->ODR = pixel[800];

			GPIOC->ODR = pixel[801];
			GPIOC->ODR = pixel[801];

			GPIOC->ODR = pixel[802];
			GPIOC->ODR = pixel[802];

			GPIOC->ODR = pixel[803];
			GPIOC->ODR = pixel[803];

			GPIOC->ODR = pixel[804];
			GPIOC->ODR = pixel[804];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[805];
			GPIOC->ODR = pixel[805];

			GPIOC->ODR = pixel[806];
			GPIOC->ODR = pixel[806];

			GPIOC->ODR = pixel[807];
			GPIOC->ODR = pixel[807];

			GPIOC->ODR = pixel[808];
			GPIOC->ODR = pixel[808];

			GPIOC->ODR = pixel[809];
			GPIOC->ODR = pixel[809];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[810];
			GPIOC->ODR = pixel[810];

			GPIOC->ODR = pixel[811];
			GPIOC->ODR = pixel[811];

			GPIOC->ODR = pixel[812];
			GPIOC->ODR = pixel[812];

			GPIOC->ODR = pixel[813];
			GPIOC->ODR = pixel[813];

			GPIOC->ODR = pixel[814];
			GPIOC->ODR = pixel[814];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[815];
			GPIOC->ODR = pixel[815];

			GPIOC->ODR = pixel[816];
			GPIOC->ODR = pixel[816];

			GPIOC->ODR = pixel[817];
			GPIOC->ODR = pixel[817];

			GPIOC->ODR = pixel[818];
			GPIOC->ODR = pixel[818];

			GPIOC->ODR = pixel[819];
			GPIOC->ODR = pixel[819];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[820];
			GPIOC->ODR = pixel[820];

			GPIOC->ODR = pixel[821];
			GPIOC->ODR = pixel[821];

			GPIOC->ODR = pixel[822];
			GPIOC->ODR = pixel[822];

			GPIOC->ODR = pixel[823];
			GPIOC->ODR = pixel[823];

			GPIOC->ODR = pixel[824];
			GPIOC->ODR = pixel[824];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[825];
			GPIOC->ODR = pixel[825];

			GPIOC->ODR = pixel[826];
			GPIOC->ODR = pixel[826];

			GPIOC->ODR = pixel[827];
			GPIOC->ODR = pixel[827];

			GPIOC->ODR = pixel[828];
			GPIOC->ODR = pixel[828];

			GPIOC->ODR = pixel[829];
			GPIOC->ODR = pixel[829];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[830];
			GPIOC->ODR = pixel[830];

			GPIOC->ODR = pixel[831];
			GPIOC->ODR = pixel[831];

			GPIOC->ODR = pixel[832];
			GPIOC->ODR = pixel[832];

			GPIOC->ODR = pixel[833];
			GPIOC->ODR = pixel[833];

			GPIOC->ODR = pixel[834];
			GPIOC->ODR = pixel[834];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[835];
			GPIOC->ODR = pixel[835];

			GPIOC->ODR = pixel[836];
			GPIOC->ODR = pixel[836];

			GPIOC->ODR = pixel[837];
			GPIOC->ODR = pixel[837];

			GPIOC->ODR = pixel[838];
			GPIOC->ODR = pixel[838];

			GPIOC->ODR = pixel[839];
			GPIOC->ODR = pixel[839];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[840];
			GPIOC->ODR = pixel[840];

			GPIOC->ODR = pixel[841];
			GPIOC->ODR = pixel[841];

			GPIOC->ODR = pixel[842];
			GPIOC->ODR = pixel[842];

			GPIOC->ODR = pixel[843];
			GPIOC->ODR = pixel[843];

			GPIOC->ODR = pixel[844];
			GPIOC->ODR = pixel[844];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[845];
			GPIOC->ODR = pixel[845];

			GPIOC->ODR = pixel[846];
			GPIOC->ODR = pixel[846];

			GPIOC->ODR = pixel[847];
			GPIOC->ODR = pixel[847];

			GPIOC->ODR = pixel[848];
			GPIOC->ODR = pixel[848];

			GPIOC->ODR = pixel[849];
			GPIOC->ODR = pixel[849];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[144];
			GPIOC->ODR = Score_val[144];

			GPIOC->ODR = Score_val[145];
			GPIOC->ODR = Score_val[145];

			GPIOC->ODR = Score_val[146];
			GPIOC->ODR = Score_val[146];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[147];
			GPIOC->ODR = Score_val[147];

			GPIOC->ODR = Score_val[148];
			GPIOC->ODR = Score_val[148];

			GPIOC->ODR = Score_val[149];
			GPIOC->ODR = Score_val[149];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[150];
			GPIOC->ODR = Score_val[150];

			GPIOC->ODR = Score_val[151];
			GPIOC->ODR = Score_val[151];

			GPIOC->ODR = Score_val[152];
			GPIOC->ODR = Score_val[152];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 215 ... 219: //44c


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;//dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[850];
			GPIOC->ODR = pixel[850];

			GPIOC->ODR = pixel[851];
			GPIOC->ODR = pixel[851];

			GPIOC->ODR = pixel[852];
			GPIOC->ODR = pixel[852];

			GPIOC->ODR = pixel[853];
			GPIOC->ODR = pixel[853];

			GPIOC->ODR = pixel[854];
			GPIOC->ODR = pixel[854];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[855];
			GPIOC->ODR = pixel[855];

			GPIOC->ODR = pixel[856];
			GPIOC->ODR = pixel[856];

			GPIOC->ODR = pixel[857];
			GPIOC->ODR = pixel[857];

			GPIOC->ODR = pixel[858];
			GPIOC->ODR = pixel[858];

			GPIOC->ODR = pixel[859];
			GPIOC->ODR = pixel[859];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[860];
			GPIOC->ODR = pixel[860];

			GPIOC->ODR = pixel[861];
			GPIOC->ODR = pixel[861];

			GPIOC->ODR = pixel[862];
			GPIOC->ODR = pixel[862];

			GPIOC->ODR = pixel[863];
			GPIOC->ODR = pixel[863];

			GPIOC->ODR = pixel[864];
			GPIOC->ODR = pixel[864];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[865];
			GPIOC->ODR = pixel[865];

			GPIOC->ODR = pixel[866];
			GPIOC->ODR = pixel[866];

			GPIOC->ODR = pixel[867];
			GPIOC->ODR = pixel[867];

			GPIOC->ODR = pixel[868];
			GPIOC->ODR = pixel[868];

			GPIOC->ODR = pixel[869];
			GPIOC->ODR = pixel[869];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[870];
			GPIOC->ODR = pixel[870];

			GPIOC->ODR = pixel[871];
			GPIOC->ODR = pixel[871];

			GPIOC->ODR = pixel[872];
			GPIOC->ODR = pixel[872];

			GPIOC->ODR = pixel[873];
			GPIOC->ODR = pixel[873];

			GPIOC->ODR = pixel[874];
			GPIOC->ODR = pixel[874];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[875];
			GPIOC->ODR = pixel[875];

			GPIOC->ODR = pixel[876];
			GPIOC->ODR = pixel[876];

			GPIOC->ODR = pixel[877];
			GPIOC->ODR = pixel[877];

			GPIOC->ODR = pixel[878];
			GPIOC->ODR = pixel[878];

			GPIOC->ODR = pixel[879];
			GPIOC->ODR = pixel[879];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[880];
			GPIOC->ODR = pixel[880];

			GPIOC->ODR = pixel[881];
			GPIOC->ODR = pixel[881];

			GPIOC->ODR = pixel[882];
			GPIOC->ODR = pixel[882];

			GPIOC->ODR = pixel[883];
			GPIOC->ODR = pixel[883];

			GPIOC->ODR = pixel[884];
			GPIOC->ODR = pixel[884];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[885];
			GPIOC->ODR = pixel[885];

			GPIOC->ODR = pixel[886];
			GPIOC->ODR = pixel[886];

			GPIOC->ODR = pixel[887];
			GPIOC->ODR = pixel[887];

			GPIOC->ODR = pixel[888];
			GPIOC->ODR = pixel[888];

			GPIOC->ODR = pixel[889];
			GPIOC->ODR = pixel[889];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[890];
			GPIOC->ODR = pixel[890];

			GPIOC->ODR = pixel[891];
			GPIOC->ODR = pixel[891];

			GPIOC->ODR = pixel[892];
			GPIOC->ODR = pixel[892];

			GPIOC->ODR = pixel[893];
			GPIOC->ODR = pixel[893];

			GPIOC->ODR = pixel[894];
			GPIOC->ODR = pixel[894];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[895];
			GPIOC->ODR = pixel[895];

			GPIOC->ODR = pixel[896];
			GPIOC->ODR = pixel[896];

			GPIOC->ODR = pixel[897];
			GPIOC->ODR = pixel[897];

			GPIOC->ODR = pixel[898];
			GPIOC->ODR = pixel[898];

			GPIOC->ODR = pixel[899];
			GPIOC->ODR = pixel[899];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[153];
			GPIOC->ODR = Score_val[153];

			GPIOC->ODR = Score_val[154];
			GPIOC->ODR = Score_val[154];

			GPIOC->ODR = Score_val[155];
			GPIOC->ODR = Score_val[155];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[156];
			GPIOC->ODR = Score_val[156];

			GPIOC->ODR = Score_val[157];
			GPIOC->ODR = Score_val[157];

			GPIOC->ODR = Score_val[158];
			GPIOC->ODR = Score_val[158];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[159];
			GPIOC->ODR = Score_val[159];

			GPIOC->ODR = Score_val[160];
			GPIOC->ODR = Score_val[160];

			GPIOC->ODR = Score_val[161];
			GPIOC->ODR = Score_val[161];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 220 ... 224: // 44d
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[900];
			GPIOC->ODR = pixel[900];

			GPIOC->ODR = pixel[901];
			GPIOC->ODR = pixel[901];

			GPIOC->ODR = pixel[902];
			GPIOC->ODR = pixel[902];

			GPIOC->ODR = pixel[903];
			GPIOC->ODR = pixel[903];

			GPIOC->ODR = pixel[904];
			GPIOC->ODR = pixel[904];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[905];
			GPIOC->ODR = pixel[905];

			GPIOC->ODR = pixel[906];
			GPIOC->ODR = pixel[906];

			GPIOC->ODR = pixel[907];
			GPIOC->ODR = pixel[907];

			GPIOC->ODR = pixel[908];
			GPIOC->ODR = pixel[908];

			GPIOC->ODR = pixel[909];
			GPIOC->ODR = pixel[909];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[910];
			GPIOC->ODR = pixel[910];

			GPIOC->ODR = pixel[911];
			GPIOC->ODR = pixel[911];

			GPIOC->ODR = pixel[912];
			GPIOC->ODR = pixel[912];

			GPIOC->ODR = pixel[913];
			GPIOC->ODR = pixel[913];

			GPIOC->ODR = pixel[914];
			GPIOC->ODR = pixel[914];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[915];
			GPIOC->ODR = pixel[915];

			GPIOC->ODR = pixel[916];
			GPIOC->ODR = pixel[916];

			GPIOC->ODR = pixel[917];
			GPIOC->ODR = pixel[917];

			GPIOC->ODR = pixel[918];
			GPIOC->ODR = pixel[918];

			GPIOC->ODR = pixel[919];
			GPIOC->ODR = pixel[919];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[920];
			GPIOC->ODR = pixel[920];

			GPIOC->ODR = pixel[921];
			GPIOC->ODR = pixel[921];

			GPIOC->ODR = pixel[922];
			GPIOC->ODR = pixel[922];

			GPIOC->ODR = pixel[923];
			GPIOC->ODR = pixel[923];

			GPIOC->ODR = pixel[924];
			GPIOC->ODR = pixel[924];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[925];
			GPIOC->ODR = pixel[925];

			GPIOC->ODR = pixel[926];
			GPIOC->ODR = pixel[926];

			GPIOC->ODR = pixel[927];
			GPIOC->ODR = pixel[927];

			GPIOC->ODR = pixel[928];
			GPIOC->ODR = pixel[928];

			GPIOC->ODR = pixel[929];
			GPIOC->ODR = pixel[929];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[930];
			GPIOC->ODR = pixel[930];

			GPIOC->ODR = pixel[931];
			GPIOC->ODR = pixel[931];

			GPIOC->ODR = pixel[932];
			GPIOC->ODR = pixel[932];

			GPIOC->ODR = pixel[933];
			GPIOC->ODR = pixel[933];

			GPIOC->ODR = pixel[934];
			GPIOC->ODR = pixel[934];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[935];
			GPIOC->ODR = pixel[935];

			GPIOC->ODR = pixel[936];
			GPIOC->ODR = pixel[936];

			GPIOC->ODR = pixel[937];
			GPIOC->ODR = pixel[937];

			GPIOC->ODR = pixel[938];
			GPIOC->ODR = pixel[938];

			GPIOC->ODR = pixel[939];
			GPIOC->ODR = pixel[939];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[940];
			GPIOC->ODR = pixel[940];

			GPIOC->ODR = pixel[941];
			GPIOC->ODR = pixel[941];

			GPIOC->ODR = pixel[942];
			GPIOC->ODR = pixel[942];

			GPIOC->ODR = pixel[943];
			GPIOC->ODR = pixel[943];

			GPIOC->ODR = pixel[944];
			GPIOC->ODR = pixel[944];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[945];
			GPIOC->ODR = pixel[945];

			GPIOC->ODR = pixel[946];
			GPIOC->ODR = pixel[946];

			GPIOC->ODR = pixel[947];
			GPIOC->ODR = pixel[947];

			GPIOC->ODR = pixel[948];
			GPIOC->ODR = pixel[948];

			GPIOC->ODR = pixel[949];
			GPIOC->ODR = pixel[949];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[162];
			GPIOC->ODR = Score_val[162];

			GPIOC->ODR = Score_val[163];
			GPIOC->ODR = Score_val[163];

			GPIOC->ODR = Score_val[164];
			GPIOC->ODR = Score_val[164];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[165];
			GPIOC->ODR = Score_val[165];

			GPIOC->ODR = Score_val[166];
			GPIOC->ODR = Score_val[166];

			GPIOC->ODR = Score_val[167];
			GPIOC->ODR = Score_val[167];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[168];
			GPIOC->ODR = Score_val[168];

			GPIOC->ODR = Score_val[169];
			GPIOC->ODR = Score_val[169];

			GPIOC->ODR = Score_val[170];
			GPIOC->ODR = Score_val[170];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 225 ... 229: //44e

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[950];
			GPIOC->ODR = pixel[950];

			GPIOC->ODR = pixel[951];
			GPIOC->ODR = pixel[951];

			GPIOC->ODR = pixel[952];
			GPIOC->ODR = pixel[952];

			GPIOC->ODR = pixel[953];
			GPIOC->ODR = pixel[953];

			GPIOC->ODR = pixel[954];
			GPIOC->ODR = pixel[954];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[955];
			GPIOC->ODR = pixel[955];

			GPIOC->ODR = pixel[956];
			GPIOC->ODR = pixel[956];

			GPIOC->ODR = pixel[957];
			GPIOC->ODR = pixel[957];

			GPIOC->ODR = pixel[958];
			GPIOC->ODR = pixel[958];

			GPIOC->ODR = pixel[959];
			GPIOC->ODR = pixel[959];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[960];
			GPIOC->ODR = pixel[960];

			GPIOC->ODR = pixel[961];
			GPIOC->ODR = pixel[961];

			GPIOC->ODR = pixel[962];
			GPIOC->ODR = pixel[962];

			GPIOC->ODR = pixel[963];
			GPIOC->ODR = pixel[963];

			GPIOC->ODR = pixel[964];
			GPIOC->ODR = pixel[964];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[965];
			GPIOC->ODR = pixel[965];

			GPIOC->ODR = pixel[966];
			GPIOC->ODR = pixel[966];

			GPIOC->ODR = pixel[967];
			GPIOC->ODR = pixel[967];

			GPIOC->ODR = pixel[968];
			GPIOC->ODR = pixel[968];

			GPIOC->ODR = pixel[969];
			GPIOC->ODR = pixel[969];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[970];
			GPIOC->ODR = pixel[970];

			GPIOC->ODR = pixel[971];
			GPIOC->ODR = pixel[971];

			GPIOC->ODR = pixel[972];
			GPIOC->ODR = pixel[972];

			GPIOC->ODR = pixel[973];
			GPIOC->ODR = pixel[973];

			GPIOC->ODR = pixel[974];
			GPIOC->ODR = pixel[974];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[975];
			GPIOC->ODR = pixel[975];

			GPIOC->ODR = pixel[976];
			GPIOC->ODR = pixel[976];

			GPIOC->ODR = pixel[977];
			GPIOC->ODR = pixel[977];

			GPIOC->ODR = pixel[978];
			GPIOC->ODR = pixel[978];

			GPIOC->ODR = pixel[979];
			GPIOC->ODR = pixel[979];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[980];
			GPIOC->ODR = pixel[980];

			GPIOC->ODR = pixel[981];
			GPIOC->ODR = pixel[981];

			GPIOC->ODR = pixel[982];
			GPIOC->ODR = pixel[982];

			GPIOC->ODR = pixel[983];
			GPIOC->ODR = pixel[983];

			GPIOC->ODR = pixel[984];
			GPIOC->ODR = pixel[984];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[985];
			GPIOC->ODR = pixel[985];

			GPIOC->ODR = pixel[986];
			GPIOC->ODR = pixel[986];

			GPIOC->ODR = pixel[987];
			GPIOC->ODR = pixel[987];

			GPIOC->ODR = pixel[988];
			GPIOC->ODR = pixel[988];

			GPIOC->ODR = pixel[989];
			GPIOC->ODR = pixel[989];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[990];
			GPIOC->ODR = pixel[990];

			GPIOC->ODR = pixel[991];
			GPIOC->ODR = pixel[991];

			GPIOC->ODR = pixel[992];
			GPIOC->ODR = pixel[992];

			GPIOC->ODR = pixel[993];
			GPIOC->ODR = pixel[993];

			GPIOC->ODR = pixel[994];
			GPIOC->ODR = pixel[994];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[995];
			GPIOC->ODR = pixel[995];

			GPIOC->ODR = pixel[996];
			GPIOC->ODR = pixel[996];

			GPIOC->ODR = pixel[997];
			GPIOC->ODR = pixel[997];

			GPIOC->ODR = pixel[998];
			GPIOC->ODR = pixel[998];

			GPIOC->ODR = pixel[999];
			GPIOC->ODR = pixel[999];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[171];
			GPIOC->ODR = Score_val[171];

			GPIOC->ODR = Score_val[172];
			GPIOC->ODR = Score_val[172];

			GPIOC->ODR = Score_val[173];
			GPIOC->ODR = Score_val[173];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[174];
			GPIOC->ODR = Score_val[174];

			GPIOC->ODR = Score_val[175];
			GPIOC->ODR = Score_val[175];

			GPIOC->ODR = Score_val[176];
			GPIOC->ODR = Score_val[176];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[177];
			GPIOC->ODR = Score_val[177];

			GPIOC->ODR = Score_val[178];
			GPIOC->ODR = Score_val[178];

			GPIOC->ODR = Score_val[179];
			GPIOC->ODR = Score_val[179];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 230 ... 234:
//			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<51)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 235 ... 235:
			GPIOC->ODR = White_OFF;
			break;
			case 236 ... 239:
//			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<49)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			}
		break;


		case 240 ... 274: //fives 55a
		switch(Lines)
		{
		case 240 ... 244:

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[0];
		GPIOC->ODR = ppixel[0];

		GPIOC->ODR = ppixel[1];
		GPIOC->ODR = ppixel[1];

		GPIOC->ODR = ppixel[2];
		GPIOC->ODR = ppixel[2];

		GPIOC->ODR = ppixel[3];
		GPIOC->ODR = ppixel[3];

		GPIOC->ODR = ppixel[4];
		GPIOC->ODR = ppixel[4];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[5];
		GPIOC->ODR = ppixel[5];

		GPIOC->ODR = ppixel[6];
		GPIOC->ODR = ppixel[6];

		GPIOC->ODR = ppixel[7];
		GPIOC->ODR = ppixel[7];

		GPIOC->ODR = ppixel[8];
		GPIOC->ODR = ppixel[8];

		GPIOC->ODR = ppixel[9];
		GPIOC->ODR = ppixel[9];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[10];
		GPIOC->ODR = ppixel[10];

		GPIOC->ODR = ppixel[11];
		GPIOC->ODR = ppixel[11];

		GPIOC->ODR = ppixel[12];
		GPIOC->ODR = ppixel[12];

		GPIOC->ODR = ppixel[13];
		GPIOC->ODR = ppixel[13];

		GPIOC->ODR = ppixel[14];
		GPIOC->ODR = ppixel[14];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[15];
		GPIOC->ODR = ppixel[15];

		GPIOC->ODR = ppixel[16];
		GPIOC->ODR = ppixel[16];

		GPIOC->ODR = ppixel[17];
		GPIOC->ODR = ppixel[17];

		GPIOC->ODR = ppixel[18];
		GPIOC->ODR = ppixel[18];

		GPIOC->ODR = ppixel[19];
		GPIOC->ODR = ppixel[19];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[20];
		GPIOC->ODR = ppixel[20];

		GPIOC->ODR = ppixel[21];
		GPIOC->ODR = ppixel[21];

		GPIOC->ODR = ppixel[22];
		GPIOC->ODR = ppixel[22];

		GPIOC->ODR = ppixel[23];
		GPIOC->ODR = ppixel[23];

		GPIOC->ODR = ppixel[24];
		GPIOC->ODR = ppixel[24];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[25];
		GPIOC->ODR = ppixel[25];

		GPIOC->ODR = ppixel[26];
		GPIOC->ODR = ppixel[26];

		GPIOC->ODR = ppixel[27];
		GPIOC->ODR = ppixel[27];

		GPIOC->ODR = ppixel[28];
		GPIOC->ODR = ppixel[28];

		GPIOC->ODR = ppixel[29];
		GPIOC->ODR = ppixel[29];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[30];
		GPIOC->ODR = ppixel[30];

		GPIOC->ODR = ppixel[31];
		GPIOC->ODR = ppixel[31];

		GPIOC->ODR = ppixel[32];
		GPIOC->ODR = ppixel[32];

		GPIOC->ODR = ppixel[33];
		GPIOC->ODR = ppixel[33];

		GPIOC->ODR = ppixel[34];
		GPIOC->ODR = ppixel[34];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[35];
		GPIOC->ODR = ppixel[35];

		GPIOC->ODR = ppixel[36];
		GPIOC->ODR = ppixel[36];

		GPIOC->ODR = ppixel[37];
		GPIOC->ODR = ppixel[37];

		GPIOC->ODR = ppixel[38];
		GPIOC->ODR = ppixel[38];

		GPIOC->ODR = ppixel[39];
		GPIOC->ODR = ppixel[39];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[40];
		GPIOC->ODR = ppixel[40];

		GPIOC->ODR = ppixel[41];
		GPIOC->ODR = ppixel[41];

		GPIOC->ODR = ppixel[42];
		GPIOC->ODR = ppixel[42];

		GPIOC->ODR = ppixel[43];
		GPIOC->ODR = ppixel[43];

		GPIOC->ODR = ppixel[44];
		GPIOC->ODR = ppixel[44];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[45];
		GPIOC->ODR = ppixel[45];

		GPIOC->ODR = ppixel[46];
		GPIOC->ODR = ppixel[46];

		GPIOC->ODR = ppixel[47];
		GPIOC->ODR = ppixel[47];

		GPIOC->ODR = ppixel[48];
		GPIOC->ODR = ppixel[48];

		GPIOC->ODR = ppixel[49];
		GPIOC->ODR = ppixel[49];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[180];
		GPIOC->ODR = Score_val[180];

		GPIOC->ODR = Score_val[181];
		GPIOC->ODR = Score_val[181];

		GPIOC->ODR = Score_val[182];
		GPIOC->ODR = Score_val[182];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[183];
		GPIOC->ODR = Score_val[183];

		GPIOC->ODR = Score_val[184];
		GPIOC->ODR = Score_val[184];

		GPIOC->ODR = Score_val[185];
		GPIOC->ODR = Score_val[185];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[186];
		GPIOC->ODR = Score_val[186];

		GPIOC->ODR = Score_val[187];
		GPIOC->ODR = Score_val[187];

		GPIOC->ODR = Score_val[188];
		GPIOC->ODR = Score_val[188];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 245 ... 249: //55b

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[50];
		GPIOC->ODR = ppixel[50];

		GPIOC->ODR = ppixel[51];
		GPIOC->ODR = ppixel[51];

		GPIOC->ODR = ppixel[52];
		GPIOC->ODR = ppixel[52];

		GPIOC->ODR = ppixel[53];
		GPIOC->ODR = ppixel[53];

		GPIOC->ODR = ppixel[54];
		GPIOC->ODR = ppixel[54];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[55];
		GPIOC->ODR = ppixel[55];

		GPIOC->ODR = ppixel[56];
		GPIOC->ODR = ppixel[56];

		GPIOC->ODR = ppixel[57];
		GPIOC->ODR = ppixel[57];

		GPIOC->ODR = ppixel[58];
		GPIOC->ODR = ppixel[58];

		GPIOC->ODR = ppixel[59];
		GPIOC->ODR = ppixel[59];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[60];
		GPIOC->ODR = ppixel[60];

		GPIOC->ODR = ppixel[61];
		GPIOC->ODR = ppixel[61];

		GPIOC->ODR = ppixel[62];
		GPIOC->ODR = ppixel[62];

		GPIOC->ODR = ppixel[63];
		GPIOC->ODR = ppixel[63];

		GPIOC->ODR = ppixel[64];
		GPIOC->ODR = ppixel[64];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[65];
		GPIOC->ODR = ppixel[65];

		GPIOC->ODR = ppixel[66];
		GPIOC->ODR = ppixel[66];

		GPIOC->ODR = ppixel[67];
		GPIOC->ODR = ppixel[67];

		GPIOC->ODR = ppixel[68];
		GPIOC->ODR = ppixel[68];

		GPIOC->ODR = ppixel[69];
		GPIOC->ODR = ppixel[69];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[70];
		GPIOC->ODR = ppixel[70];

		GPIOC->ODR = ppixel[71];
		GPIOC->ODR = ppixel[71];

		GPIOC->ODR = ppixel[72];
		GPIOC->ODR = ppixel[72];

		GPIOC->ODR = ppixel[73];
		GPIOC->ODR = ppixel[73];

		GPIOC->ODR = ppixel[74];
		GPIOC->ODR = ppixel[74];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[75];
		GPIOC->ODR = ppixel[75];

		GPIOC->ODR = ppixel[76];
		GPIOC->ODR = ppixel[76];

		GPIOC->ODR = ppixel[77];
		GPIOC->ODR = ppixel[77];

		GPIOC->ODR = ppixel[78];
		GPIOC->ODR = ppixel[78];

		GPIOC->ODR = ppixel[79];
		GPIOC->ODR = ppixel[79];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[80];
		GPIOC->ODR = ppixel[80];

		GPIOC->ODR = ppixel[81];
		GPIOC->ODR = ppixel[81];

		GPIOC->ODR = ppixel[82];
		GPIOC->ODR = ppixel[82];

		GPIOC->ODR = ppixel[83];
		GPIOC->ODR = ppixel[83];

		GPIOC->ODR = ppixel[84];
		GPIOC->ODR = ppixel[84];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[85];
		GPIOC->ODR = ppixel[85];

		GPIOC->ODR = ppixel[86];
		GPIOC->ODR = ppixel[86];

		GPIOC->ODR = ppixel[87];
		GPIOC->ODR = ppixel[87];

		GPIOC->ODR = ppixel[88];
		GPIOC->ODR = ppixel[88];

		GPIOC->ODR = ppixel[89];
		GPIOC->ODR = ppixel[89];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[90];
		GPIOC->ODR = ppixel[90];

		GPIOC->ODR = ppixel[91];
		GPIOC->ODR = ppixel[91];

		GPIOC->ODR = ppixel[92];
		GPIOC->ODR = ppixel[92];

		GPIOC->ODR = ppixel[93];
		GPIOC->ODR = ppixel[93];

		GPIOC->ODR = ppixel[94];
		GPIOC->ODR = ppixel[94];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[95];
		GPIOC->ODR = ppixel[95];

		GPIOC->ODR = ppixel[96];
		GPIOC->ODR = ppixel[96];

		GPIOC->ODR = ppixel[97];
		GPIOC->ODR = ppixel[97];

		GPIOC->ODR = ppixel[98];
		GPIOC->ODR = ppixel[98];

		GPIOC->ODR = ppixel[99];
		GPIOC->ODR = ppixel[99];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[189];
		GPIOC->ODR = Score_val[189];

		GPIOC->ODR = Score_val[190];
		GPIOC->ODR = Score_val[190];

		GPIOC->ODR = Score_val[191];
		GPIOC->ODR = Score_val[191];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[192];
		GPIOC->ODR = Score_val[192];

		GPIOC->ODR = Score_val[193];
		GPIOC->ODR = Score_val[193];

		GPIOC->ODR = Score_val[194];
		GPIOC->ODR = Score_val[194];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[195];
		GPIOC->ODR = Score_val[195];

		GPIOC->ODR = Score_val[196];
		GPIOC->ODR = Score_val[196];

		GPIOC->ODR = Score_val[197];
		GPIOC->ODR = Score_val[197];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 250 ... 254: //55c

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[100];
		GPIOC->ODR = ppixel[100];

		GPIOC->ODR = ppixel[101];
		GPIOC->ODR = ppixel[101];

		GPIOC->ODR = ppixel[102];
		GPIOC->ODR = ppixel[102];

		GPIOC->ODR = ppixel[103];
		GPIOC->ODR = ppixel[103];

		GPIOC->ODR = ppixel[104];
		GPIOC->ODR = ppixel[104];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[105];
		GPIOC->ODR = ppixel[105];

		GPIOC->ODR = ppixel[106];
		GPIOC->ODR = ppixel[106];

		GPIOC->ODR = ppixel[107];
		GPIOC->ODR = ppixel[107];

		GPIOC->ODR = ppixel[108];
		GPIOC->ODR = ppixel[108];

		GPIOC->ODR = ppixel[109];
		GPIOC->ODR = ppixel[109];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[110];
		GPIOC->ODR = ppixel[110];

		GPIOC->ODR = ppixel[111];
		GPIOC->ODR = ppixel[111];

		GPIOC->ODR = ppixel[112];
		GPIOC->ODR = ppixel[112];

		GPIOC->ODR = ppixel[113];
		GPIOC->ODR = ppixel[113];

		GPIOC->ODR = ppixel[114];
		GPIOC->ODR = ppixel[114];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[115];
		GPIOC->ODR = ppixel[115];

		GPIOC->ODR = ppixel[116];
		GPIOC->ODR = ppixel[116];

		GPIOC->ODR = ppixel[117];
		GPIOC->ODR = ppixel[117];

		GPIOC->ODR = ppixel[118];
		GPIOC->ODR = ppixel[118];

		GPIOC->ODR = ppixel[119];
		GPIOC->ODR = ppixel[119];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[120];
		GPIOC->ODR = ppixel[120];

		GPIOC->ODR = ppixel[121];
		GPIOC->ODR = ppixel[121];

		GPIOC->ODR = ppixel[122];
		GPIOC->ODR = ppixel[122];

		GPIOC->ODR = ppixel[123];
		GPIOC->ODR = ppixel[123];

		GPIOC->ODR = ppixel[124];
		GPIOC->ODR = ppixel[124];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[125];
		GPIOC->ODR = ppixel[125];

		GPIOC->ODR = ppixel[126];
		GPIOC->ODR = ppixel[126];

		GPIOC->ODR = ppixel[127];
		GPIOC->ODR = ppixel[127];

		GPIOC->ODR = ppixel[128];
		GPIOC->ODR = ppixel[128];

		GPIOC->ODR = ppixel[129];
		GPIOC->ODR = ppixel[129];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[130];
		GPIOC->ODR = ppixel[130];

		GPIOC->ODR = ppixel[131];
		GPIOC->ODR = ppixel[131];

		GPIOC->ODR = ppixel[132];
		GPIOC->ODR = ppixel[132];

		GPIOC->ODR = ppixel[133];
		GPIOC->ODR = ppixel[133];

		GPIOC->ODR = ppixel[134];
		GPIOC->ODR = ppixel[134];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[135];
		GPIOC->ODR = ppixel[135];

		GPIOC->ODR = ppixel[136];
		GPIOC->ODR = ppixel[136];

		GPIOC->ODR = ppixel[137];
		GPIOC->ODR = ppixel[137];

		GPIOC->ODR = ppixel[138];
		GPIOC->ODR = ppixel[138];

		GPIOC->ODR = ppixel[139];
		GPIOC->ODR = ppixel[139];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[140];
		GPIOC->ODR = ppixel[140];

		GPIOC->ODR = ppixel[141];
		GPIOC->ODR = ppixel[141];

		GPIOC->ODR = ppixel[142];
		GPIOC->ODR = ppixel[142];

		GPIOC->ODR = ppixel[143];
		GPIOC->ODR = ppixel[143];

		GPIOC->ODR = ppixel[144];
		GPIOC->ODR = ppixel[144];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[145];
		GPIOC->ODR = ppixel[145];

		GPIOC->ODR = ppixel[146];
		GPIOC->ODR = ppixel[146];

		GPIOC->ODR = ppixel[147];
		GPIOC->ODR = ppixel[147];

		GPIOC->ODR = ppixel[148];
		GPIOC->ODR = ppixel[148];

		GPIOC->ODR = ppixel[149];
		GPIOC->ODR = ppixel[149];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[198];
		GPIOC->ODR = Score_val[198];

		GPIOC->ODR = Score_val[199];
		GPIOC->ODR = Score_val[199];

		GPIOC->ODR = Score_val[200];
		GPIOC->ODR = Score_val[200];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[201];
		GPIOC->ODR = Score_val[201];

		GPIOC->ODR = Score_val[202];
		GPIOC->ODR = Score_val[202];

		GPIOC->ODR = Score_val[203];
		GPIOC->ODR = Score_val[203];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[204];
		GPIOC->ODR = Score_val[204];

		GPIOC->ODR = Score_val[205];
		GPIOC->ODR = Score_val[205];

		GPIOC->ODR = Score_val[206];
		GPIOC->ODR = Score_val[206];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 255 ... 259: //55d


		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[150];
		GPIOC->ODR = ppixel[150];

		GPIOC->ODR = ppixel[151];
		GPIOC->ODR = ppixel[151];

		GPIOC->ODR = ppixel[152];
		GPIOC->ODR = ppixel[152];

		GPIOC->ODR = ppixel[153];
		GPIOC->ODR = ppixel[153];

		GPIOC->ODR = ppixel[154];
		GPIOC->ODR = ppixel[154];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[155];
		GPIOC->ODR = ppixel[155];

		GPIOC->ODR = ppixel[156];
		GPIOC->ODR = ppixel[156];

		GPIOC->ODR = ppixel[157];
		GPIOC->ODR = ppixel[157];

		GPIOC->ODR = ppixel[158];
		GPIOC->ODR = ppixel[158];

		GPIOC->ODR = ppixel[159];
		GPIOC->ODR = ppixel[159];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[160];
		GPIOC->ODR = ppixel[160];

		GPIOC->ODR = ppixel[161];
		GPIOC->ODR = ppixel[161];

		GPIOC->ODR = ppixel[162];
		GPIOC->ODR = ppixel[162];

		GPIOC->ODR = ppixel[163];
		GPIOC->ODR = ppixel[163];

		GPIOC->ODR = ppixel[164];
		GPIOC->ODR = ppixel[164];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[165];
		GPIOC->ODR = ppixel[165];

		GPIOC->ODR = ppixel[166];
		GPIOC->ODR = ppixel[166];

		GPIOC->ODR = ppixel[167];
		GPIOC->ODR = ppixel[167];

		GPIOC->ODR = ppixel[168];
		GPIOC->ODR = ppixel[168];

		GPIOC->ODR = ppixel[169];
		GPIOC->ODR = ppixel[169];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[170];
		GPIOC->ODR = ppixel[170];

		GPIOC->ODR = ppixel[171];
		GPIOC->ODR = ppixel[171];

		GPIOC->ODR = ppixel[172];
		GPIOC->ODR = ppixel[172];

		GPIOC->ODR = ppixel[173];
		GPIOC->ODR = ppixel[173];

		GPIOC->ODR = ppixel[174];
		GPIOC->ODR = ppixel[174];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[175];
		GPIOC->ODR = ppixel[175];

		GPIOC->ODR = ppixel[176];
		GPIOC->ODR = ppixel[176];

		GPIOC->ODR = ppixel[177];
		GPIOC->ODR = ppixel[177];

		GPIOC->ODR = ppixel[178];
		GPIOC->ODR = ppixel[178];

		GPIOC->ODR = ppixel[179];
		GPIOC->ODR = ppixel[179];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[180];
		GPIOC->ODR = ppixel[180];

		GPIOC->ODR = ppixel[181];
		GPIOC->ODR = ppixel[181];

		GPIOC->ODR = ppixel[182];
		GPIOC->ODR = ppixel[182];

		GPIOC->ODR = ppixel[183];
		GPIOC->ODR = ppixel[183];

		GPIOC->ODR = ppixel[184];
		GPIOC->ODR = ppixel[184];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[185];
		GPIOC->ODR = ppixel[185];

		GPIOC->ODR = ppixel[186];
		GPIOC->ODR = ppixel[186];

		GPIOC->ODR = ppixel[187];
		GPIOC->ODR = ppixel[187];

		GPIOC->ODR = ppixel[188];
		GPIOC->ODR = ppixel[188];

		GPIOC->ODR = ppixel[189];
		GPIOC->ODR = ppixel[189];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[190];
		GPIOC->ODR = ppixel[190];

		GPIOC->ODR = ppixel[191];
		GPIOC->ODR = ppixel[191];

		GPIOC->ODR = ppixel[192];
		GPIOC->ODR = ppixel[192];

		GPIOC->ODR = ppixel[193];
		GPIOC->ODR = ppixel[193];

		GPIOC->ODR = ppixel[194];
		GPIOC->ODR = ppixel[194];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[195];
		GPIOC->ODR = ppixel[195];

		GPIOC->ODR = ppixel[196];
		GPIOC->ODR = ppixel[196];

		GPIOC->ODR = ppixel[197];
		GPIOC->ODR = ppixel[197];

		GPIOC->ODR = ppixel[198];
		GPIOC->ODR = ppixel[198];

		GPIOC->ODR = ppixel[199];
		GPIOC->ODR = ppixel[199];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[207];
		GPIOC->ODR = Score_val[207];

		GPIOC->ODR = Score_val[208];
		GPIOC->ODR = Score_val[208];

		GPIOC->ODR = Score_val[209];
		GPIOC->ODR = Score_val[209];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[210];
		GPIOC->ODR = Score_val[210];

		GPIOC->ODR = Score_val[211];
		GPIOC->ODR = Score_val[211];

		GPIOC->ODR = Score_val[212];
		GPIOC->ODR = Score_val[212];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[213];
		GPIOC->ODR = Score_val[213];

		GPIOC->ODR = Score_val[214];
		GPIOC->ODR = Score_val[214];

		GPIOC->ODR = Score_val[215];
		GPIOC->ODR = Score_val[215];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 260 ... 264: //55e

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green; // dot
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[200];
		GPIOC->ODR = ppixel[200];

		GPIOC->ODR = ppixel[201];
		GPIOC->ODR = ppixel[201];

		GPIOC->ODR = ppixel[202];
		GPIOC->ODR = ppixel[202];

		GPIOC->ODR = ppixel[203];
		GPIOC->ODR = ppixel[203];

		GPIOC->ODR = ppixel[204];
		GPIOC->ODR = ppixel[204];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[205];
		GPIOC->ODR = ppixel[205];

		GPIOC->ODR = ppixel[206];
		GPIOC->ODR = ppixel[206];

		GPIOC->ODR = ppixel[207];
		GPIOC->ODR = ppixel[207];

		GPIOC->ODR = ppixel[208];
		GPIOC->ODR = ppixel[208];

		GPIOC->ODR = ppixel[209];
		GPIOC->ODR = ppixel[209];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[210];
		GPIOC->ODR = ppixel[210];

		GPIOC->ODR = ppixel[211];
		GPIOC->ODR = ppixel[211];

		GPIOC->ODR = ppixel[212];
		GPIOC->ODR = ppixel[212];

		GPIOC->ODR = ppixel[213];
		GPIOC->ODR = ppixel[213];

		GPIOC->ODR = ppixel[214];
		GPIOC->ODR = ppixel[214];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[215];
		GPIOC->ODR = ppixel[215];

		GPIOC->ODR = ppixel[216];
		GPIOC->ODR = ppixel[216];

		GPIOC->ODR = ppixel[217];
		GPIOC->ODR = ppixel[217];

		GPIOC->ODR = ppixel[218];
		GPIOC->ODR = ppixel[218];

		GPIOC->ODR = ppixel[219];
		GPIOC->ODR = ppixel[219];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[220];
		GPIOC->ODR = ppixel[220];

		GPIOC->ODR = ppixel[221];
		GPIOC->ODR = ppixel[221];

		GPIOC->ODR = ppixel[222];
		GPIOC->ODR = ppixel[222];

		GPIOC->ODR = ppixel[223];
		GPIOC->ODR = ppixel[223];

		GPIOC->ODR = ppixel[224];
		GPIOC->ODR = ppixel[224];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[225];
		GPIOC->ODR = ppixel[225];

		GPIOC->ODR = ppixel[226];
		GPIOC->ODR = ppixel[226];

		GPIOC->ODR = ppixel[227];
		GPIOC->ODR = ppixel[227];

		GPIOC->ODR = ppixel[228];
		GPIOC->ODR = ppixel[228];

		GPIOC->ODR = ppixel[229];
		GPIOC->ODR = ppixel[229];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[230];
		GPIOC->ODR = ppixel[230];

		GPIOC->ODR = ppixel[231];
		GPIOC->ODR = ppixel[231];

		GPIOC->ODR = ppixel[232];
		GPIOC->ODR = ppixel[232];

		GPIOC->ODR = ppixel[233];
		GPIOC->ODR = ppixel[233];

		GPIOC->ODR = ppixel[234];
		GPIOC->ODR = ppixel[234];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[235];
		GPIOC->ODR = ppixel[235];

		GPIOC->ODR = ppixel[236];
		GPIOC->ODR = ppixel[236];

		GPIOC->ODR = ppixel[237];
		GPIOC->ODR = ppixel[237];

		GPIOC->ODR = ppixel[238];
		GPIOC->ODR = ppixel[238];

		GPIOC->ODR = ppixel[239];
		GPIOC->ODR = ppixel[239];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[240];
		GPIOC->ODR = ppixel[240];

		GPIOC->ODR = ppixel[241];
		GPIOC->ODR = ppixel[241];

		GPIOC->ODR = ppixel[242];
		GPIOC->ODR = ppixel[242];

		GPIOC->ODR = ppixel[243];
		GPIOC->ODR = ppixel[243];

		GPIOC->ODR = ppixel[244];
		GPIOC->ODR = ppixel[244];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[245];
		GPIOC->ODR = ppixel[245];

		GPIOC->ODR = ppixel[246];
		GPIOC->ODR = ppixel[246];

		GPIOC->ODR = ppixel[247];
		GPIOC->ODR = ppixel[247];

		GPIOC->ODR = ppixel[248];
		GPIOC->ODR = ppixel[248];

		GPIOC->ODR = ppixel[249];
		GPIOC->ODR = ppixel[249];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[216];
		GPIOC->ODR = Score_val[216];

		GPIOC->ODR = Score_val[217];
		GPIOC->ODR = Score_val[217];

		GPIOC->ODR = Score_val[218];
		GPIOC->ODR = Score_val[218];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[219];
		GPIOC->ODR = Score_val[219];

		GPIOC->ODR = Score_val[220];
		GPIOC->ODR = Score_val[220];

		GPIOC->ODR = Score_val[221];
		GPIOC->ODR = Score_val[221];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[222];
		GPIOC->ODR = Score_val[222];

		GPIOC->ODR = Score_val[223];
		GPIOC->ODR = Score_val[223];

		GPIOC->ODR = Score_val[224];
		GPIOC->ODR = Score_val[224];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 265 ... 269:
//		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		while(waste_of_time<51)
		{
			GPIOC->ODR = Deep_Green;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = White_OFF;
		break;
		case 270 ... 270:
		GPIOC->ODR = White_OFF;
		break;
		case 271 ... 274:
//		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		while(waste_of_time<49)
		{
			GPIOC->ODR = Deep_Green;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = White_OFF;
		break;
		}
		break;
		break;
	}//55a switch
		} // visko piesimo switch
	break; // nulinto page break;
	case 1:
		switch(Lines)
		{
		case 0 ... 30:
		GPIOC->ODR &= White_OFF;
		break;
		case 31 ... 55: //scorecase = 1
		while(waste_of_time<18)
		{
			GPIOC->ODR &= White_OFF;
			waste_of_time++;
		}
		waste_of_time = 0;
		switch(Lines)
		{
		case 31 ... 35: //SSS1
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//CCC1

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//OOO1

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR1

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE1

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::1

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 36 ... 40: //SSS2
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //CCC2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //OOO2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::2

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		break;
		case 41 ... 45:
		GPIOC->ODR = White_OFF; //SSS3
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //CCC3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //OOO3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::3

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		break;
		case 46 ... 50:
		GPIOC->ODR = White_OFF; //SSS4
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //CCC4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //OOO4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::4

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		break;
		case 51 ... 55:
		GPIOC->ODR = Deep_Green; //SSS5
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = White_OFF; //CCC5
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//OOO5

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR5

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE5

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::5

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		}
		break;
		case 95 ... 600: //scorecase = 2
		while(waste_of_time<1)
		{
			GPIOC->ODR &= White_OFF;
			waste_of_time++;
		}
		waste_of_time = 0;
		switch(Lines)
		{
		case 95 ... 134:
		switch(Lines)
			{
			case 95  ... 99:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 100 ... 104: //66a


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[0]; // first pixel of first letter of first rank
			GPIOC->ODR = pixel[0];

			GPIOC->ODR = pixel[1];
			GPIOC->ODR = pixel[1];

			GPIOC->ODR = pixel[2];
			GPIOC->ODR = pixel[2];

			GPIOC->ODR = pixel[3];
			GPIOC->ODR = pixel[3];

			GPIOC->ODR = pixel[4];
			GPIOC->ODR = pixel[4];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[5];
			GPIOC->ODR = pixel[5];

			GPIOC->ODR = pixel[6];
			GPIOC->ODR = pixel[6];

			GPIOC->ODR = pixel[7];
			GPIOC->ODR = pixel[7];

			GPIOC->ODR = pixel[8];
			GPIOC->ODR = pixel[8];

			GPIOC->ODR = pixel[9];
			GPIOC->ODR = pixel[9];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[10];
			GPIOC->ODR = pixel[10];

			GPIOC->ODR = pixel[11];
			GPIOC->ODR = pixel[11];

			GPIOC->ODR = pixel[12];
			GPIOC->ODR = pixel[12];

			GPIOC->ODR = pixel[13];
			GPIOC->ODR = pixel[13];

			GPIOC->ODR = pixel[14];
			GPIOC->ODR = pixel[14];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[15];
			GPIOC->ODR = pixel[15];

			GPIOC->ODR = pixel[16];
			GPIOC->ODR = pixel[16];

			GPIOC->ODR = pixel[17];
			GPIOC->ODR = pixel[17];

			GPIOC->ODR = pixel[18];
			GPIOC->ODR = pixel[18];

			GPIOC->ODR = pixel[19];
			GPIOC->ODR = pixel[19];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[20];
			GPIOC->ODR = pixel[20];

			GPIOC->ODR = pixel[21];
			GPIOC->ODR = pixel[21];

			GPIOC->ODR = pixel[22];
			GPIOC->ODR = pixel[22];

			GPIOC->ODR = pixel[23];
			GPIOC->ODR = pixel[23];

			GPIOC->ODR = pixel[24];
			GPIOC->ODR = pixel[24];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[25];
			GPIOC->ODR = pixel[25];

			GPIOC->ODR = pixel[26];
			GPIOC->ODR = pixel[26];

			GPIOC->ODR = pixel[27];
			GPIOC->ODR = pixel[27];

			GPIOC->ODR = pixel[28];
			GPIOC->ODR = pixel[28];

			GPIOC->ODR = pixel[29];
			GPIOC->ODR = pixel[29];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[30];
			GPIOC->ODR = pixel[30];

			GPIOC->ODR = pixel[31];
			GPIOC->ODR = pixel[31];

			GPIOC->ODR = pixel[32];
			GPIOC->ODR = pixel[32];

			GPIOC->ODR = pixel[33];
			GPIOC->ODR = pixel[33];

			GPIOC->ODR = pixel[34];
			GPIOC->ODR = pixel[34];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[35];
			GPIOC->ODR = pixel[35];

			GPIOC->ODR = pixel[36];
			GPIOC->ODR = pixel[36];

			GPIOC->ODR = pixel[37];
			GPIOC->ODR = pixel[37];

			GPIOC->ODR = pixel[38];
			GPIOC->ODR = pixel[38];

			GPIOC->ODR = pixel[39];
			GPIOC->ODR = pixel[39];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[40];
			GPIOC->ODR = pixel[40];

			GPIOC->ODR = pixel[41];
			GPIOC->ODR = pixel[41];

			GPIOC->ODR = pixel[42];
			GPIOC->ODR = pixel[42];

			GPIOC->ODR = pixel[43];
			GPIOC->ODR = pixel[43];

			GPIOC->ODR = pixel[44];
			GPIOC->ODR = pixel[44];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[45];
			GPIOC->ODR = pixel[45];

			GPIOC->ODR = pixel[46];
			GPIOC->ODR = pixel[46];

			GPIOC->ODR = pixel[47];
			GPIOC->ODR = pixel[47];

			GPIOC->ODR = pixel[48];
			GPIOC->ODR = pixel[48];

			GPIOC->ODR = pixel[49];
			GPIOC->ODR = pixel[49];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[0];
			GPIOC->ODR = Score_val[0];

			GPIOC->ODR = Score_val[1];
			GPIOC->ODR = Score_val[1];

			GPIOC->ODR = Score_val[2];
			GPIOC->ODR = Score_val[2];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[3];
			GPIOC->ODR = Score_val[3];

			GPIOC->ODR = Score_val[4];
			GPIOC->ODR = Score_val[4];

			GPIOC->ODR = Score_val[5];
			GPIOC->ODR = Score_val[5];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[6];
			GPIOC->ODR = Score_val[6];

			GPIOC->ODR = Score_val[7];
			GPIOC->ODR = Score_val[7];

			GPIOC->ODR = Score_val[8];
			GPIOC->ODR = Score_val[8];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			break;
			case 105 ... 109: //66b


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[50];
			GPIOC->ODR = pixel[50];

			GPIOC->ODR = pixel[51];
			GPIOC->ODR = pixel[51];

			GPIOC->ODR = pixel[52];
			GPIOC->ODR = pixel[52];

			GPIOC->ODR = pixel[53];
			GPIOC->ODR = pixel[53];

			GPIOC->ODR = pixel[54];
			GPIOC->ODR = pixel[54];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[55];
			GPIOC->ODR = pixel[55];

			GPIOC->ODR = pixel[56];
			GPIOC->ODR = pixel[56];

			GPIOC->ODR = pixel[57];
			GPIOC->ODR = pixel[57];

			GPIOC->ODR = pixel[58];
			GPIOC->ODR = pixel[58];

			GPIOC->ODR = pixel[59];
			GPIOC->ODR = pixel[59];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[60];
			GPIOC->ODR = pixel[60];

			GPIOC->ODR = pixel[61];
			GPIOC->ODR = pixel[61];

			GPIOC->ODR = pixel[62];
			GPIOC->ODR = pixel[62];

			GPIOC->ODR = pixel[63];
			GPIOC->ODR = pixel[63];

			GPIOC->ODR = pixel[64];
			GPIOC->ODR = pixel[64];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[65];
			GPIOC->ODR = pixel[65];

			GPIOC->ODR = pixel[66];
			GPIOC->ODR = pixel[66];

			GPIOC->ODR = pixel[67];
			GPIOC->ODR = pixel[67];

			GPIOC->ODR = pixel[68];
			GPIOC->ODR = pixel[68];

			GPIOC->ODR = pixel[69];
			GPIOC->ODR = pixel[69];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[70];
			GPIOC->ODR = pixel[70];

			GPIOC->ODR = pixel[71];
			GPIOC->ODR = pixel[71];

			GPIOC->ODR = pixel[72];
			GPIOC->ODR = pixel[72];

			GPIOC->ODR = pixel[73];
			GPIOC->ODR = pixel[73];

			GPIOC->ODR = pixel[74];
			GPIOC->ODR = pixel[74];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[75];
			GPIOC->ODR = pixel[75];

			GPIOC->ODR = pixel[76];
			GPIOC->ODR = pixel[76];

			GPIOC->ODR = pixel[77];
			GPIOC->ODR = pixel[77];

			GPIOC->ODR = pixel[78];
			GPIOC->ODR = pixel[78];

			GPIOC->ODR = pixel[79];
			GPIOC->ODR = pixel[79];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[80];
			GPIOC->ODR = pixel[80];

			GPIOC->ODR = pixel[81];
			GPIOC->ODR = pixel[81];

			GPIOC->ODR = pixel[82];
			GPIOC->ODR = pixel[82];

			GPIOC->ODR = pixel[83];
			GPIOC->ODR = pixel[83];

			GPIOC->ODR = pixel[84];
			GPIOC->ODR = pixel[84];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[85];
			GPIOC->ODR = pixel[85];

			GPIOC->ODR = pixel[86];
			GPIOC->ODR = pixel[86];

			GPIOC->ODR = pixel[87];
			GPIOC->ODR = pixel[87];

			GPIOC->ODR = pixel[88];
			GPIOC->ODR = pixel[88];

			GPIOC->ODR = pixel[89];
			GPIOC->ODR = pixel[89];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[90];
			GPIOC->ODR = pixel[90];

			GPIOC->ODR = pixel[91];
			GPIOC->ODR = pixel[91];

			GPIOC->ODR = pixel[92];
			GPIOC->ODR = pixel[92];

			GPIOC->ODR = pixel[93];
			GPIOC->ODR = pixel[93];

			GPIOC->ODR = pixel[94];
			GPIOC->ODR = pixel[94];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[95];
			GPIOC->ODR = pixel[95];

			GPIOC->ODR = pixel[96];
			GPIOC->ODR = pixel[96];

			GPIOC->ODR = pixel[97];
			GPIOC->ODR = pixel[97];

			GPIOC->ODR = pixel[98];
			GPIOC->ODR = pixel[98];

			GPIOC->ODR = pixel[99];
			GPIOC->ODR = pixel[99];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[9];
			GPIOC->ODR = Score_val[9];

			GPIOC->ODR = Score_val[10];
			GPIOC->ODR = Score_val[10];

			GPIOC->ODR = Score_val[11];
			GPIOC->ODR = Score_val[11];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[12];
			GPIOC->ODR = Score_val[12];

			GPIOC->ODR = Score_val[13];
			GPIOC->ODR = Score_val[13];

			GPIOC->ODR = Score_val[14];
			GPIOC->ODR = Score_val[14];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[15];
			GPIOC->ODR = Score_val[15];

			GPIOC->ODR = Score_val[16];
			GPIOC->ODR = Score_val[16];

			GPIOC->ODR = Score_val[17];
			GPIOC->ODR = Score_val[17];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 110 ... 114: //66c


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[100];
			GPIOC->ODR = pixel[100];

			GPIOC->ODR = pixel[101];
			GPIOC->ODR = pixel[101];

			GPIOC->ODR = pixel[102];
			GPIOC->ODR = pixel[102];

			GPIOC->ODR = pixel[103];
			GPIOC->ODR = pixel[103];

			GPIOC->ODR = pixel[104];
			GPIOC->ODR = pixel[104];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[105];
			GPIOC->ODR = pixel[105];

			GPIOC->ODR = pixel[106];
			GPIOC->ODR = pixel[106];

			GPIOC->ODR = pixel[107];
			GPIOC->ODR = pixel[107];

			GPIOC->ODR = pixel[108];
			GPIOC->ODR = pixel[108];

			GPIOC->ODR = pixel[109];
			GPIOC->ODR = pixel[109];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[110];
			GPIOC->ODR = pixel[110];

			GPIOC->ODR = pixel[111];
			GPIOC->ODR = pixel[111];

			GPIOC->ODR = pixel[112];
			GPIOC->ODR = pixel[112];

			GPIOC->ODR = pixel[113];
			GPIOC->ODR = pixel[113];

			GPIOC->ODR = pixel[114];
			GPIOC->ODR = pixel[114];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[115];
			GPIOC->ODR = pixel[115];

			GPIOC->ODR = pixel[116];
			GPIOC->ODR = pixel[116];

			GPIOC->ODR = pixel[117];
			GPIOC->ODR = pixel[117];

			GPIOC->ODR = pixel[118];
			GPIOC->ODR = pixel[118];

			GPIOC->ODR = pixel[119];
			GPIOC->ODR = pixel[119];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[120];
			GPIOC->ODR = pixel[120];

			GPIOC->ODR = pixel[121];
			GPIOC->ODR = pixel[121];

			GPIOC->ODR = pixel[122];
			GPIOC->ODR = pixel[122];

			GPIOC->ODR = pixel[123];
			GPIOC->ODR = pixel[123];

			GPIOC->ODR = pixel[124];
			GPIOC->ODR = pixel[124];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[125];
			GPIOC->ODR = pixel[125];

			GPIOC->ODR = pixel[126];
			GPIOC->ODR = pixel[126];

			GPIOC->ODR = pixel[127];
			GPIOC->ODR = pixel[127];

			GPIOC->ODR = pixel[128];
			GPIOC->ODR = pixel[128];

			GPIOC->ODR = pixel[129];
			GPIOC->ODR = pixel[129];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[130];
			GPIOC->ODR = pixel[130];

			GPIOC->ODR = pixel[131];
			GPIOC->ODR = pixel[131];

			GPIOC->ODR = pixel[132];
			GPIOC->ODR = pixel[132];

			GPIOC->ODR = pixel[133];
			GPIOC->ODR = pixel[133];

			GPIOC->ODR = pixel[134];
			GPIOC->ODR = pixel[134];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[135];
			GPIOC->ODR = pixel[135];

			GPIOC->ODR = pixel[136];
			GPIOC->ODR = pixel[136];

			GPIOC->ODR = pixel[137];
			GPIOC->ODR = pixel[137];

			GPIOC->ODR = pixel[138];
			GPIOC->ODR = pixel[138];

			GPIOC->ODR = pixel[139];
			GPIOC->ODR = pixel[139];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[140];
			GPIOC->ODR = pixel[140];

			GPIOC->ODR = pixel[141];
			GPIOC->ODR = pixel[141];

			GPIOC->ODR = pixel[142];
			GPIOC->ODR = pixel[142];

			GPIOC->ODR = pixel[143];
			GPIOC->ODR = pixel[143];

			GPIOC->ODR = pixel[144];
			GPIOC->ODR = pixel[144];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[145];
			GPIOC->ODR = pixel[145];

			GPIOC->ODR = pixel[146];
			GPIOC->ODR = pixel[146];

			GPIOC->ODR = pixel[147];
			GPIOC->ODR = pixel[147];

			GPIOC->ODR = pixel[148];
			GPIOC->ODR = pixel[148];

			GPIOC->ODR = pixel[149];
			GPIOC->ODR = pixel[149];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[18];
			GPIOC->ODR = Score_val[19];

			GPIOC->ODR = Score_val[19];
			GPIOC->ODR = Score_val[19];

			GPIOC->ODR = Score_val[20];
			GPIOC->ODR = Score_val[20];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[21];
			GPIOC->ODR = Score_val[21];

			GPIOC->ODR = Score_val[22];
			GPIOC->ODR = Score_val[22];

			GPIOC->ODR = Score_val[23];
			GPIOC->ODR = Score_val[23];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[24];
			GPIOC->ODR = Score_val[24];

			GPIOC->ODR = Score_val[25];
			GPIOC->ODR = Score_val[25];

			GPIOC->ODR = Score_val[26];
			GPIOC->ODR = Score_val[26];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 115 ... 119://66d


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[150];
			GPIOC->ODR = pixel[150];

			GPIOC->ODR = pixel[151];
			GPIOC->ODR = pixel[151];

			GPIOC->ODR = pixel[152];
			GPIOC->ODR = pixel[152];

			GPIOC->ODR = pixel[153];
			GPIOC->ODR = pixel[153];

			GPIOC->ODR = pixel[154];
			GPIOC->ODR = pixel[154];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[155];
			GPIOC->ODR = pixel[155];

			GPIOC->ODR = pixel[156];
			GPIOC->ODR = pixel[156];

			GPIOC->ODR = pixel[157];
			GPIOC->ODR = pixel[157];

			GPIOC->ODR = pixel[158];
			GPIOC->ODR = pixel[158];

			GPIOC->ODR = pixel[159];
			GPIOC->ODR = pixel[159];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[160];
			GPIOC->ODR = pixel[160];

			GPIOC->ODR = pixel[161];
			GPIOC->ODR = pixel[161];

			GPIOC->ODR = pixel[162];
			GPIOC->ODR = pixel[162];

			GPIOC->ODR = pixel[163];
			GPIOC->ODR = pixel[163];

			GPIOC->ODR = pixel[164];
			GPIOC->ODR = pixel[164];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[165];
			GPIOC->ODR = pixel[165];

			GPIOC->ODR = pixel[166];
			GPIOC->ODR = pixel[166];

			GPIOC->ODR = pixel[167];
			GPIOC->ODR = pixel[167];

			GPIOC->ODR = pixel[168];
			GPIOC->ODR = pixel[168];

			GPIOC->ODR = pixel[169];
			GPIOC->ODR = pixel[169];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[170];
			GPIOC->ODR = pixel[170];

			GPIOC->ODR = pixel[171];
			GPIOC->ODR = pixel[171];

			GPIOC->ODR = pixel[172];
			GPIOC->ODR = pixel[172];

			GPIOC->ODR = pixel[173];
			GPIOC->ODR = pixel[173];

			GPIOC->ODR = pixel[174];
			GPIOC->ODR = pixel[174];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[175];
			GPIOC->ODR = pixel[175];

			GPIOC->ODR = pixel[176];
			GPIOC->ODR = pixel[176];

			GPIOC->ODR = pixel[177];
			GPIOC->ODR = pixel[177];

			GPIOC->ODR = pixel[178];
			GPIOC->ODR = pixel[178];

			GPIOC->ODR = pixel[179];
			GPIOC->ODR = pixel[179];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[180];
			GPIOC->ODR = pixel[180];

			GPIOC->ODR = pixel[181];
			GPIOC->ODR = pixel[181];

			GPIOC->ODR = pixel[182];
			GPIOC->ODR = pixel[182];

			GPIOC->ODR = pixel[183];
			GPIOC->ODR = pixel[183];

			GPIOC->ODR = pixel[184];
			GPIOC->ODR = pixel[184];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[185];
			GPIOC->ODR = pixel[185];

			GPIOC->ODR = pixel[186];
			GPIOC->ODR = pixel[186];

			GPIOC->ODR = pixel[187];
			GPIOC->ODR = pixel[187];

			GPIOC->ODR = pixel[188];
			GPIOC->ODR = pixel[188];

			GPIOC->ODR = pixel[189];
			GPIOC->ODR = pixel[189];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[190];
			GPIOC->ODR = pixel[190];

			GPIOC->ODR = pixel[191];
			GPIOC->ODR = pixel[191];

			GPIOC->ODR = pixel[192];
			GPIOC->ODR = pixel[192];

			GPIOC->ODR = pixel[193];
			GPIOC->ODR = pixel[193];

			GPIOC->ODR = pixel[194];
			GPIOC->ODR = pixel[194];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[195];
			GPIOC->ODR = pixel[195];

			GPIOC->ODR = pixel[196];
			GPIOC->ODR = pixel[196];

			GPIOC->ODR = pixel[197];
			GPIOC->ODR = pixel[197];

			GPIOC->ODR = pixel[198];
			GPIOC->ODR = pixel[198];

			GPIOC->ODR = pixel[199];
			GPIOC->ODR = pixel[199];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[27];
			GPIOC->ODR = Score_val[27];

			GPIOC->ODR = Score_val[28];
			GPIOC->ODR = Score_val[28];

			GPIOC->ODR = Score_val[29];
			GPIOC->ODR = Score_val[29];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[30];
			GPIOC->ODR = Score_val[30];

			GPIOC->ODR = Score_val[31];
			GPIOC->ODR = Score_val[31];

			GPIOC->ODR = Score_val[32];
			GPIOC->ODR = Score_val[32];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[33];
			GPIOC->ODR = Score_val[33];

			GPIOC->ODR = Score_val[34];
			GPIOC->ODR = Score_val[34];

			GPIOC->ODR = Score_val[35];
			GPIOC->ODR = Score_val[35];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 120 ... 124://66e

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;//dot
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[200];
			GPIOC->ODR = pixel[200];

			GPIOC->ODR = pixel[201];
			GPIOC->ODR = pixel[201];

			GPIOC->ODR = pixel[202];
			GPIOC->ODR = pixel[202];

			GPIOC->ODR = pixel[203];
			GPIOC->ODR = pixel[203];

			GPIOC->ODR = pixel[204];
			GPIOC->ODR = pixel[204];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[205];
			GPIOC->ODR = pixel[205];

			GPIOC->ODR = pixel[206];
			GPIOC->ODR = pixel[206];

			GPIOC->ODR = pixel[207];
			GPIOC->ODR = pixel[207];

			GPIOC->ODR = pixel[208];
			GPIOC->ODR = pixel[208];

			GPIOC->ODR = pixel[209];
			GPIOC->ODR = pixel[209];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[210];
			GPIOC->ODR = pixel[210];

			GPIOC->ODR = pixel[211];
			GPIOC->ODR = pixel[211];

			GPIOC->ODR = pixel[212];
			GPIOC->ODR = pixel[212];

			GPIOC->ODR = pixel[213];
			GPIOC->ODR = pixel[213];

			GPIOC->ODR = pixel[214];
			GPIOC->ODR = pixel[214];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[215];
			GPIOC->ODR = pixel[215];

			GPIOC->ODR = pixel[216];
			GPIOC->ODR = pixel[216];

			GPIOC->ODR = pixel[217];
			GPIOC->ODR = pixel[217];

			GPIOC->ODR = pixel[218];
			GPIOC->ODR = pixel[218];

			GPIOC->ODR = pixel[219];
			GPIOC->ODR = pixel[219];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[220];
			GPIOC->ODR = pixel[220];

			GPIOC->ODR = pixel[221];
			GPIOC->ODR = pixel[221];

			GPIOC->ODR = pixel[222];
			GPIOC->ODR = pixel[222];

			GPIOC->ODR = pixel[223];
			GPIOC->ODR = pixel[223];

			GPIOC->ODR = pixel[224];
			GPIOC->ODR = pixel[224];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[225];
			GPIOC->ODR = pixel[225];

			GPIOC->ODR = pixel[226];
			GPIOC->ODR = pixel[226];

			GPIOC->ODR = pixel[227];
			GPIOC->ODR = pixel[227];

			GPIOC->ODR = pixel[228];
			GPIOC->ODR = pixel[228];

			GPIOC->ODR = pixel[229];
			GPIOC->ODR = pixel[229];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[230];
			GPIOC->ODR = pixel[230];

			GPIOC->ODR = pixel[231];
			GPIOC->ODR = pixel[231];

			GPIOC->ODR = pixel[232];
			GPIOC->ODR = pixel[232];

			GPIOC->ODR = pixel[233];
			GPIOC->ODR = pixel[233];

			GPIOC->ODR = pixel[234];
			GPIOC->ODR = pixel[234];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[235];
			GPIOC->ODR = pixel[235];

			GPIOC->ODR = pixel[236];
			GPIOC->ODR = pixel[236];

			GPIOC->ODR = pixel[237];
			GPIOC->ODR = pixel[237];

			GPIOC->ODR = pixel[238];
			GPIOC->ODR = pixel[238];

			GPIOC->ODR = pixel[239];
			GPIOC->ODR = pixel[239];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[240];
			GPIOC->ODR = pixel[240];

			GPIOC->ODR = pixel[241];
			GPIOC->ODR = pixel[241];

			GPIOC->ODR = pixel[242];
			GPIOC->ODR = pixel[242];

			GPIOC->ODR = pixel[243];
			GPIOC->ODR = pixel[243];

			GPIOC->ODR = pixel[244];
			GPIOC->ODR = pixel[244];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[245];
			GPIOC->ODR = pixel[245];

			GPIOC->ODR = pixel[246];
			GPIOC->ODR = pixel[246];

			GPIOC->ODR = pixel[247];
			GPIOC->ODR = pixel[247];

			GPIOC->ODR = pixel[248];
			GPIOC->ODR = pixel[248];

			GPIOC->ODR = pixel[249];
			GPIOC->ODR = pixel[249];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[36];
			GPIOC->ODR = Score_val[36];

			GPIOC->ODR = Score_val[37];
			GPIOC->ODR = Score_val[37];

			GPIOC->ODR = Score_val[38];
			GPIOC->ODR = Score_val[38];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[39];
			GPIOC->ODR = Score_val[39];

			GPIOC->ODR = Score_val[40];
			GPIOC->ODR = Score_val[40];

			GPIOC->ODR = Score_val[41];
			GPIOC->ODR = Score_val[41];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[42];
			GPIOC->ODR = Score_val[42];

			GPIOC->ODR = Score_val[43];
			GPIOC->ODR = Score_val[43];

			GPIOC->ODR = Score_val[44];
			GPIOC->ODR = Score_val[44];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 125 ... 129:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 130 ... 130:
			GPIOC->ODR = White_OFF;
			break;
			case 131 ... 134:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;

			}
		break;
		case 135 ... 169: //sevens
			switch(Lines)
			{
			case 135 ... 139:
			GPIOC->ODR = White_OFF; //77a
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[250];
			GPIOC->ODR = pixel[250];

			GPIOC->ODR = pixel[251];
			GPIOC->ODR = pixel[251];

			GPIOC->ODR = pixel[252];
			GPIOC->ODR = pixel[252];

			GPIOC->ODR = pixel[253];
			GPIOC->ODR = pixel[253];

			GPIOC->ODR = pixel[254];
			GPIOC->ODR = pixel[254];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[255];
			GPIOC->ODR = pixel[255];

			GPIOC->ODR = pixel[256];
			GPIOC->ODR = pixel[256];

			GPIOC->ODR = pixel[257];
			GPIOC->ODR = pixel[257];

			GPIOC->ODR = pixel[258];
			GPIOC->ODR = pixel[258];

			GPIOC->ODR = pixel[259];
			GPIOC->ODR = pixel[259];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[260];
			GPIOC->ODR = pixel[260];

			GPIOC->ODR = pixel[261];
			GPIOC->ODR = pixel[261];

			GPIOC->ODR = pixel[262];
			GPIOC->ODR = pixel[262];

			GPIOC->ODR = pixel[263];
			GPIOC->ODR = pixel[263];

			GPIOC->ODR = pixel[264];
			GPIOC->ODR = pixel[264];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[265];
			GPIOC->ODR = pixel[265];

			GPIOC->ODR = pixel[266];
			GPIOC->ODR = pixel[266];

			GPIOC->ODR = pixel[267];
			GPIOC->ODR = pixel[267];

			GPIOC->ODR = pixel[268];
			GPIOC->ODR = pixel[268];

			GPIOC->ODR = pixel[269];
			GPIOC->ODR = pixel[269];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[270];
			GPIOC->ODR = pixel[270];

			GPIOC->ODR = pixel[271];
			GPIOC->ODR = pixel[271];

			GPIOC->ODR = pixel[272];
			GPIOC->ODR = pixel[272];

			GPIOC->ODR = pixel[273];
			GPIOC->ODR = pixel[273];

			GPIOC->ODR = pixel[274];
			GPIOC->ODR = pixel[274];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[275];
			GPIOC->ODR = pixel[275];

			GPIOC->ODR = pixel[276];
			GPIOC->ODR = pixel[276];

			GPIOC->ODR = pixel[277];
			GPIOC->ODR = pixel[277];

			GPIOC->ODR = pixel[278];
			GPIOC->ODR = pixel[278];

			GPIOC->ODR = pixel[279];
			GPIOC->ODR = pixel[279];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[280];
			GPIOC->ODR = pixel[280];

			GPIOC->ODR = pixel[281];
			GPIOC->ODR = pixel[281];

			GPIOC->ODR = pixel[282];
			GPIOC->ODR = pixel[282];

			GPIOC->ODR = pixel[283];
			GPIOC->ODR = pixel[283];

			GPIOC->ODR = pixel[284];
			GPIOC->ODR = pixel[284];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[285];
			GPIOC->ODR = pixel[285];

			GPIOC->ODR = pixel[286];
			GPIOC->ODR = pixel[286];

			GPIOC->ODR = pixel[287];
			GPIOC->ODR = pixel[287];

			GPIOC->ODR = pixel[288];
			GPIOC->ODR = pixel[288];

			GPIOC->ODR = pixel[289];
			GPIOC->ODR = pixel[289];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[290];
			GPIOC->ODR = pixel[290];

			GPIOC->ODR = pixel[291];
			GPIOC->ODR = pixel[291];

			GPIOC->ODR = pixel[292];
			GPIOC->ODR = pixel[292];

			GPIOC->ODR = pixel[293];
			GPIOC->ODR = pixel[293];

			GPIOC->ODR = pixel[294];
			GPIOC->ODR = pixel[294];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[295];
			GPIOC->ODR = pixel[295];

			GPIOC->ODR = pixel[296];
			GPIOC->ODR = pixel[296];

			GPIOC->ODR = pixel[297];
			GPIOC->ODR = pixel[297];

			GPIOC->ODR = pixel[298];
			GPIOC->ODR = pixel[298];

			GPIOC->ODR = pixel[299];
			GPIOC->ODR = pixel[299];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[45];
			GPIOC->ODR = Score_val[45];

			GPIOC->ODR = Score_val[46];
			GPIOC->ODR = Score_val[46];

			GPIOC->ODR = Score_val[47];
			GPIOC->ODR = Score_val[47];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[48];
			GPIOC->ODR = Score_val[48];

			GPIOC->ODR = Score_val[49];
			GPIOC->ODR = Score_val[49];

			GPIOC->ODR = Score_val[50];
			GPIOC->ODR = Score_val[50];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[51];
			GPIOC->ODR = Score_val[51];

			GPIOC->ODR = Score_val[52];
			GPIOC->ODR = Score_val[52];

			GPIOC->ODR = Score_val[53];
			GPIOC->ODR = Score_val[53];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 140 ... 144: //77b


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[300];
			GPIOC->ODR = pixel[300];

			GPIOC->ODR = pixel[301];
			GPIOC->ODR = pixel[301];

			GPIOC->ODR = pixel[302];
			GPIOC->ODR = pixel[302];

			GPIOC->ODR = pixel[303];
			GPIOC->ODR = pixel[303];

			GPIOC->ODR = pixel[304];
			GPIOC->ODR = pixel[304];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[305];
			GPIOC->ODR = pixel[305];

			GPIOC->ODR = pixel[306];
			GPIOC->ODR = pixel[306];

			GPIOC->ODR = pixel[307];
			GPIOC->ODR = pixel[307];

			GPIOC->ODR = pixel[308];
			GPIOC->ODR = pixel[308];

			GPIOC->ODR = pixel[309];
			GPIOC->ODR = pixel[309];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[310];
			GPIOC->ODR = pixel[310];

			GPIOC->ODR = pixel[311];
			GPIOC->ODR = pixel[311];

			GPIOC->ODR = pixel[312];
			GPIOC->ODR = pixel[312];

			GPIOC->ODR = pixel[313];
			GPIOC->ODR = pixel[313];

			GPIOC->ODR = pixel[314];
			GPIOC->ODR = pixel[314];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[315];
			GPIOC->ODR = pixel[315];

			GPIOC->ODR = pixel[316];
			GPIOC->ODR = pixel[316];

			GPIOC->ODR = pixel[317];
			GPIOC->ODR = pixel[317];

			GPIOC->ODR = pixel[318];
			GPIOC->ODR = pixel[318];

			GPIOC->ODR = pixel[319];
			GPIOC->ODR = pixel[319];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[320];
			GPIOC->ODR = pixel[320];

			GPIOC->ODR = pixel[321];
			GPIOC->ODR = pixel[321];

			GPIOC->ODR = pixel[322];
			GPIOC->ODR = pixel[322];

			GPIOC->ODR = pixel[323];
			GPIOC->ODR = pixel[323];

			GPIOC->ODR = pixel[324];
			GPIOC->ODR = pixel[324];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[325];
			GPIOC->ODR = pixel[325];

			GPIOC->ODR = pixel[326];
			GPIOC->ODR = pixel[326];

			GPIOC->ODR = pixel[327];
			GPIOC->ODR = pixel[327];

			GPIOC->ODR = pixel[328];
			GPIOC->ODR = pixel[328];

			GPIOC->ODR = pixel[329];
			GPIOC->ODR = pixel[329];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[330];
			GPIOC->ODR = pixel[330];

			GPIOC->ODR = pixel[331];
			GPIOC->ODR = pixel[331];

			GPIOC->ODR = pixel[332];
			GPIOC->ODR = pixel[332];

			GPIOC->ODR = pixel[333];
			GPIOC->ODR = pixel[333];

			GPIOC->ODR = pixel[334];
			GPIOC->ODR = pixel[334];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[335];
			GPIOC->ODR = pixel[335];

			GPIOC->ODR = pixel[336];
			GPIOC->ODR = pixel[336];

			GPIOC->ODR = pixel[337];
			GPIOC->ODR = pixel[337];

			GPIOC->ODR = pixel[338];
			GPIOC->ODR = pixel[338];

			GPIOC->ODR = pixel[339];
			GPIOC->ODR = pixel[339];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[340];
			GPIOC->ODR = pixel[340];

			GPIOC->ODR = pixel[341];
			GPIOC->ODR = pixel[341];

			GPIOC->ODR = pixel[342];
			GPIOC->ODR = pixel[342];

			GPIOC->ODR = pixel[343];
			GPIOC->ODR = pixel[343];

			GPIOC->ODR = pixel[344];
			GPIOC->ODR = pixel[344];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[345];
			GPIOC->ODR = pixel[345];

			GPIOC->ODR = pixel[346];
			GPIOC->ODR = pixel[346];

			GPIOC->ODR = pixel[347];
			GPIOC->ODR = pixel[347];

			GPIOC->ODR = pixel[348];
			GPIOC->ODR = pixel[348];

			GPIOC->ODR = pixel[349];
			GPIOC->ODR = pixel[349];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[54];
			GPIOC->ODR = Score_val[54];

			GPIOC->ODR = Score_val[55];
			GPIOC->ODR = Score_val[55];

			GPIOC->ODR = Score_val[56];
			GPIOC->ODR = Score_val[56];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[57];
			GPIOC->ODR = Score_val[57];

			GPIOC->ODR = Score_val[58];
			GPIOC->ODR = Score_val[58];

			GPIOC->ODR = Score_val[59];
			GPIOC->ODR = Score_val[59];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[60];
			GPIOC->ODR = Score_val[60];

			GPIOC->ODR = Score_val[61];
			GPIOC->ODR = Score_val[61];

			GPIOC->ODR = Score_val[62];
			GPIOC->ODR = Score_val[62];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 145 ... 149: //77c

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[350];
			GPIOC->ODR = pixel[350];

			GPIOC->ODR = pixel[351];
			GPIOC->ODR = pixel[351];

			GPIOC->ODR = pixel[352];
			GPIOC->ODR = pixel[352];

			GPIOC->ODR = pixel[353];
			GPIOC->ODR = pixel[353];

			GPIOC->ODR = pixel[354];
			GPIOC->ODR = pixel[354];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[355];
			GPIOC->ODR = pixel[355];

			GPIOC->ODR = pixel[356];
			GPIOC->ODR = pixel[356];

			GPIOC->ODR = pixel[357];
			GPIOC->ODR = pixel[357];

			GPIOC->ODR = pixel[358];
			GPIOC->ODR = pixel[358];

			GPIOC->ODR = pixel[359];
			GPIOC->ODR = pixel[359];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[360];
			GPIOC->ODR = pixel[360];

			GPIOC->ODR = pixel[361];
			GPIOC->ODR = pixel[361];

			GPIOC->ODR = pixel[362];
			GPIOC->ODR = pixel[362];

			GPIOC->ODR = pixel[363];
			GPIOC->ODR = pixel[363];

			GPIOC->ODR = pixel[364];
			GPIOC->ODR = pixel[364];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[365];
			GPIOC->ODR = pixel[365];

			GPIOC->ODR = pixel[366];
			GPIOC->ODR = pixel[366];

			GPIOC->ODR = pixel[367];
			GPIOC->ODR = pixel[367];

			GPIOC->ODR = pixel[368];
			GPIOC->ODR = pixel[368];

			GPIOC->ODR = pixel[369];
			GPIOC->ODR = pixel[369];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[370];
			GPIOC->ODR = pixel[370];

			GPIOC->ODR = pixel[371];
			GPIOC->ODR = pixel[371];

			GPIOC->ODR = pixel[372];
			GPIOC->ODR = pixel[372];

			GPIOC->ODR = pixel[373];
			GPIOC->ODR = pixel[373];

			GPIOC->ODR = pixel[374];
			GPIOC->ODR = pixel[374];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[375];
			GPIOC->ODR = pixel[375];

			GPIOC->ODR = pixel[376];
			GPIOC->ODR = pixel[376];

			GPIOC->ODR = pixel[377];
			GPIOC->ODR = pixel[377];

			GPIOC->ODR = pixel[378];
			GPIOC->ODR = pixel[378];

			GPIOC->ODR = pixel[379];
			GPIOC->ODR = pixel[379];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[380];
			GPIOC->ODR = pixel[380];

			GPIOC->ODR = pixel[381];
			GPIOC->ODR = pixel[381];

			GPIOC->ODR = pixel[382];
			GPIOC->ODR = pixel[382];

			GPIOC->ODR = pixel[383];
			GPIOC->ODR = pixel[383];

			GPIOC->ODR = pixel[384];
			GPIOC->ODR = pixel[384];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[385];
			GPIOC->ODR = pixel[385];

			GPIOC->ODR = pixel[386];
			GPIOC->ODR = pixel[386];

			GPIOC->ODR = pixel[387];
			GPIOC->ODR = pixel[387];

			GPIOC->ODR = pixel[388];
			GPIOC->ODR = pixel[388];

			GPIOC->ODR = pixel[389];
			GPIOC->ODR = pixel[389];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[390];
			GPIOC->ODR = pixel[390];

			GPIOC->ODR = pixel[391];
			GPIOC->ODR = pixel[391];

			GPIOC->ODR = pixel[392];
			GPIOC->ODR = pixel[392];

			GPIOC->ODR = pixel[393];
			GPIOC->ODR = pixel[393];

			GPIOC->ODR = pixel[394];
			GPIOC->ODR = pixel[394];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[395];
			GPIOC->ODR = pixel[395];

			GPIOC->ODR = pixel[396];
			GPIOC->ODR = pixel[396];

			GPIOC->ODR = pixel[397];
			GPIOC->ODR = pixel[397];

			GPIOC->ODR = pixel[398];
			GPIOC->ODR = pixel[398];

			GPIOC->ODR = pixel[399];
			GPIOC->ODR = pixel[399];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[63];
			GPIOC->ODR = Score_val[63];

			GPIOC->ODR = Score_val[64];
			GPIOC->ODR = Score_val[64];

			GPIOC->ODR = Score_val[65];
			GPIOC->ODR = Score_val[65];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[66];
			GPIOC->ODR = Score_val[66];

			GPIOC->ODR = Score_val[67];
			GPIOC->ODR = Score_val[67];

			GPIOC->ODR = Score_val[68];
			GPIOC->ODR = Score_val[68];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[69];
			GPIOC->ODR = Score_val[69];

			GPIOC->ODR = Score_val[70];
			GPIOC->ODR = Score_val[70];

			GPIOC->ODR = Score_val[71];
			GPIOC->ODR = Score_val[71];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 150 ... 154: // 77d

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[400];
			GPIOC->ODR = pixel[400];

			GPIOC->ODR = pixel[401];
			GPIOC->ODR = pixel[401];

			GPIOC->ODR = pixel[402];
			GPIOC->ODR = pixel[402];

			GPIOC->ODR = pixel[403];
			GPIOC->ODR = pixel[403];

			GPIOC->ODR = pixel[404];
			GPIOC->ODR = pixel[404];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[405];
			GPIOC->ODR = pixel[405];

			GPIOC->ODR = pixel[406];
			GPIOC->ODR = pixel[406];

			GPIOC->ODR = pixel[407];
			GPIOC->ODR = pixel[407];

			GPIOC->ODR = pixel[408];
			GPIOC->ODR = pixel[408];

			GPIOC->ODR = pixel[409];
			GPIOC->ODR = pixel[409];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[410];
			GPIOC->ODR = pixel[410];

			GPIOC->ODR = pixel[411];
			GPIOC->ODR = pixel[411];

			GPIOC->ODR = pixel[412];
			GPIOC->ODR = pixel[412];

			GPIOC->ODR = pixel[413];
			GPIOC->ODR = pixel[413];

			GPIOC->ODR = pixel[414];
			GPIOC->ODR = pixel[414];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[415];
			GPIOC->ODR = pixel[415];

			GPIOC->ODR = pixel[416];
			GPIOC->ODR = pixel[416];

			GPIOC->ODR = pixel[417];
			GPIOC->ODR = pixel[417];

			GPIOC->ODR = pixel[418];
			GPIOC->ODR = pixel[418];

			GPIOC->ODR = pixel[419];
			GPIOC->ODR = pixel[419];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[420];
			GPIOC->ODR = pixel[420];

			GPIOC->ODR = pixel[421];
			GPIOC->ODR = pixel[421];

			GPIOC->ODR = pixel[422];
			GPIOC->ODR = pixel[422];

			GPIOC->ODR = pixel[423];
			GPIOC->ODR = pixel[423];

			GPIOC->ODR = pixel[424];
			GPIOC->ODR = pixel[424];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[425];
			GPIOC->ODR = pixel[425];

			GPIOC->ODR = pixel[426];
			GPIOC->ODR = pixel[426];

			GPIOC->ODR = pixel[427];
			GPIOC->ODR = pixel[427];

			GPIOC->ODR = pixel[428];
			GPIOC->ODR = pixel[428];

			GPIOC->ODR = pixel[429];
			GPIOC->ODR = pixel[429];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[430];
			GPIOC->ODR = pixel[430];

			GPIOC->ODR = pixel[431];
			GPIOC->ODR = pixel[431];

			GPIOC->ODR = pixel[432];
			GPIOC->ODR = pixel[432];

			GPIOC->ODR = pixel[433];
			GPIOC->ODR = pixel[433];

			GPIOC->ODR = pixel[434];
			GPIOC->ODR = pixel[434];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[435];
			GPIOC->ODR = pixel[435];

			GPIOC->ODR = pixel[436];
			GPIOC->ODR = pixel[436];

			GPIOC->ODR = pixel[437];
			GPIOC->ODR = pixel[437];

			GPIOC->ODR = pixel[438];
			GPIOC->ODR = pixel[438];

			GPIOC->ODR = pixel[439];
			GPIOC->ODR = pixel[439];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[440];
			GPIOC->ODR = pixel[440];

			GPIOC->ODR = pixel[441];
			GPIOC->ODR = pixel[441];

			GPIOC->ODR = pixel[442];
			GPIOC->ODR = pixel[442];

			GPIOC->ODR = pixel[443];
			GPIOC->ODR = pixel[443];

			GPIOC->ODR = pixel[444];
			GPIOC->ODR = pixel[444];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[445];
			GPIOC->ODR = pixel[445];

			GPIOC->ODR = pixel[446];
			GPIOC->ODR = pixel[446];

			GPIOC->ODR = pixel[447];
			GPIOC->ODR = pixel[447];

			GPIOC->ODR = pixel[448];
			GPIOC->ODR = pixel[448];

			GPIOC->ODR = pixel[449];
			GPIOC->ODR = pixel[449];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[72];
			GPIOC->ODR = Score_val[72];

			GPIOC->ODR = Score_val[73];
			GPIOC->ODR = Score_val[73];

			GPIOC->ODR = Score_val[74];
			GPIOC->ODR = Score_val[74];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[75];
			GPIOC->ODR = Score_val[75];

			GPIOC->ODR = Score_val[76];
			GPIOC->ODR = Score_val[76];

			GPIOC->ODR = Score_val[77];
			GPIOC->ODR = Score_val[77];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[78];
			GPIOC->ODR = Score_val[78];

			GPIOC->ODR = Score_val[79];
			GPIOC->ODR = Score_val[79];

			GPIOC->ODR = Score_val[80];
			GPIOC->ODR = Score_val[80];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 155 ... 159: // 77e

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green; //dot
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[450];
			GPIOC->ODR = pixel[450];

			GPIOC->ODR = pixel[451];
			GPIOC->ODR = pixel[451];

			GPIOC->ODR = pixel[452];
			GPIOC->ODR = pixel[452];

			GPIOC->ODR = pixel[453];
			GPIOC->ODR = pixel[453];

			GPIOC->ODR = pixel[454];
			GPIOC->ODR = pixel[454];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[455];
			GPIOC->ODR = pixel[455];

			GPIOC->ODR = pixel[456];
			GPIOC->ODR = pixel[456];

			GPIOC->ODR = pixel[457];
			GPIOC->ODR = pixel[457];

			GPIOC->ODR = pixel[458];
			GPIOC->ODR = pixel[458];

			GPIOC->ODR = pixel[459];
			GPIOC->ODR = pixel[459];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[460];
			GPIOC->ODR = pixel[460];

			GPIOC->ODR = pixel[461];
			GPIOC->ODR = pixel[461];

			GPIOC->ODR = pixel[462];
			GPIOC->ODR = pixel[462];

			GPIOC->ODR = pixel[463];
			GPIOC->ODR = pixel[463];

			GPIOC->ODR = pixel[464];
			GPIOC->ODR = pixel[464];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[465];
			GPIOC->ODR = pixel[465];

			GPIOC->ODR = pixel[466];
			GPIOC->ODR = pixel[466];

			GPIOC->ODR = pixel[467];
			GPIOC->ODR = pixel[467];

			GPIOC->ODR = pixel[468];
			GPIOC->ODR = pixel[468];

			GPIOC->ODR = pixel[469];
			GPIOC->ODR = pixel[469];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[470];
			GPIOC->ODR = pixel[470];

			GPIOC->ODR = pixel[471];
			GPIOC->ODR = pixel[471];

			GPIOC->ODR = pixel[472];
			GPIOC->ODR = pixel[472];

			GPIOC->ODR = pixel[473];
			GPIOC->ODR = pixel[473];

			GPIOC->ODR = pixel[474];
			GPIOC->ODR = pixel[474];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[475];
			GPIOC->ODR = pixel[475];

			GPIOC->ODR = pixel[476];
			GPIOC->ODR = pixel[476];

			GPIOC->ODR = pixel[477];
			GPIOC->ODR = pixel[477];

			GPIOC->ODR = pixel[478];
			GPIOC->ODR = pixel[478];

			GPIOC->ODR = pixel[479];
			GPIOC->ODR = pixel[479];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[480];
			GPIOC->ODR = pixel[480];

			GPIOC->ODR = pixel[481];
			GPIOC->ODR = pixel[481];

			GPIOC->ODR = pixel[482];
			GPIOC->ODR = pixel[482];

			GPIOC->ODR = pixel[483];
			GPIOC->ODR = pixel[483];

			GPIOC->ODR = pixel[484];
			GPIOC->ODR = pixel[484];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[485];
			GPIOC->ODR = pixel[485];

			GPIOC->ODR = pixel[486];
			GPIOC->ODR = pixel[486];

			GPIOC->ODR = pixel[487];
			GPIOC->ODR = pixel[487];

			GPIOC->ODR = pixel[488];
			GPIOC->ODR = pixel[488];

			GPIOC->ODR = pixel[489];
			GPIOC->ODR = pixel[489];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[490];
			GPIOC->ODR = pixel[490];

			GPIOC->ODR = pixel[491];
			GPIOC->ODR = pixel[491];

			GPIOC->ODR = pixel[492];
			GPIOC->ODR = pixel[492];

			GPIOC->ODR = pixel[493];
			GPIOC->ODR = pixel[493];

			GPIOC->ODR = pixel[494];
			GPIOC->ODR = pixel[494];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[495];
			GPIOC->ODR = pixel[495];

			GPIOC->ODR = pixel[496];
			GPIOC->ODR = pixel[496];

			GPIOC->ODR = pixel[497];
			GPIOC->ODR = pixel[497];

			GPIOC->ODR = pixel[498];
			GPIOC->ODR = pixel[498];

			GPIOC->ODR = pixel[499];
			GPIOC->ODR = pixel[499];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[81];
			GPIOC->ODR = Score_val[81];

			GPIOC->ODR = Score_val[82];
			GPIOC->ODR = Score_val[82];

			GPIOC->ODR = Score_val[83];
			GPIOC->ODR = Score_val[83];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[84];
			GPIOC->ODR = Score_val[84];

			GPIOC->ODR = Score_val[85];
			GPIOC->ODR = Score_val[85];

			GPIOC->ODR = Score_val[86];
			GPIOC->ODR = Score_val[86];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[87];
			GPIOC->ODR = Score_val[87];

			GPIOC->ODR = Score_val[88];
			GPIOC->ODR = Score_val[88];

			GPIOC->ODR = Score_val[89];
			GPIOC->ODR = Score_val[89];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 160 ... 164:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 165 ... 165:
			GPIOC->ODR = White_OFF;
			break;
			case 166 ... 169:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			}
		break;
		case 170 ... 204: //eights
			switch(Lines)
			{
			case 170 ... 174: //88a


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[500];
			GPIOC->ODR = pixel[500];

			GPIOC->ODR = pixel[501];
			GPIOC->ODR = pixel[501];

			GPIOC->ODR = pixel[502];
			GPIOC->ODR = pixel[502];

			GPIOC->ODR = pixel[503];
			GPIOC->ODR = pixel[503];

			GPIOC->ODR = pixel[504];
			GPIOC->ODR = pixel[504];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[505];
			GPIOC->ODR = pixel[505];

			GPIOC->ODR = pixel[506];
			GPIOC->ODR = pixel[506];

			GPIOC->ODR = pixel[507];
			GPIOC->ODR = pixel[507];

			GPIOC->ODR = pixel[508];
			GPIOC->ODR = pixel[508];

			GPIOC->ODR = pixel[509];
			GPIOC->ODR = pixel[509];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[510];
			GPIOC->ODR = pixel[510];

			GPIOC->ODR = pixel[511];
			GPIOC->ODR = pixel[511];

			GPIOC->ODR = pixel[512];
			GPIOC->ODR = pixel[512];

			GPIOC->ODR = pixel[513];
			GPIOC->ODR = pixel[513];

			GPIOC->ODR = pixel[514];
			GPIOC->ODR = pixel[514];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[515];
			GPIOC->ODR = pixel[515];

			GPIOC->ODR = pixel[516];
			GPIOC->ODR = pixel[516];

			GPIOC->ODR = pixel[517];
			GPIOC->ODR = pixel[517];

			GPIOC->ODR = pixel[518];
			GPIOC->ODR = pixel[518];

			GPIOC->ODR = pixel[519];
			GPIOC->ODR = pixel[519];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[520];
			GPIOC->ODR = pixel[520];

			GPIOC->ODR = pixel[521];
			GPIOC->ODR = pixel[521];

			GPIOC->ODR = pixel[522];
			GPIOC->ODR = pixel[522];

			GPIOC->ODR = pixel[523];
			GPIOC->ODR = pixel[523];

			GPIOC->ODR = pixel[524];
			GPIOC->ODR = pixel[524];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[525];
			GPIOC->ODR = pixel[525];

			GPIOC->ODR = pixel[526];
			GPIOC->ODR = pixel[526];

			GPIOC->ODR = pixel[527];
			GPIOC->ODR = pixel[527];

			GPIOC->ODR = pixel[528];
			GPIOC->ODR = pixel[528];

			GPIOC->ODR = pixel[529];
			GPIOC->ODR = pixel[529];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[530];
			GPIOC->ODR = pixel[530];

			GPIOC->ODR = pixel[531];
			GPIOC->ODR = pixel[531];

			GPIOC->ODR = pixel[532];
			GPIOC->ODR = pixel[532];

			GPIOC->ODR = pixel[533];
			GPIOC->ODR = pixel[533];

			GPIOC->ODR = pixel[534];
			GPIOC->ODR = pixel[534];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[535];
			GPIOC->ODR = pixel[535];

			GPIOC->ODR = pixel[536];
			GPIOC->ODR = pixel[536];

			GPIOC->ODR = pixel[537];
			GPIOC->ODR = pixel[537];

			GPIOC->ODR = pixel[538];
			GPIOC->ODR = pixel[538];

			GPIOC->ODR = pixel[539];
			GPIOC->ODR = pixel[539];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[540];
			GPIOC->ODR = pixel[540];

			GPIOC->ODR = pixel[541];
			GPIOC->ODR = pixel[541];

			GPIOC->ODR = pixel[542];
			GPIOC->ODR = pixel[542];

			GPIOC->ODR = pixel[543];
			GPIOC->ODR = pixel[543];

			GPIOC->ODR = pixel[544];
			GPIOC->ODR = pixel[544];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[545];
			GPIOC->ODR = pixel[545];

			GPIOC->ODR = pixel[546];
			GPIOC->ODR = pixel[546];

			GPIOC->ODR = pixel[547];
			GPIOC->ODR = pixel[547];

			GPIOC->ODR = pixel[548];
			GPIOC->ODR = pixel[548];

			GPIOC->ODR = pixel[549];
			GPIOC->ODR = pixel[549];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[90];
			GPIOC->ODR = Score_val[90];

			GPIOC->ODR = Score_val[91];
			GPIOC->ODR = Score_val[91];

			GPIOC->ODR = Score_val[92];
			GPIOC->ODR = Score_val[92];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[93];
			GPIOC->ODR = Score_val[93];

			GPIOC->ODR = Score_val[94];
			GPIOC->ODR = Score_val[94];

			GPIOC->ODR = Score_val[95];
			GPIOC->ODR = Score_val[95];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[96];
			GPIOC->ODR = Score_val[96];

			GPIOC->ODR = Score_val[97];
			GPIOC->ODR = Score_val[97];

			GPIOC->ODR = Score_val[98];
			GPIOC->ODR = Score_val[98];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 175 ... 179: //88b


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[550];
			GPIOC->ODR = pixel[550];

			GPIOC->ODR = pixel[551];
			GPIOC->ODR = pixel[551];

			GPIOC->ODR = pixel[552];
			GPIOC->ODR = pixel[552];

			GPIOC->ODR = pixel[553];
			GPIOC->ODR = pixel[553];

			GPIOC->ODR = pixel[554];
			GPIOC->ODR = pixel[554];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[555];
			GPIOC->ODR = pixel[555];

			GPIOC->ODR = pixel[556];
			GPIOC->ODR = pixel[556];

			GPIOC->ODR = pixel[557];
			GPIOC->ODR = pixel[557];

			GPIOC->ODR = pixel[558];
			GPIOC->ODR = pixel[558];

			GPIOC->ODR = pixel[559];
			GPIOC->ODR = pixel[559];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[560];
			GPIOC->ODR = pixel[560];

			GPIOC->ODR = pixel[561];
			GPIOC->ODR = pixel[561];

			GPIOC->ODR = pixel[562];
			GPIOC->ODR = pixel[562];

			GPIOC->ODR = pixel[563];
			GPIOC->ODR = pixel[563];

			GPIOC->ODR = pixel[564];
			GPIOC->ODR = pixel[564];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[565];
			GPIOC->ODR = pixel[565];

			GPIOC->ODR = pixel[566];
			GPIOC->ODR = pixel[566];

			GPIOC->ODR = pixel[567];
			GPIOC->ODR = pixel[567];

			GPIOC->ODR = pixel[568];
			GPIOC->ODR = pixel[568];

			GPIOC->ODR = pixel[569];
			GPIOC->ODR = pixel[569];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[570];
			GPIOC->ODR = pixel[570];

			GPIOC->ODR = pixel[571];
			GPIOC->ODR = pixel[571];

			GPIOC->ODR = pixel[572];
			GPIOC->ODR = pixel[572];

			GPIOC->ODR = pixel[573];
			GPIOC->ODR = pixel[573];

			GPIOC->ODR = pixel[574];
			GPIOC->ODR = pixel[574];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[575];
			GPIOC->ODR = pixel[575];

			GPIOC->ODR = pixel[576];
			GPIOC->ODR = pixel[576];

			GPIOC->ODR = pixel[577];
			GPIOC->ODR = pixel[577];

			GPIOC->ODR = pixel[578];
			GPIOC->ODR = pixel[578];

			GPIOC->ODR = pixel[579];
			GPIOC->ODR = pixel[579];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[580];
			GPIOC->ODR = pixel[580];

			GPIOC->ODR = pixel[581];
			GPIOC->ODR = pixel[581];

			GPIOC->ODR = pixel[582];
			GPIOC->ODR = pixel[582];

			GPIOC->ODR = pixel[583];
			GPIOC->ODR = pixel[583];

			GPIOC->ODR = pixel[584];
			GPIOC->ODR = pixel[584];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[585];
			GPIOC->ODR = pixel[585];

			GPIOC->ODR = pixel[586];
			GPIOC->ODR = pixel[586];

			GPIOC->ODR = pixel[587];
			GPIOC->ODR = pixel[587];

			GPIOC->ODR = pixel[588];
			GPIOC->ODR = pixel[588];

			GPIOC->ODR = pixel[589];
			GPIOC->ODR = pixel[589];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[590];
			GPIOC->ODR = pixel[590];

			GPIOC->ODR = pixel[591];
			GPIOC->ODR = pixel[591];

			GPIOC->ODR = pixel[592];
			GPIOC->ODR = pixel[592];

			GPIOC->ODR = pixel[593];
			GPIOC->ODR = pixel[593];

			GPIOC->ODR = pixel[594];
			GPIOC->ODR = pixel[594];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[595];
			GPIOC->ODR = pixel[595];

			GPIOC->ODR = pixel[596];
			GPIOC->ODR = pixel[596];

			GPIOC->ODR = pixel[597];
			GPIOC->ODR = pixel[597];

			GPIOC->ODR = pixel[598];
			GPIOC->ODR = pixel[598];

			GPIOC->ODR = pixel[599];
			GPIOC->ODR = pixel[599];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[99];
			GPIOC->ODR = Score_val[99];

			GPIOC->ODR = Score_val[100];
			GPIOC->ODR = Score_val[100];

			GPIOC->ODR = Score_val[101];
			GPIOC->ODR = Score_val[101];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[102];
			GPIOC->ODR = Score_val[102];

			GPIOC->ODR = Score_val[103];
			GPIOC->ODR = Score_val[103];

			GPIOC->ODR = Score_val[104];
			GPIOC->ODR = Score_val[104];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[105];
			GPIOC->ODR = Score_val[105];

			GPIOC->ODR = Score_val[106];
			GPIOC->ODR = Score_val[106];

			GPIOC->ODR = Score_val[107];
			GPIOC->ODR = Score_val[107];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 180 ... 184: //88c


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[600];
			GPIOC->ODR = pixel[600];

			GPIOC->ODR = pixel[601];
			GPIOC->ODR = pixel[601];

			GPIOC->ODR = pixel[602];
			GPIOC->ODR = pixel[602];

			GPIOC->ODR = pixel[603];
			GPIOC->ODR = pixel[603];

			GPIOC->ODR = pixel[604];
			GPIOC->ODR = pixel[604];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[605];
			GPIOC->ODR = pixel[605];

			GPIOC->ODR = pixel[606];
			GPIOC->ODR = pixel[606];

			GPIOC->ODR = pixel[607];
			GPIOC->ODR = pixel[607];

			GPIOC->ODR = pixel[608];
			GPIOC->ODR = pixel[608];

			GPIOC->ODR = pixel[609];
			GPIOC->ODR = pixel[609];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[610];
			GPIOC->ODR = pixel[610];

			GPIOC->ODR = pixel[611];
			GPIOC->ODR = pixel[611];

			GPIOC->ODR = pixel[612];
			GPIOC->ODR = pixel[612];

			GPIOC->ODR = pixel[613];
			GPIOC->ODR = pixel[613];

			GPIOC->ODR = pixel[614];
			GPIOC->ODR = pixel[614];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[615];
			GPIOC->ODR = pixel[615];

			GPIOC->ODR = pixel[616];
			GPIOC->ODR = pixel[616];

			GPIOC->ODR = pixel[617];
			GPIOC->ODR = pixel[617];

			GPIOC->ODR = pixel[618];
			GPIOC->ODR = pixel[618];

			GPIOC->ODR = pixel[619];
			GPIOC->ODR = pixel[619];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[620];
			GPIOC->ODR = pixel[620];

			GPIOC->ODR = pixel[621];
			GPIOC->ODR = pixel[621];

			GPIOC->ODR = pixel[622];
			GPIOC->ODR = pixel[622];

			GPIOC->ODR = pixel[623];
			GPIOC->ODR = pixel[623];

			GPIOC->ODR = pixel[624];
			GPIOC->ODR = pixel[624];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[625];
			GPIOC->ODR = pixel[625];

			GPIOC->ODR = pixel[626];
			GPIOC->ODR = pixel[626];

			GPIOC->ODR = pixel[627];
			GPIOC->ODR = pixel[627];

			GPIOC->ODR = pixel[628];
			GPIOC->ODR = pixel[628];

			GPIOC->ODR = pixel[629];
			GPIOC->ODR = pixel[629];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[630];
			GPIOC->ODR = pixel[630];

			GPIOC->ODR = pixel[631];
			GPIOC->ODR = pixel[631];

			GPIOC->ODR = pixel[632];
			GPIOC->ODR = pixel[632];

			GPIOC->ODR = pixel[633];
			GPIOC->ODR = pixel[633];

			GPIOC->ODR = pixel[634];
			GPIOC->ODR = pixel[634];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[635];
			GPIOC->ODR = pixel[635];

			GPIOC->ODR = pixel[636];
			GPIOC->ODR = pixel[636];

			GPIOC->ODR = pixel[637];
			GPIOC->ODR = pixel[637];

			GPIOC->ODR = pixel[638];
			GPIOC->ODR = pixel[638];

			GPIOC->ODR = pixel[639];
			GPIOC->ODR = pixel[639];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[640];
			GPIOC->ODR = pixel[640];

			GPIOC->ODR = pixel[641];
			GPIOC->ODR = pixel[641];

			GPIOC->ODR = pixel[642];
			GPIOC->ODR = pixel[642];

			GPIOC->ODR = pixel[643];
			GPIOC->ODR = pixel[643];

			GPIOC->ODR = pixel[644];
			GPIOC->ODR = pixel[644];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[645];
			GPIOC->ODR = pixel[645];

			GPIOC->ODR = pixel[646];
			GPIOC->ODR = pixel[646];

			GPIOC->ODR = pixel[647];
			GPIOC->ODR = pixel[647];

			GPIOC->ODR = pixel[648];
			GPIOC->ODR = pixel[648];

			GPIOC->ODR = pixel[649];
			GPIOC->ODR = pixel[649];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[108];
			GPIOC->ODR = Score_val[108];

			GPIOC->ODR = Score_val[109];
			GPIOC->ODR = Score_val[109];

			GPIOC->ODR = Score_val[110];
			GPIOC->ODR = Score_val[110];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[111];
			GPIOC->ODR = Score_val[111];

			GPIOC->ODR = Score_val[112];
			GPIOC->ODR = Score_val[112];

			GPIOC->ODR = Score_val[113];
			GPIOC->ODR = Score_val[113];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[114];
			GPIOC->ODR = Score_val[114];

			GPIOC->ODR = Score_val[115];
			GPIOC->ODR = Score_val[115];

			GPIOC->ODR = Score_val[116];
			GPIOC->ODR = Score_val[116];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 185 ... 189: //88d


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[650];
			GPIOC->ODR = pixel[650];

			GPIOC->ODR = pixel[651];
			GPIOC->ODR = pixel[651];

			GPIOC->ODR = pixel[652];
			GPIOC->ODR = pixel[652];

			GPIOC->ODR = pixel[653];
			GPIOC->ODR = pixel[653];

			GPIOC->ODR = pixel[654];
			GPIOC->ODR = pixel[654];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[655];
			GPIOC->ODR = pixel[655];

			GPIOC->ODR = pixel[656];
			GPIOC->ODR = pixel[656];

			GPIOC->ODR = pixel[657];
			GPIOC->ODR = pixel[657];

			GPIOC->ODR = pixel[658];
			GPIOC->ODR = pixel[658];

			GPIOC->ODR = pixel[659];
			GPIOC->ODR = pixel[659];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[660];
			GPIOC->ODR = pixel[660];

			GPIOC->ODR = pixel[661];
			GPIOC->ODR = pixel[661];

			GPIOC->ODR = pixel[662];
			GPIOC->ODR = pixel[662];

			GPIOC->ODR = pixel[663];
			GPIOC->ODR = pixel[663];

			GPIOC->ODR = pixel[664];
			GPIOC->ODR = pixel[664];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[665];
			GPIOC->ODR = pixel[665];

			GPIOC->ODR = pixel[666];
			GPIOC->ODR = pixel[666];

			GPIOC->ODR = pixel[667];
			GPIOC->ODR = pixel[667];

			GPIOC->ODR = pixel[668];
			GPIOC->ODR = pixel[668];

			GPIOC->ODR = pixel[669];
			GPIOC->ODR = pixel[669];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[670];
			GPIOC->ODR = pixel[670];

			GPIOC->ODR = pixel[671];
			GPIOC->ODR = pixel[671];

			GPIOC->ODR = pixel[672];
			GPIOC->ODR = pixel[672];

			GPIOC->ODR = pixel[673];
			GPIOC->ODR = pixel[673];

			GPIOC->ODR = pixel[674];
			GPIOC->ODR = pixel[674];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[675];
			GPIOC->ODR = pixel[675];

			GPIOC->ODR = pixel[676];
			GPIOC->ODR = pixel[676];

			GPIOC->ODR = pixel[677];
			GPIOC->ODR = pixel[677];

			GPIOC->ODR = pixel[678];
			GPIOC->ODR = pixel[678];

			GPIOC->ODR = pixel[679];
			GPIOC->ODR = pixel[679];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[680];
			GPIOC->ODR = pixel[680];

			GPIOC->ODR = pixel[681];
			GPIOC->ODR = pixel[681];

			GPIOC->ODR = pixel[682];
			GPIOC->ODR = pixel[682];

			GPIOC->ODR = pixel[683];
			GPIOC->ODR = pixel[683];

			GPIOC->ODR = pixel[684];
			GPIOC->ODR = pixel[684];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[685];
			GPIOC->ODR = pixel[685];

			GPIOC->ODR = pixel[686];
			GPIOC->ODR = pixel[686];

			GPIOC->ODR = pixel[687];
			GPIOC->ODR = pixel[687];

			GPIOC->ODR = pixel[688];
			GPIOC->ODR = pixel[688];

			GPIOC->ODR = pixel[689];
			GPIOC->ODR = pixel[689];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[690];
			GPIOC->ODR = pixel[690];

			GPIOC->ODR = pixel[691];
			GPIOC->ODR = pixel[691];

			GPIOC->ODR = pixel[692];
			GPIOC->ODR = pixel[692];

			GPIOC->ODR = pixel[693];
			GPIOC->ODR = pixel[693];

			GPIOC->ODR = pixel[694];
			GPIOC->ODR = pixel[694];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[695];
			GPIOC->ODR = pixel[695];

			GPIOC->ODR = pixel[696];
			GPIOC->ODR = pixel[696];

			GPIOC->ODR = pixel[697];
			GPIOC->ODR = pixel[697];

			GPIOC->ODR = pixel[698];
			GPIOC->ODR = pixel[698];

			GPIOC->ODR = pixel[699];
			GPIOC->ODR = pixel[699];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[117];
			GPIOC->ODR = Score_val[117];

			GPIOC->ODR = Score_val[118];
			GPIOC->ODR = Score_val[118];

			GPIOC->ODR = Score_val[119];
			GPIOC->ODR = Score_val[119];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[120];
			GPIOC->ODR = Score_val[120];

			GPIOC->ODR = Score_val[121];
			GPIOC->ODR = Score_val[121];

			GPIOC->ODR = Score_val[122];
			GPIOC->ODR = Score_val[122];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[123];
			GPIOC->ODR = Score_val[123];

			GPIOC->ODR = Score_val[124];
			GPIOC->ODR = Score_val[124];

			GPIOC->ODR = Score_val[125];
			GPIOC->ODR = Score_val[125];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 190 ... 194: //88e

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green; // dot
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[700];
			GPIOC->ODR = pixel[700];

			GPIOC->ODR = pixel[701];
			GPIOC->ODR = pixel[701];

			GPIOC->ODR = pixel[702];
			GPIOC->ODR = pixel[702];

			GPIOC->ODR = pixel[703];
			GPIOC->ODR = pixel[703];

			GPIOC->ODR = pixel[704];
			GPIOC->ODR = pixel[704];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[705];
			GPIOC->ODR = pixel[705];

			GPIOC->ODR = pixel[706];
			GPIOC->ODR = pixel[706];

			GPIOC->ODR = pixel[707];
			GPIOC->ODR = pixel[707];

			GPIOC->ODR = pixel[708];
			GPIOC->ODR = pixel[708];

			GPIOC->ODR = pixel[709];
			GPIOC->ODR = pixel[709];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[710];
			GPIOC->ODR = pixel[710];

			GPIOC->ODR = pixel[711];
			GPIOC->ODR = pixel[711];

			GPIOC->ODR = pixel[712];
			GPIOC->ODR = pixel[712];

			GPIOC->ODR = pixel[713];
			GPIOC->ODR = pixel[713];

			GPIOC->ODR = pixel[714];
			GPIOC->ODR = pixel[714];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[715];
			GPIOC->ODR = pixel[715];

			GPIOC->ODR = pixel[716];
			GPIOC->ODR = pixel[716];

			GPIOC->ODR = pixel[717];
			GPIOC->ODR = pixel[717];

			GPIOC->ODR = pixel[718];
			GPIOC->ODR = pixel[718];

			GPIOC->ODR = pixel[719];
			GPIOC->ODR = pixel[719];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[720];
			GPIOC->ODR = pixel[720];

			GPIOC->ODR = pixel[721];
			GPIOC->ODR = pixel[721];

			GPIOC->ODR = pixel[722];
			GPIOC->ODR = pixel[722];

			GPIOC->ODR = pixel[723];
			GPIOC->ODR = pixel[723];

			GPIOC->ODR = pixel[724];
			GPIOC->ODR = pixel[724];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[725];
			GPIOC->ODR = pixel[725];

			GPIOC->ODR = pixel[726];
			GPIOC->ODR = pixel[726];

			GPIOC->ODR = pixel[727];
			GPIOC->ODR = pixel[727];

			GPIOC->ODR = pixel[728];
			GPIOC->ODR = pixel[728];

			GPIOC->ODR = pixel[729];
			GPIOC->ODR = pixel[729];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[730];
			GPIOC->ODR = pixel[730];

			GPIOC->ODR = pixel[731];
			GPIOC->ODR = pixel[731];

			GPIOC->ODR = pixel[732];
			GPIOC->ODR = pixel[732];

			GPIOC->ODR = pixel[733];
			GPIOC->ODR = pixel[733];

			GPIOC->ODR = pixel[734];
			GPIOC->ODR = pixel[734];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[735];
			GPIOC->ODR = pixel[735];

			GPIOC->ODR = pixel[736];
			GPIOC->ODR = pixel[736];

			GPIOC->ODR = pixel[737];
			GPIOC->ODR = pixel[737];

			GPIOC->ODR = pixel[738];
			GPIOC->ODR = pixel[738];

			GPIOC->ODR = pixel[739];
			GPIOC->ODR = pixel[739];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[740];
			GPIOC->ODR = pixel[740];

			GPIOC->ODR = pixel[741];
			GPIOC->ODR = pixel[741];

			GPIOC->ODR = pixel[742];
			GPIOC->ODR = pixel[742];

			GPIOC->ODR = pixel[743];
			GPIOC->ODR = pixel[743];

			GPIOC->ODR = pixel[744];
			GPIOC->ODR = pixel[744];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[745];
			GPIOC->ODR = pixel[745];

			GPIOC->ODR = pixel[746];
			GPIOC->ODR = pixel[746];

			GPIOC->ODR = pixel[747];
			GPIOC->ODR = pixel[747];

			GPIOC->ODR = pixel[748];
			GPIOC->ODR = pixel[748];

			GPIOC->ODR = pixel[749];
			GPIOC->ODR = pixel[749];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[126];
			GPIOC->ODR = Score_val[126];

			GPIOC->ODR = Score_val[127];
			GPIOC->ODR = Score_val[127];

			GPIOC->ODR = Score_val[128];
			GPIOC->ODR = Score_val[128];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[129];
			GPIOC->ODR = Score_val[129];

			GPIOC->ODR = Score_val[130];
			GPIOC->ODR = Score_val[130];

			GPIOC->ODR = Score_val[131];
			GPIOC->ODR = Score_val[131];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[132];
			GPIOC->ODR = Score_val[132];

			GPIOC->ODR = Score_val[133];
			GPIOC->ODR = Score_val[133];

			GPIOC->ODR = Score_val[134];
			GPIOC->ODR = Score_val[134];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 195 ... 199:
//			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 200 ... 200:
			GPIOC->ODR = White_OFF;
			break;
			case 201 ... 204:
//			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			}
		break;
		case 205 ... 239:  //fours
			switch(Lines)
			{
			case 205 ... 209: //99a

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;//dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[750];
			GPIOC->ODR = pixel[750];

			GPIOC->ODR = pixel[751];
			GPIOC->ODR = pixel[751];

			GPIOC->ODR = pixel[752];
			GPIOC->ODR = pixel[752];

			GPIOC->ODR = pixel[753];
			GPIOC->ODR = pixel[753];

			GPIOC->ODR = pixel[754];
			GPIOC->ODR = pixel[754];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[755];
			GPIOC->ODR = pixel[755];

			GPIOC->ODR = pixel[756];
			GPIOC->ODR = pixel[756];

			GPIOC->ODR = pixel[757];
			GPIOC->ODR = pixel[757];

			GPIOC->ODR = pixel[758];
			GPIOC->ODR = pixel[758];

			GPIOC->ODR = pixel[759];
			GPIOC->ODR = pixel[759];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[760];
			GPIOC->ODR = pixel[760];

			GPIOC->ODR = pixel[761];
			GPIOC->ODR = pixel[761];

			GPIOC->ODR = pixel[762];
			GPIOC->ODR = pixel[762];

			GPIOC->ODR = pixel[763];
			GPIOC->ODR = pixel[763];

			GPIOC->ODR = pixel[764];
			GPIOC->ODR = pixel[764];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[765];
			GPIOC->ODR = pixel[765];

			GPIOC->ODR = pixel[766];
			GPIOC->ODR = pixel[766];

			GPIOC->ODR = pixel[767];
			GPIOC->ODR = pixel[767];

			GPIOC->ODR = pixel[768];
			GPIOC->ODR = pixel[768];

			GPIOC->ODR = pixel[769];
			GPIOC->ODR = pixel[769];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[770];
			GPIOC->ODR = pixel[770];

			GPIOC->ODR = pixel[771];
			GPIOC->ODR = pixel[771];

			GPIOC->ODR = pixel[772];
			GPIOC->ODR = pixel[772];

			GPIOC->ODR = pixel[773];
			GPIOC->ODR = pixel[773];

			GPIOC->ODR = pixel[774];
			GPIOC->ODR = pixel[774];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[775];
			GPIOC->ODR = pixel[775];

			GPIOC->ODR = pixel[776];
			GPIOC->ODR = pixel[776];

			GPIOC->ODR = pixel[777];
			GPIOC->ODR = pixel[777];

			GPIOC->ODR = pixel[778];
			GPIOC->ODR = pixel[778];

			GPIOC->ODR = pixel[779];
			GPIOC->ODR = pixel[779];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[780];
			GPIOC->ODR = pixel[780];

			GPIOC->ODR = pixel[781];
			GPIOC->ODR = pixel[781];

			GPIOC->ODR = pixel[782];
			GPIOC->ODR = pixel[782];

			GPIOC->ODR = pixel[783];
			GPIOC->ODR = pixel[783];

			GPIOC->ODR = pixel[784];
			GPIOC->ODR = pixel[784];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[785];
			GPIOC->ODR = pixel[785];

			GPIOC->ODR = pixel[786];
			GPIOC->ODR = pixel[786];

			GPIOC->ODR = pixel[787];
			GPIOC->ODR = pixel[787];

			GPIOC->ODR = pixel[788];
			GPIOC->ODR = pixel[788];

			GPIOC->ODR = pixel[789];
			GPIOC->ODR = pixel[789];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[790];
			GPIOC->ODR = pixel[790];

			GPIOC->ODR = pixel[791];
			GPIOC->ODR = pixel[791];

			GPIOC->ODR = pixel[792];
			GPIOC->ODR = pixel[792];

			GPIOC->ODR = pixel[793];
			GPIOC->ODR = pixel[793];

			GPIOC->ODR = pixel[794];
			GPIOC->ODR = pixel[794];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[795];
			GPIOC->ODR = pixel[795];

			GPIOC->ODR = pixel[796];
			GPIOC->ODR = pixel[796];

			GPIOC->ODR = pixel[797];
			GPIOC->ODR = pixel[797];

			GPIOC->ODR = pixel[798];
			GPIOC->ODR = pixel[798];

			GPIOC->ODR = pixel[799];
			GPIOC->ODR = pixel[799];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[135];
			GPIOC->ODR = Score_val[135];

			GPIOC->ODR = Score_val[136];
			GPIOC->ODR = Score_val[136];

			GPIOC->ODR = Score_val[137];
			GPIOC->ODR = Score_val[137];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[138];
			GPIOC->ODR = Score_val[138];

			GPIOC->ODR = Score_val[139];
			GPIOC->ODR = Score_val[139];

			GPIOC->ODR = Score_val[140];
			GPIOC->ODR = Score_val[140];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[141];
			GPIOC->ODR = Score_val[141];

			GPIOC->ODR = Score_val[142];
			GPIOC->ODR = Score_val[142];

			GPIOC->ODR = Score_val[143];
			GPIOC->ODR = Score_val[143];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 210 ... 214: //99b

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[800];
			GPIOC->ODR = pixel[800];

			GPIOC->ODR = pixel[801];
			GPIOC->ODR = pixel[801];

			GPIOC->ODR = pixel[802];
			GPIOC->ODR = pixel[802];

			GPIOC->ODR = pixel[803];
			GPIOC->ODR = pixel[803];

			GPIOC->ODR = pixel[804];
			GPIOC->ODR = pixel[804];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[805];
			GPIOC->ODR = pixel[805];

			GPIOC->ODR = pixel[806];
			GPIOC->ODR = pixel[806];

			GPIOC->ODR = pixel[807];
			GPIOC->ODR = pixel[807];

			GPIOC->ODR = pixel[808];
			GPIOC->ODR = pixel[808];

			GPIOC->ODR = pixel[809];
			GPIOC->ODR = pixel[809];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[810];
			GPIOC->ODR = pixel[810];

			GPIOC->ODR = pixel[811];
			GPIOC->ODR = pixel[811];

			GPIOC->ODR = pixel[812];
			GPIOC->ODR = pixel[812];

			GPIOC->ODR = pixel[813];
			GPIOC->ODR = pixel[813];

			GPIOC->ODR = pixel[814];
			GPIOC->ODR = pixel[814];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[815];
			GPIOC->ODR = pixel[815];

			GPIOC->ODR = pixel[816];
			GPIOC->ODR = pixel[816];

			GPIOC->ODR = pixel[817];
			GPIOC->ODR = pixel[817];

			GPIOC->ODR = pixel[818];
			GPIOC->ODR = pixel[818];

			GPIOC->ODR = pixel[819];
			GPIOC->ODR = pixel[819];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[820];
			GPIOC->ODR = pixel[820];

			GPIOC->ODR = pixel[821];
			GPIOC->ODR = pixel[821];

			GPIOC->ODR = pixel[822];
			GPIOC->ODR = pixel[822];

			GPIOC->ODR = pixel[823];
			GPIOC->ODR = pixel[823];

			GPIOC->ODR = pixel[824];
			GPIOC->ODR = pixel[824];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[825];
			GPIOC->ODR = pixel[825];

			GPIOC->ODR = pixel[826];
			GPIOC->ODR = pixel[826];

			GPIOC->ODR = pixel[827];
			GPIOC->ODR = pixel[827];

			GPIOC->ODR = pixel[828];
			GPIOC->ODR = pixel[828];

			GPIOC->ODR = pixel[829];
			GPIOC->ODR = pixel[829];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[830];
			GPIOC->ODR = pixel[830];

			GPIOC->ODR = pixel[831];
			GPIOC->ODR = pixel[831];

			GPIOC->ODR = pixel[832];
			GPIOC->ODR = pixel[832];

			GPIOC->ODR = pixel[833];
			GPIOC->ODR = pixel[833];

			GPIOC->ODR = pixel[834];
			GPIOC->ODR = pixel[834];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[835];
			GPIOC->ODR = pixel[835];

			GPIOC->ODR = pixel[836];
			GPIOC->ODR = pixel[836];

			GPIOC->ODR = pixel[837];
			GPIOC->ODR = pixel[837];

			GPIOC->ODR = pixel[838];
			GPIOC->ODR = pixel[838];

			GPIOC->ODR = pixel[839];
			GPIOC->ODR = pixel[839];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[840];
			GPIOC->ODR = pixel[840];

			GPIOC->ODR = pixel[841];
			GPIOC->ODR = pixel[841];

			GPIOC->ODR = pixel[842];
			GPIOC->ODR = pixel[842];

			GPIOC->ODR = pixel[843];
			GPIOC->ODR = pixel[843];

			GPIOC->ODR = pixel[844];
			GPIOC->ODR = pixel[844];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[845];
			GPIOC->ODR = pixel[845];

			GPIOC->ODR = pixel[846];
			GPIOC->ODR = pixel[846];

			GPIOC->ODR = pixel[847];
			GPIOC->ODR = pixel[847];

			GPIOC->ODR = pixel[848];
			GPIOC->ODR = pixel[848];

			GPIOC->ODR = pixel[849];
			GPIOC->ODR = pixel[849];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[144];
			GPIOC->ODR = Score_val[144];

			GPIOC->ODR = Score_val[145];
			GPIOC->ODR = Score_val[145];

			GPIOC->ODR = Score_val[146];
			GPIOC->ODR = Score_val[146];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[147];
			GPIOC->ODR = Score_val[147];

			GPIOC->ODR = Score_val[148];
			GPIOC->ODR = Score_val[148];

			GPIOC->ODR = Score_val[149];
			GPIOC->ODR = Score_val[149];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[150];
			GPIOC->ODR = Score_val[150];

			GPIOC->ODR = Score_val[151];
			GPIOC->ODR = Score_val[151];

			GPIOC->ODR = Score_val[152];
			GPIOC->ODR = Score_val[152];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 215 ... 219: //99c

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;//dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[850];
			GPIOC->ODR = pixel[850];

			GPIOC->ODR = pixel[851];
			GPIOC->ODR = pixel[851];

			GPIOC->ODR = pixel[852];
			GPIOC->ODR = pixel[852];

			GPIOC->ODR = pixel[853];
			GPIOC->ODR = pixel[853];

			GPIOC->ODR = pixel[854];
			GPIOC->ODR = pixel[854];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[855];
			GPIOC->ODR = pixel[855];

			GPIOC->ODR = pixel[856];
			GPIOC->ODR = pixel[856];

			GPIOC->ODR = pixel[857];
			GPIOC->ODR = pixel[857];

			GPIOC->ODR = pixel[858];
			GPIOC->ODR = pixel[858];

			GPIOC->ODR = pixel[859];
			GPIOC->ODR = pixel[859];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[860];
			GPIOC->ODR = pixel[860];

			GPIOC->ODR = pixel[861];
			GPIOC->ODR = pixel[861];

			GPIOC->ODR = pixel[862];
			GPIOC->ODR = pixel[862];

			GPIOC->ODR = pixel[863];
			GPIOC->ODR = pixel[863];

			GPIOC->ODR = pixel[864];
			GPIOC->ODR = pixel[864];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[865];
			GPIOC->ODR = pixel[865];

			GPIOC->ODR = pixel[866];
			GPIOC->ODR = pixel[866];

			GPIOC->ODR = pixel[867];
			GPIOC->ODR = pixel[867];

			GPIOC->ODR = pixel[868];
			GPIOC->ODR = pixel[868];

			GPIOC->ODR = pixel[869];
			GPIOC->ODR = pixel[869];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[870];
			GPIOC->ODR = pixel[870];

			GPIOC->ODR = pixel[871];
			GPIOC->ODR = pixel[871];

			GPIOC->ODR = pixel[872];
			GPIOC->ODR = pixel[872];

			GPIOC->ODR = pixel[873];
			GPIOC->ODR = pixel[873];

			GPIOC->ODR = pixel[874];
			GPIOC->ODR = pixel[874];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[875];
			GPIOC->ODR = pixel[875];

			GPIOC->ODR = pixel[876];
			GPIOC->ODR = pixel[876];

			GPIOC->ODR = pixel[877];
			GPIOC->ODR = pixel[877];

			GPIOC->ODR = pixel[878];
			GPIOC->ODR = pixel[878];

			GPIOC->ODR = pixel[879];
			GPIOC->ODR = pixel[879];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[880];
			GPIOC->ODR = pixel[880];

			GPIOC->ODR = pixel[881];
			GPIOC->ODR = pixel[881];

			GPIOC->ODR = pixel[882];
			GPIOC->ODR = pixel[882];

			GPIOC->ODR = pixel[883];
			GPIOC->ODR = pixel[883];

			GPIOC->ODR = pixel[884];
			GPIOC->ODR = pixel[884];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[885];
			GPIOC->ODR = pixel[885];

			GPIOC->ODR = pixel[886];
			GPIOC->ODR = pixel[886];

			GPIOC->ODR = pixel[887];
			GPIOC->ODR = pixel[887];

			GPIOC->ODR = pixel[888];
			GPIOC->ODR = pixel[888];

			GPIOC->ODR = pixel[889];
			GPIOC->ODR = pixel[889];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[890];
			GPIOC->ODR = pixel[890];

			GPIOC->ODR = pixel[891];
			GPIOC->ODR = pixel[891];

			GPIOC->ODR = pixel[892];
			GPIOC->ODR = pixel[892];

			GPIOC->ODR = pixel[893];
			GPIOC->ODR = pixel[893];

			GPIOC->ODR = pixel[894];
			GPIOC->ODR = pixel[894];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[895];
			GPIOC->ODR = pixel[895];

			GPIOC->ODR = pixel[896];
			GPIOC->ODR = pixel[896];

			GPIOC->ODR = pixel[897];
			GPIOC->ODR = pixel[897];

			GPIOC->ODR = pixel[898];
			GPIOC->ODR = pixel[898];

			GPIOC->ODR = pixel[899];
			GPIOC->ODR = pixel[899];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[153];
			GPIOC->ODR = Score_val[153];

			GPIOC->ODR = Score_val[154];
			GPIOC->ODR = Score_val[154];

			GPIOC->ODR = Score_val[155];
			GPIOC->ODR = Score_val[155];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[156];
			GPIOC->ODR = Score_val[156];

			GPIOC->ODR = Score_val[157];
			GPIOC->ODR = Score_val[157];

			GPIOC->ODR = Score_val[158];
			GPIOC->ODR = Score_val[158];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[159];
			GPIOC->ODR = Score_val[159];

			GPIOC->ODR = Score_val[160];
			GPIOC->ODR = Score_val[160];

			GPIOC->ODR = Score_val[161];
			GPIOC->ODR = Score_val[161];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 220 ... 224: // 99d

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[900];
			GPIOC->ODR = pixel[900];

			GPIOC->ODR = pixel[901];
			GPIOC->ODR = pixel[901];

			GPIOC->ODR = pixel[902];
			GPIOC->ODR = pixel[902];

			GPIOC->ODR = pixel[903];
			GPIOC->ODR = pixel[903];

			GPIOC->ODR = pixel[904];
			GPIOC->ODR = pixel[904];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[905];
			GPIOC->ODR = pixel[905];

			GPIOC->ODR = pixel[906];
			GPIOC->ODR = pixel[906];

			GPIOC->ODR = pixel[907];
			GPIOC->ODR = pixel[907];

			GPIOC->ODR = pixel[908];
			GPIOC->ODR = pixel[908];

			GPIOC->ODR = pixel[909];
			GPIOC->ODR = pixel[909];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[910];
			GPIOC->ODR = pixel[910];

			GPIOC->ODR = pixel[911];
			GPIOC->ODR = pixel[911];

			GPIOC->ODR = pixel[912];
			GPIOC->ODR = pixel[912];

			GPIOC->ODR = pixel[913];
			GPIOC->ODR = pixel[913];

			GPIOC->ODR = pixel[914];
			GPIOC->ODR = pixel[914];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[915];
			GPIOC->ODR = pixel[915];

			GPIOC->ODR = pixel[916];
			GPIOC->ODR = pixel[916];

			GPIOC->ODR = pixel[917];
			GPIOC->ODR = pixel[917];

			GPIOC->ODR = pixel[918];
			GPIOC->ODR = pixel[918];

			GPIOC->ODR = pixel[919];
			GPIOC->ODR = pixel[919];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[920];
			GPIOC->ODR = pixel[920];

			GPIOC->ODR = pixel[921];
			GPIOC->ODR = pixel[921];

			GPIOC->ODR = pixel[922];
			GPIOC->ODR = pixel[922];

			GPIOC->ODR = pixel[923];
			GPIOC->ODR = pixel[923];

			GPIOC->ODR = pixel[924];
			GPIOC->ODR = pixel[924];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[925];
			GPIOC->ODR = pixel[925];

			GPIOC->ODR = pixel[926];
			GPIOC->ODR = pixel[926];

			GPIOC->ODR = pixel[927];
			GPIOC->ODR = pixel[927];

			GPIOC->ODR = pixel[928];
			GPIOC->ODR = pixel[928];

			GPIOC->ODR = pixel[929];
			GPIOC->ODR = pixel[929];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[930];
			GPIOC->ODR = pixel[930];

			GPIOC->ODR = pixel[931];
			GPIOC->ODR = pixel[931];

			GPIOC->ODR = pixel[932];
			GPIOC->ODR = pixel[932];

			GPIOC->ODR = pixel[933];
			GPIOC->ODR = pixel[933];

			GPIOC->ODR = pixel[934];
			GPIOC->ODR = pixel[934];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[935];
			GPIOC->ODR = pixel[935];

			GPIOC->ODR = pixel[936];
			GPIOC->ODR = pixel[936];

			GPIOC->ODR = pixel[937];
			GPIOC->ODR = pixel[937];

			GPIOC->ODR = pixel[938];
			GPIOC->ODR = pixel[938];

			GPIOC->ODR = pixel[939];
			GPIOC->ODR = pixel[939];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[940];
			GPIOC->ODR = pixel[940];

			GPIOC->ODR = pixel[941];
			GPIOC->ODR = pixel[941];

			GPIOC->ODR = pixel[942];
			GPIOC->ODR = pixel[942];

			GPIOC->ODR = pixel[943];
			GPIOC->ODR = pixel[943];

			GPIOC->ODR = pixel[944];
			GPIOC->ODR = pixel[944];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[945];
			GPIOC->ODR = pixel[945];

			GPIOC->ODR = pixel[946];
			GPIOC->ODR = pixel[946];

			GPIOC->ODR = pixel[947];
			GPIOC->ODR = pixel[947];

			GPIOC->ODR = pixel[948];
			GPIOC->ODR = pixel[948];

			GPIOC->ODR = pixel[949];
			GPIOC->ODR = pixel[949];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[162];
			GPIOC->ODR = Score_val[162];

			GPIOC->ODR = Score_val[163];
			GPIOC->ODR = Score_val[163];

			GPIOC->ODR = Score_val[164];
			GPIOC->ODR = Score_val[164];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[165];
			GPIOC->ODR = Score_val[165];

			GPIOC->ODR = Score_val[166];
			GPIOC->ODR = Score_val[166];

			GPIOC->ODR = Score_val[167];
			GPIOC->ODR = Score_val[167];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[168];
			GPIOC->ODR = Score_val[168];

			GPIOC->ODR = Score_val[169];
			GPIOC->ODR = Score_val[169];

			GPIOC->ODR = Score_val[170];
			GPIOC->ODR = Score_val[170];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 225 ... 229: //99e

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[950];
			GPIOC->ODR = pixel[950];

			GPIOC->ODR = pixel[951];
			GPIOC->ODR = pixel[951];

			GPIOC->ODR = pixel[952];
			GPIOC->ODR = pixel[952];

			GPIOC->ODR = pixel[953];
			GPIOC->ODR = pixel[953];

			GPIOC->ODR = pixel[954];
			GPIOC->ODR = pixel[954];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[955];
			GPIOC->ODR = pixel[955];

			GPIOC->ODR = pixel[956];
			GPIOC->ODR = pixel[956];

			GPIOC->ODR = pixel[957];
			GPIOC->ODR = pixel[957];

			GPIOC->ODR = pixel[958];
			GPIOC->ODR = pixel[958];

			GPIOC->ODR = pixel[959];
			GPIOC->ODR = pixel[959];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[960];
			GPIOC->ODR = pixel[960];

			GPIOC->ODR = pixel[961];
			GPIOC->ODR = pixel[961];

			GPIOC->ODR = pixel[962];
			GPIOC->ODR = pixel[962];

			GPIOC->ODR = pixel[963];
			GPIOC->ODR = pixel[963];

			GPIOC->ODR = pixel[964];
			GPIOC->ODR = pixel[964];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[965];
			GPIOC->ODR = pixel[965];

			GPIOC->ODR = pixel[966];
			GPIOC->ODR = pixel[966];

			GPIOC->ODR = pixel[967];
			GPIOC->ODR = pixel[967];

			GPIOC->ODR = pixel[968];
			GPIOC->ODR = pixel[968];

			GPIOC->ODR = pixel[969];
			GPIOC->ODR = pixel[969];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[970];
			GPIOC->ODR = pixel[970];

			GPIOC->ODR = pixel[971];
			GPIOC->ODR = pixel[971];

			GPIOC->ODR = pixel[972];
			GPIOC->ODR = pixel[972];

			GPIOC->ODR = pixel[973];
			GPIOC->ODR = pixel[973];

			GPIOC->ODR = pixel[974];
			GPIOC->ODR = pixel[974];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[975];
			GPIOC->ODR = pixel[975];

			GPIOC->ODR = pixel[976];
			GPIOC->ODR = pixel[976];

			GPIOC->ODR = pixel[977];
			GPIOC->ODR = pixel[977];

			GPIOC->ODR = pixel[978];
			GPIOC->ODR = pixel[978];

			GPIOC->ODR = pixel[979];
			GPIOC->ODR = pixel[979];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[980];
			GPIOC->ODR = pixel[980];

			GPIOC->ODR = pixel[981];
			GPIOC->ODR = pixel[981];

			GPIOC->ODR = pixel[982];
			GPIOC->ODR = pixel[982];

			GPIOC->ODR = pixel[983];
			GPIOC->ODR = pixel[983];

			GPIOC->ODR = pixel[984];
			GPIOC->ODR = pixel[984];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[985];
			GPIOC->ODR = pixel[985];

			GPIOC->ODR = pixel[986];
			GPIOC->ODR = pixel[986];

			GPIOC->ODR = pixel[987];
			GPIOC->ODR = pixel[987];

			GPIOC->ODR = pixel[988];
			GPIOC->ODR = pixel[988];

			GPIOC->ODR = pixel[989];
			GPIOC->ODR = pixel[989];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[990];
			GPIOC->ODR = pixel[990];

			GPIOC->ODR = pixel[991];
			GPIOC->ODR = pixel[991];

			GPIOC->ODR = pixel[992];
			GPIOC->ODR = pixel[992];

			GPIOC->ODR = pixel[993];
			GPIOC->ODR = pixel[993];

			GPIOC->ODR = pixel[994];
			GPIOC->ODR = pixel[994];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[995];
			GPIOC->ODR = pixel[995];

			GPIOC->ODR = pixel[996];
			GPIOC->ODR = pixel[996];

			GPIOC->ODR = pixel[997];
			GPIOC->ODR = pixel[997];

			GPIOC->ODR = pixel[998];
			GPIOC->ODR = pixel[998];

			GPIOC->ODR = pixel[999];
			GPIOC->ODR = pixel[999];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[171];
			GPIOC->ODR = Score_val[171];

			GPIOC->ODR = Score_val[172];
			GPIOC->ODR = Score_val[172];

			GPIOC->ODR = Score_val[173];
			GPIOC->ODR = Score_val[173];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[174];
			GPIOC->ODR = Score_val[174];

			GPIOC->ODR = Score_val[175];
			GPIOC->ODR = Score_val[175];

			GPIOC->ODR = Score_val[176];
			GPIOC->ODR = Score_val[176];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[177];
			GPIOC->ODR = Score_val[177];

			GPIOC->ODR = Score_val[178];
			GPIOC->ODR = Score_val[178];

			GPIOC->ODR = Score_val[179];
			GPIOC->ODR = Score_val[179];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 230 ... 234:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 235 ... 235:
			GPIOC->ODR = White_OFF;
			break;
			case 236 ... 239:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			}
		break;


		case 240 ... 274: //tens 1010a
		switch(Lines)
		{
		case 240 ... 244:

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[0];
		GPIOC->ODR = ppixel[0];

		GPIOC->ODR = ppixel[1];
		GPIOC->ODR = ppixel[1];

		GPIOC->ODR = ppixel[2];
		GPIOC->ODR = ppixel[2];

		GPIOC->ODR = ppixel[3];
		GPIOC->ODR = ppixel[3];

		GPIOC->ODR = ppixel[4];
		GPIOC->ODR = ppixel[4];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[5];
		GPIOC->ODR = ppixel[5];

		GPIOC->ODR = ppixel[6];
		GPIOC->ODR = ppixel[6];

		GPIOC->ODR = ppixel[7];
		GPIOC->ODR = ppixel[7];

		GPIOC->ODR = ppixel[8];
		GPIOC->ODR = ppixel[8];

		GPIOC->ODR = ppixel[9];
		GPIOC->ODR = ppixel[9];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[10];
		GPIOC->ODR = ppixel[10];

		GPIOC->ODR = ppixel[11];
		GPIOC->ODR = ppixel[11];

		GPIOC->ODR = ppixel[12];
		GPIOC->ODR = ppixel[12];

		GPIOC->ODR = ppixel[13];
		GPIOC->ODR = ppixel[13];

		GPIOC->ODR = ppixel[14];
		GPIOC->ODR = ppixel[14];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[15];
		GPIOC->ODR = ppixel[15];

		GPIOC->ODR = ppixel[16];
		GPIOC->ODR = ppixel[16];

		GPIOC->ODR = ppixel[17];
		GPIOC->ODR = ppixel[17];

		GPIOC->ODR = ppixel[18];
		GPIOC->ODR = ppixel[18];

		GPIOC->ODR = ppixel[19];
		GPIOC->ODR = ppixel[19];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[20];
		GPIOC->ODR = ppixel[20];

		GPIOC->ODR = ppixel[21];
		GPIOC->ODR = ppixel[21];

		GPIOC->ODR = ppixel[22];
		GPIOC->ODR = ppixel[22];

		GPIOC->ODR = ppixel[23];
		GPIOC->ODR = ppixel[23];

		GPIOC->ODR = ppixel[24];
		GPIOC->ODR = ppixel[24];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[25];
		GPIOC->ODR = ppixel[25];

		GPIOC->ODR = ppixel[26];
		GPIOC->ODR = ppixel[26];

		GPIOC->ODR = ppixel[27];
		GPIOC->ODR = ppixel[27];

		GPIOC->ODR = ppixel[28];
		GPIOC->ODR = ppixel[28];

		GPIOC->ODR = ppixel[29];
		GPIOC->ODR = ppixel[29];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[30];
		GPIOC->ODR = ppixel[30];

		GPIOC->ODR = ppixel[31];
		GPIOC->ODR = ppixel[31];

		GPIOC->ODR = ppixel[32];
		GPIOC->ODR = ppixel[32];

		GPIOC->ODR = ppixel[33];
		GPIOC->ODR = ppixel[33];

		GPIOC->ODR = ppixel[34];
		GPIOC->ODR = ppixel[34];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[35];
		GPIOC->ODR = ppixel[35];

		GPIOC->ODR = ppixel[36];
		GPIOC->ODR = ppixel[36];

		GPIOC->ODR = ppixel[37];
		GPIOC->ODR = ppixel[37];

		GPIOC->ODR = ppixel[38];
		GPIOC->ODR = ppixel[38];

		GPIOC->ODR = ppixel[39];
		GPIOC->ODR = ppixel[39];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[40];
		GPIOC->ODR = ppixel[40];

		GPIOC->ODR = ppixel[41];
		GPIOC->ODR = ppixel[41];

		GPIOC->ODR = ppixel[42];
		GPIOC->ODR = ppixel[42];

		GPIOC->ODR = ppixel[43];
		GPIOC->ODR = ppixel[43];

		GPIOC->ODR = ppixel[44];
		GPIOC->ODR = ppixel[44];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[45];
		GPIOC->ODR = ppixel[45];

		GPIOC->ODR = ppixel[46];
		GPIOC->ODR = ppixel[46];

		GPIOC->ODR = ppixel[47];
		GPIOC->ODR = ppixel[47];

		GPIOC->ODR = ppixel[48];
		GPIOC->ODR = ppixel[48];

		GPIOC->ODR = ppixel[49];
		GPIOC->ODR = ppixel[49];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[180];
		GPIOC->ODR = Score_val[180];

		GPIOC->ODR = Score_val[181];
		GPIOC->ODR = Score_val[181];

		GPIOC->ODR = Score_val[182];
		GPIOC->ODR = Score_val[182];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[183];
		GPIOC->ODR = Score_val[183];

		GPIOC->ODR = Score_val[184];
		GPIOC->ODR = Score_val[184];

		GPIOC->ODR = Score_val[185];
		GPIOC->ODR = Score_val[185];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[186];
		GPIOC->ODR = Score_val[186];

		GPIOC->ODR = Score_val[187];
		GPIOC->ODR = Score_val[187];

		GPIOC->ODR = Score_val[188];
		GPIOC->ODR = Score_val[188];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 245 ... 249: //1010b


		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[50];
		GPIOC->ODR = ppixel[50];

		GPIOC->ODR = ppixel[51];
		GPIOC->ODR = ppixel[51];

		GPIOC->ODR = ppixel[52];
		GPIOC->ODR = ppixel[52];

		GPIOC->ODR = ppixel[53];
		GPIOC->ODR = ppixel[53];

		GPIOC->ODR = ppixel[54];
		GPIOC->ODR = ppixel[54];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[55];
		GPIOC->ODR = ppixel[55];

		GPIOC->ODR = ppixel[56];
		GPIOC->ODR = ppixel[56];

		GPIOC->ODR = ppixel[57];
		GPIOC->ODR = ppixel[57];

		GPIOC->ODR = ppixel[58];
		GPIOC->ODR = ppixel[58];

		GPIOC->ODR = ppixel[59];
		GPIOC->ODR = ppixel[59];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[60];
		GPIOC->ODR = ppixel[60];

		GPIOC->ODR = ppixel[61];
		GPIOC->ODR = ppixel[61];

		GPIOC->ODR = ppixel[62];
		GPIOC->ODR = ppixel[62];

		GPIOC->ODR = ppixel[63];
		GPIOC->ODR = ppixel[63];

		GPIOC->ODR = ppixel[64];
		GPIOC->ODR = ppixel[64];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[65];
		GPIOC->ODR = ppixel[65];

		GPIOC->ODR = ppixel[66];
		GPIOC->ODR = ppixel[66];

		GPIOC->ODR = ppixel[67];
		GPIOC->ODR = ppixel[67];

		GPIOC->ODR = ppixel[68];
		GPIOC->ODR = ppixel[68];

		GPIOC->ODR = ppixel[69];
		GPIOC->ODR = ppixel[69];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[70];
		GPIOC->ODR = ppixel[70];

		GPIOC->ODR = ppixel[71];
		GPIOC->ODR = ppixel[71];

		GPIOC->ODR = ppixel[72];
		GPIOC->ODR = ppixel[72];

		GPIOC->ODR = ppixel[73];
		GPIOC->ODR = ppixel[73];

		GPIOC->ODR = ppixel[74];
		GPIOC->ODR = ppixel[74];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[75];
		GPIOC->ODR = ppixel[75];

		GPIOC->ODR = ppixel[76];
		GPIOC->ODR = ppixel[76];

		GPIOC->ODR = ppixel[77];
		GPIOC->ODR = ppixel[77];

		GPIOC->ODR = ppixel[78];
		GPIOC->ODR = ppixel[78];

		GPIOC->ODR = ppixel[79];
		GPIOC->ODR = ppixel[79];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[80];
		GPIOC->ODR = ppixel[80];

		GPIOC->ODR = ppixel[81];
		GPIOC->ODR = ppixel[81];

		GPIOC->ODR = ppixel[82];
		GPIOC->ODR = ppixel[82];

		GPIOC->ODR = ppixel[83];
		GPIOC->ODR = ppixel[83];

		GPIOC->ODR = ppixel[84];
		GPIOC->ODR = ppixel[84];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[85];
		GPIOC->ODR = ppixel[85];

		GPIOC->ODR = ppixel[86];
		GPIOC->ODR = ppixel[86];

		GPIOC->ODR = ppixel[87];
		GPIOC->ODR = ppixel[87];

		GPIOC->ODR = ppixel[88];
		GPIOC->ODR = ppixel[88];

		GPIOC->ODR = ppixel[89];
		GPIOC->ODR = ppixel[89];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[90];
		GPIOC->ODR = ppixel[90];

		GPIOC->ODR = ppixel[91];
		GPIOC->ODR = ppixel[91];

		GPIOC->ODR = ppixel[92];
		GPIOC->ODR = ppixel[92];

		GPIOC->ODR = ppixel[93];
		GPIOC->ODR = ppixel[93];

		GPIOC->ODR = ppixel[94];
		GPIOC->ODR = ppixel[94];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[95];
		GPIOC->ODR = ppixel[95];

		GPIOC->ODR = ppixel[96];
		GPIOC->ODR = ppixel[96];

		GPIOC->ODR = ppixel[97];
		GPIOC->ODR = ppixel[97];

		GPIOC->ODR = ppixel[98];
		GPIOC->ODR = ppixel[98];

		GPIOC->ODR = ppixel[99];
		GPIOC->ODR = ppixel[99];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[189];
		GPIOC->ODR = Score_val[189];

		GPIOC->ODR = Score_val[190];
		GPIOC->ODR = Score_val[190];

		GPIOC->ODR = Score_val[191];
		GPIOC->ODR = Score_val[191];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[192];
		GPIOC->ODR = Score_val[192];

		GPIOC->ODR = Score_val[193];
		GPIOC->ODR = Score_val[193];

		GPIOC->ODR = Score_val[194];
		GPIOC->ODR = Score_val[194];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[195];
		GPIOC->ODR = Score_val[195];

		GPIOC->ODR = Score_val[196];
		GPIOC->ODR = Score_val[196];

		GPIOC->ODR = Score_val[197];
		GPIOC->ODR = Score_val[197];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 250 ... 254: //1010c

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[100];
		GPIOC->ODR = ppixel[100];

		GPIOC->ODR = ppixel[101];
		GPIOC->ODR = ppixel[101];

		GPIOC->ODR = ppixel[102];
		GPIOC->ODR = ppixel[102];

		GPIOC->ODR = ppixel[103];
		GPIOC->ODR = ppixel[103];

		GPIOC->ODR = ppixel[104];
		GPIOC->ODR = ppixel[104];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[105];
		GPIOC->ODR = ppixel[105];

		GPIOC->ODR = ppixel[106];
		GPIOC->ODR = ppixel[106];

		GPIOC->ODR = ppixel[107];
		GPIOC->ODR = ppixel[107];

		GPIOC->ODR = ppixel[108];
		GPIOC->ODR = ppixel[108];

		GPIOC->ODR = ppixel[109];
		GPIOC->ODR = ppixel[109];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[110];
		GPIOC->ODR = ppixel[110];

		GPIOC->ODR = ppixel[111];
		GPIOC->ODR = ppixel[111];

		GPIOC->ODR = ppixel[112];
		GPIOC->ODR = ppixel[112];

		GPIOC->ODR = ppixel[113];
		GPIOC->ODR = ppixel[113];

		GPIOC->ODR = ppixel[114];
		GPIOC->ODR = ppixel[114];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[115];
		GPIOC->ODR = ppixel[115];

		GPIOC->ODR = ppixel[116];
		GPIOC->ODR = ppixel[116];

		GPIOC->ODR = ppixel[117];
		GPIOC->ODR = ppixel[117];

		GPIOC->ODR = ppixel[118];
		GPIOC->ODR = ppixel[118];

		GPIOC->ODR = ppixel[119];
		GPIOC->ODR = ppixel[119];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[120];
		GPIOC->ODR = ppixel[120];

		GPIOC->ODR = ppixel[121];
		GPIOC->ODR = ppixel[121];

		GPIOC->ODR = ppixel[122];
		GPIOC->ODR = ppixel[122];

		GPIOC->ODR = ppixel[123];
		GPIOC->ODR = ppixel[123];

		GPIOC->ODR = ppixel[124];
		GPIOC->ODR = ppixel[124];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[125];
		GPIOC->ODR = ppixel[125];

		GPIOC->ODR = ppixel[126];
		GPIOC->ODR = ppixel[126];

		GPIOC->ODR = ppixel[127];
		GPIOC->ODR = ppixel[127];

		GPIOC->ODR = ppixel[128];
		GPIOC->ODR = ppixel[128];

		GPIOC->ODR = ppixel[129];
		GPIOC->ODR = ppixel[129];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[130];
		GPIOC->ODR = ppixel[130];

		GPIOC->ODR = ppixel[131];
		GPIOC->ODR = ppixel[131];

		GPIOC->ODR = ppixel[132];
		GPIOC->ODR = ppixel[132];

		GPIOC->ODR = ppixel[133];
		GPIOC->ODR = ppixel[133];

		GPIOC->ODR = ppixel[134];
		GPIOC->ODR = ppixel[134];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[135];
		GPIOC->ODR = ppixel[135];

		GPIOC->ODR = ppixel[136];
		GPIOC->ODR = ppixel[136];

		GPIOC->ODR = ppixel[137];
		GPIOC->ODR = ppixel[137];

		GPIOC->ODR = ppixel[138];
		GPIOC->ODR = ppixel[138];

		GPIOC->ODR = ppixel[139];
		GPIOC->ODR = ppixel[139];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[140];
		GPIOC->ODR = ppixel[140];

		GPIOC->ODR = ppixel[141];
		GPIOC->ODR = ppixel[141];

		GPIOC->ODR = ppixel[142];
		GPIOC->ODR = ppixel[142];

		GPIOC->ODR = ppixel[143];
		GPIOC->ODR = ppixel[143];

		GPIOC->ODR = ppixel[144];
		GPIOC->ODR = ppixel[144];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[145];
		GPIOC->ODR = ppixel[145];

		GPIOC->ODR = ppixel[146];
		GPIOC->ODR = ppixel[146];

		GPIOC->ODR = ppixel[147];
		GPIOC->ODR = ppixel[147];

		GPIOC->ODR = ppixel[148];
		GPIOC->ODR = ppixel[148];

		GPIOC->ODR = ppixel[149];
		GPIOC->ODR = ppixel[149];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[198];
		GPIOC->ODR = Score_val[198];

		GPIOC->ODR = Score_val[199];
		GPIOC->ODR = Score_val[199];

		GPIOC->ODR = Score_val[200];
		GPIOC->ODR = Score_val[200];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[201];
		GPIOC->ODR = Score_val[201];

		GPIOC->ODR = Score_val[202];
		GPIOC->ODR = Score_val[202];

		GPIOC->ODR = Score_val[203];
		GPIOC->ODR = Score_val[203];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[204];
		GPIOC->ODR = Score_val[204];

		GPIOC->ODR = Score_val[205];
		GPIOC->ODR = Score_val[205];

		GPIOC->ODR = Score_val[206];
		GPIOC->ODR = Score_val[206];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 255 ... 259: //1010d

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[150];
		GPIOC->ODR = ppixel[150];

		GPIOC->ODR = ppixel[151];
		GPIOC->ODR = ppixel[151];

		GPIOC->ODR = ppixel[152];
		GPIOC->ODR = ppixel[152];

		GPIOC->ODR = ppixel[153];
		GPIOC->ODR = ppixel[153];

		GPIOC->ODR = ppixel[154];
		GPIOC->ODR = ppixel[154];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[155];
		GPIOC->ODR = ppixel[155];

		GPIOC->ODR = ppixel[156];
		GPIOC->ODR = ppixel[156];

		GPIOC->ODR = ppixel[157];
		GPIOC->ODR = ppixel[157];

		GPIOC->ODR = ppixel[158];
		GPIOC->ODR = ppixel[158];

		GPIOC->ODR = ppixel[159];
		GPIOC->ODR = ppixel[159];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[160];
		GPIOC->ODR = ppixel[160];

		GPIOC->ODR = ppixel[161];
		GPIOC->ODR = ppixel[161];

		GPIOC->ODR = ppixel[162];
		GPIOC->ODR = ppixel[162];

		GPIOC->ODR = ppixel[163];
		GPIOC->ODR = ppixel[163];

		GPIOC->ODR = ppixel[164];
		GPIOC->ODR = ppixel[164];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[165];
		GPIOC->ODR = ppixel[165];

		GPIOC->ODR = ppixel[166];
		GPIOC->ODR = ppixel[166];

		GPIOC->ODR = ppixel[167];
		GPIOC->ODR = ppixel[167];

		GPIOC->ODR = ppixel[168];
		GPIOC->ODR = ppixel[168];

		GPIOC->ODR = ppixel[169];
		GPIOC->ODR = ppixel[169];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[170];
		GPIOC->ODR = ppixel[170];

		GPIOC->ODR = ppixel[171];
		GPIOC->ODR = ppixel[171];

		GPIOC->ODR = ppixel[172];
		GPIOC->ODR = ppixel[172];

		GPIOC->ODR = ppixel[173];
		GPIOC->ODR = ppixel[173];

		GPIOC->ODR = ppixel[174];
		GPIOC->ODR = ppixel[174];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[175];
		GPIOC->ODR = ppixel[175];

		GPIOC->ODR = ppixel[176];
		GPIOC->ODR = ppixel[176];

		GPIOC->ODR = ppixel[177];
		GPIOC->ODR = ppixel[177];

		GPIOC->ODR = ppixel[178];
		GPIOC->ODR = ppixel[178];

		GPIOC->ODR = ppixel[179];
		GPIOC->ODR = ppixel[179];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[180];
		GPIOC->ODR = ppixel[180];

		GPIOC->ODR = ppixel[181];
		GPIOC->ODR = ppixel[181];

		GPIOC->ODR = ppixel[182];
		GPIOC->ODR = ppixel[182];

		GPIOC->ODR = ppixel[183];
		GPIOC->ODR = ppixel[183];

		GPIOC->ODR = ppixel[184];
		GPIOC->ODR = ppixel[184];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[185];
		GPIOC->ODR = ppixel[185];

		GPIOC->ODR = ppixel[186];
		GPIOC->ODR = ppixel[186];

		GPIOC->ODR = ppixel[187];
		GPIOC->ODR = ppixel[187];

		GPIOC->ODR = ppixel[188];
		GPIOC->ODR = ppixel[188];

		GPIOC->ODR = ppixel[189];
		GPIOC->ODR = ppixel[189];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[190];
		GPIOC->ODR = ppixel[190];

		GPIOC->ODR = ppixel[191];
		GPIOC->ODR = ppixel[191];

		GPIOC->ODR = ppixel[192];
		GPIOC->ODR = ppixel[192];

		GPIOC->ODR = ppixel[193];
		GPIOC->ODR = ppixel[193];

		GPIOC->ODR = ppixel[194];
		GPIOC->ODR = ppixel[194];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[195];
		GPIOC->ODR = ppixel[195];

		GPIOC->ODR = ppixel[196];
		GPIOC->ODR = ppixel[196];

		GPIOC->ODR = ppixel[197];
		GPIOC->ODR = ppixel[197];

		GPIOC->ODR = ppixel[198];
		GPIOC->ODR = ppixel[198];

		GPIOC->ODR = ppixel[199];
		GPIOC->ODR = ppixel[199];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[207];
		GPIOC->ODR = Score_val[207];

		GPIOC->ODR = Score_val[208];
		GPIOC->ODR = Score_val[208];

		GPIOC->ODR = Score_val[209];
		GPIOC->ODR = Score_val[209];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[210];
		GPIOC->ODR = Score_val[210];

		GPIOC->ODR = Score_val[211];
		GPIOC->ODR = Score_val[211];

		GPIOC->ODR = Score_val[212];
		GPIOC->ODR = Score_val[212];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[213];
		GPIOC->ODR = Score_val[213];

		GPIOC->ODR = Score_val[214];
		GPIOC->ODR = Score_val[214];

		GPIOC->ODR = Score_val[215];
		GPIOC->ODR = Score_val[215];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 260 ... 264: //1010e

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green; // dot
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[200];
		GPIOC->ODR = ppixel[200];

		GPIOC->ODR = ppixel[201];
		GPIOC->ODR = ppixel[201];

		GPIOC->ODR = ppixel[202];
		GPIOC->ODR = ppixel[202];

		GPIOC->ODR = ppixel[203];
		GPIOC->ODR = ppixel[203];

		GPIOC->ODR = ppixel[204];
		GPIOC->ODR = ppixel[204];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[205];
		GPIOC->ODR = ppixel[205];

		GPIOC->ODR = ppixel[206];
		GPIOC->ODR = ppixel[206];

		GPIOC->ODR = ppixel[207];
		GPIOC->ODR = ppixel[207];

		GPIOC->ODR = ppixel[208];
		GPIOC->ODR = ppixel[208];

		GPIOC->ODR = ppixel[209];
		GPIOC->ODR = ppixel[209];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[210];
		GPIOC->ODR = ppixel[210];

		GPIOC->ODR = ppixel[211];
		GPIOC->ODR = ppixel[211];

		GPIOC->ODR = ppixel[212];
		GPIOC->ODR = ppixel[212];

		GPIOC->ODR = ppixel[213];
		GPIOC->ODR = ppixel[213];

		GPIOC->ODR = ppixel[214];
		GPIOC->ODR = ppixel[214];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[215];
		GPIOC->ODR = ppixel[215];

		GPIOC->ODR = ppixel[216];
		GPIOC->ODR = ppixel[216];

		GPIOC->ODR = ppixel[217];
		GPIOC->ODR = ppixel[217];

		GPIOC->ODR = ppixel[218];
		GPIOC->ODR = ppixel[218];

		GPIOC->ODR = ppixel[219];
		GPIOC->ODR = ppixel[219];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[220];
		GPIOC->ODR = ppixel[220];

		GPIOC->ODR = ppixel[221];
		GPIOC->ODR = ppixel[221];

		GPIOC->ODR = ppixel[222];
		GPIOC->ODR = ppixel[222];

		GPIOC->ODR = ppixel[223];
		GPIOC->ODR = ppixel[223];

		GPIOC->ODR = ppixel[224];
		GPIOC->ODR = ppixel[224];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[225];
		GPIOC->ODR = ppixel[225];

		GPIOC->ODR = ppixel[226];
		GPIOC->ODR = ppixel[226];

		GPIOC->ODR = ppixel[227];
		GPIOC->ODR = ppixel[227];

		GPIOC->ODR = ppixel[228];
		GPIOC->ODR = ppixel[228];

		GPIOC->ODR = ppixel[229];
		GPIOC->ODR = ppixel[229];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[230];
		GPIOC->ODR = ppixel[230];

		GPIOC->ODR = ppixel[231];
		GPIOC->ODR = ppixel[231];

		GPIOC->ODR = ppixel[232];
		GPIOC->ODR = ppixel[232];

		GPIOC->ODR = ppixel[233];
		GPIOC->ODR = ppixel[233];

		GPIOC->ODR = ppixel[234];
		GPIOC->ODR = ppixel[234];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[235];
		GPIOC->ODR = ppixel[235];

		GPIOC->ODR = ppixel[236];
		GPIOC->ODR = ppixel[236];

		GPIOC->ODR = ppixel[237];
		GPIOC->ODR = ppixel[237];

		GPIOC->ODR = ppixel[238];
		GPIOC->ODR = ppixel[238];

		GPIOC->ODR = ppixel[239];
		GPIOC->ODR = ppixel[239];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[240];
		GPIOC->ODR = ppixel[240];

		GPIOC->ODR = ppixel[241];
		GPIOC->ODR = ppixel[241];

		GPIOC->ODR = ppixel[242];
		GPIOC->ODR = ppixel[242];

		GPIOC->ODR = ppixel[243];
		GPIOC->ODR = ppixel[243];

		GPIOC->ODR = ppixel[244];
		GPIOC->ODR = ppixel[244];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[245];
		GPIOC->ODR = ppixel[245];

		GPIOC->ODR = ppixel[246];
		GPIOC->ODR = ppixel[246];

		GPIOC->ODR = ppixel[247];
		GPIOC->ODR = ppixel[247];

		GPIOC->ODR = ppixel[248];
		GPIOC->ODR = ppixel[248];

		GPIOC->ODR = ppixel[249];
		GPIOC->ODR = ppixel[249];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[216];
		GPIOC->ODR = Score_val[216];

		GPIOC->ODR = Score_val[217];
		GPIOC->ODR = Score_val[217];

		GPIOC->ODR = Score_val[218];
		GPIOC->ODR = Score_val[218];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[219];
		GPIOC->ODR = Score_val[219];

		GPIOC->ODR = Score_val[220];
		GPIOC->ODR = Score_val[220];

		GPIOC->ODR = Score_val[221];
		GPIOC->ODR = Score_val[221];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[222];
		GPIOC->ODR = Score_val[222];

		GPIOC->ODR = Score_val[223];
		GPIOC->ODR = Score_val[223];

		GPIOC->ODR = Score_val[224];
		GPIOC->ODR = Score_val[224];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 265 ... 269:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		while(waste_of_time<50)
		{
			GPIOC->ODR = Deep_Green;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = White_OFF;
		break;
		case 270 ... 270:
		GPIOC->ODR = White_OFF;
		break;
		case 271 ... 274:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		while(waste_of_time<50)
		{
			GPIOC->ODR = Deep_Green;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = White_OFF;
		break;
		}
		break;
		break;
	}//1010a switch
		} // visko piesimo switch
	break; // pirmo page break;
	case 2:
		switch(Lines)
		{
		case 0 ... 30:
		GPIOC->ODR &= White_OFF;
		break;
		case 31 ... 55: //scorecase = 1
		while(waste_of_time<18)
		{
			GPIOC->ODR &= White_OFF;
			waste_of_time++;
		}
		waste_of_time = 0;
		switch(Lines)
		{
		case 31 ... 35: //SSS1
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//CCC1

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//OOO1

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR1

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE1

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::1

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 36 ... 40: //SSS2
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //CCC2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //OOO2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::2

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		break;
		case 41 ... 45:
		GPIOC->ODR = White_OFF; //SSS3
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //CCC3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //OOO3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::3

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		break;
		case 46 ... 50:
		GPIOC->ODR = White_OFF; //SSS4
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //CCC4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //OOO4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::4

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		break;
		case 51 ... 55:
		GPIOC->ODR = Deep_Green; //SSS5
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = White_OFF; //CCC5
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//OOO5

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR5

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE5

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::5

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		}
		break;
		case 95 ... 600: //scorecase = 2
		while(waste_of_time<1)
		{
			GPIOC->ODR &= White_OFF;
			waste_of_time++;
		}
		waste_of_time = 0;
		switch(Lines)
		{
		case 95 ... 134:
		switch(Lines)
			{
			case 95  ... 99:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 100 ... 104: //1111a

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[0]; // first pixel of first letter of first rank
			GPIOC->ODR = pixel[0];

			GPIOC->ODR = pixel[1];
			GPIOC->ODR = pixel[1];

			GPIOC->ODR = pixel[2];
			GPIOC->ODR = pixel[2];

			GPIOC->ODR = pixel[3];
			GPIOC->ODR = pixel[3];

			GPIOC->ODR = pixel[4];
			GPIOC->ODR = pixel[4];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[5];
			GPIOC->ODR = pixel[5];

			GPIOC->ODR = pixel[6];
			GPIOC->ODR = pixel[6];

			GPIOC->ODR = pixel[7];
			GPIOC->ODR = pixel[7];

			GPIOC->ODR = pixel[8];
			GPIOC->ODR = pixel[8];

			GPIOC->ODR = pixel[9];
			GPIOC->ODR = pixel[9];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[10];
			GPIOC->ODR = pixel[10];

			GPIOC->ODR = pixel[11];
			GPIOC->ODR = pixel[11];

			GPIOC->ODR = pixel[12];
			GPIOC->ODR = pixel[12];

			GPIOC->ODR = pixel[13];
			GPIOC->ODR = pixel[13];

			GPIOC->ODR = pixel[14];
			GPIOC->ODR = pixel[14];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[15];
			GPIOC->ODR = pixel[15];

			GPIOC->ODR = pixel[16];
			GPIOC->ODR = pixel[16];

			GPIOC->ODR = pixel[17];
			GPIOC->ODR = pixel[17];

			GPIOC->ODR = pixel[18];
			GPIOC->ODR = pixel[18];

			GPIOC->ODR = pixel[19];
			GPIOC->ODR = pixel[19];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[20];
			GPIOC->ODR = pixel[20];

			GPIOC->ODR = pixel[21];
			GPIOC->ODR = pixel[21];

			GPIOC->ODR = pixel[22];
			GPIOC->ODR = pixel[22];

			GPIOC->ODR = pixel[23];
			GPIOC->ODR = pixel[23];

			GPIOC->ODR = pixel[24];
			GPIOC->ODR = pixel[24];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[25];
			GPIOC->ODR = pixel[25];

			GPIOC->ODR = pixel[26];
			GPIOC->ODR = pixel[26];

			GPIOC->ODR = pixel[27];
			GPIOC->ODR = pixel[27];

			GPIOC->ODR = pixel[28];
			GPIOC->ODR = pixel[28];

			GPIOC->ODR = pixel[29];
			GPIOC->ODR = pixel[29];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[30];
			GPIOC->ODR = pixel[30];

			GPIOC->ODR = pixel[31];
			GPIOC->ODR = pixel[31];

			GPIOC->ODR = pixel[32];
			GPIOC->ODR = pixel[32];

			GPIOC->ODR = pixel[33];
			GPIOC->ODR = pixel[33];

			GPIOC->ODR = pixel[34];
			GPIOC->ODR = pixel[34];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[35];
			GPIOC->ODR = pixel[35];

			GPIOC->ODR = pixel[36];
			GPIOC->ODR = pixel[36];

			GPIOC->ODR = pixel[37];
			GPIOC->ODR = pixel[37];

			GPIOC->ODR = pixel[38];
			GPIOC->ODR = pixel[38];

			GPIOC->ODR = pixel[39];
			GPIOC->ODR = pixel[39];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[40];
			GPIOC->ODR = pixel[40];

			GPIOC->ODR = pixel[41];
			GPIOC->ODR = pixel[41];

			GPIOC->ODR = pixel[42];
			GPIOC->ODR = pixel[42];

			GPIOC->ODR = pixel[43];
			GPIOC->ODR = pixel[43];

			GPIOC->ODR = pixel[44];
			GPIOC->ODR = pixel[44];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[45];
			GPIOC->ODR = pixel[45];

			GPIOC->ODR = pixel[46];
			GPIOC->ODR = pixel[46];

			GPIOC->ODR = pixel[47];
			GPIOC->ODR = pixel[47];

			GPIOC->ODR = pixel[48];
			GPIOC->ODR = pixel[48];

			GPIOC->ODR = pixel[49];
			GPIOC->ODR = pixel[49];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[0];
			GPIOC->ODR = Score_val[0];

			GPIOC->ODR = Score_val[1];
			GPIOC->ODR = Score_val[1];

			GPIOC->ODR = Score_val[2];
			GPIOC->ODR = Score_val[2];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[3];
			GPIOC->ODR = Score_val[3];

			GPIOC->ODR = Score_val[4];
			GPIOC->ODR = Score_val[4];

			GPIOC->ODR = Score_val[5];
			GPIOC->ODR = Score_val[5];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[6];
			GPIOC->ODR = Score_val[6];

			GPIOC->ODR = Score_val[7];
			GPIOC->ODR = Score_val[7];

			GPIOC->ODR = Score_val[8];
			GPIOC->ODR = Score_val[8];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			break;
			case 105 ... 109: //1111b

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[50];
			GPIOC->ODR = pixel[50];

			GPIOC->ODR = pixel[51];
			GPIOC->ODR = pixel[51];

			GPIOC->ODR = pixel[52];
			GPIOC->ODR = pixel[52];

			GPIOC->ODR = pixel[53];
			GPIOC->ODR = pixel[53];

			GPIOC->ODR = pixel[54];
			GPIOC->ODR = pixel[54];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[55];
			GPIOC->ODR = pixel[55];

			GPIOC->ODR = pixel[56];
			GPIOC->ODR = pixel[56];

			GPIOC->ODR = pixel[57];
			GPIOC->ODR = pixel[57];

			GPIOC->ODR = pixel[58];
			GPIOC->ODR = pixel[58];

			GPIOC->ODR = pixel[59];
			GPIOC->ODR = pixel[59];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[60];
			GPIOC->ODR = pixel[60];

			GPIOC->ODR = pixel[61];
			GPIOC->ODR = pixel[61];

			GPIOC->ODR = pixel[62];
			GPIOC->ODR = pixel[62];

			GPIOC->ODR = pixel[63];
			GPIOC->ODR = pixel[63];

			GPIOC->ODR = pixel[64];
			GPIOC->ODR = pixel[64];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[65];
			GPIOC->ODR = pixel[65];

			GPIOC->ODR = pixel[66];
			GPIOC->ODR = pixel[66];

			GPIOC->ODR = pixel[67];
			GPIOC->ODR = pixel[67];

			GPIOC->ODR = pixel[68];
			GPIOC->ODR = pixel[68];

			GPIOC->ODR = pixel[69];
			GPIOC->ODR = pixel[69];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[70];
			GPIOC->ODR = pixel[70];

			GPIOC->ODR = pixel[71];
			GPIOC->ODR = pixel[71];

			GPIOC->ODR = pixel[72];
			GPIOC->ODR = pixel[72];

			GPIOC->ODR = pixel[73];
			GPIOC->ODR = pixel[73];

			GPIOC->ODR = pixel[74];
			GPIOC->ODR = pixel[74];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[75];
			GPIOC->ODR = pixel[75];

			GPIOC->ODR = pixel[76];
			GPIOC->ODR = pixel[76];

			GPIOC->ODR = pixel[77];
			GPIOC->ODR = pixel[77];

			GPIOC->ODR = pixel[78];
			GPIOC->ODR = pixel[78];

			GPIOC->ODR = pixel[79];
			GPIOC->ODR = pixel[79];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[80];
			GPIOC->ODR = pixel[80];

			GPIOC->ODR = pixel[81];
			GPIOC->ODR = pixel[81];

			GPIOC->ODR = pixel[82];
			GPIOC->ODR = pixel[82];

			GPIOC->ODR = pixel[83];
			GPIOC->ODR = pixel[83];

			GPIOC->ODR = pixel[84];
			GPIOC->ODR = pixel[84];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[85];
			GPIOC->ODR = pixel[85];

			GPIOC->ODR = pixel[86];
			GPIOC->ODR = pixel[86];

			GPIOC->ODR = pixel[87];
			GPIOC->ODR = pixel[87];

			GPIOC->ODR = pixel[88];
			GPIOC->ODR = pixel[88];

			GPIOC->ODR = pixel[89];
			GPIOC->ODR = pixel[89];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[90];
			GPIOC->ODR = pixel[90];

			GPIOC->ODR = pixel[91];
			GPIOC->ODR = pixel[91];

			GPIOC->ODR = pixel[92];
			GPIOC->ODR = pixel[92];

			GPIOC->ODR = pixel[93];
			GPIOC->ODR = pixel[93];

			GPIOC->ODR = pixel[94];
			GPIOC->ODR = pixel[94];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[95];
			GPIOC->ODR = pixel[95];

			GPIOC->ODR = pixel[96];
			GPIOC->ODR = pixel[96];

			GPIOC->ODR = pixel[97];
			GPIOC->ODR = pixel[97];

			GPIOC->ODR = pixel[98];
			GPIOC->ODR = pixel[98];

			GPIOC->ODR = pixel[99];
			GPIOC->ODR = pixel[99];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[9];
			GPIOC->ODR = Score_val[9];

			GPIOC->ODR = Score_val[10];
			GPIOC->ODR = Score_val[10];

			GPIOC->ODR = Score_val[11];
			GPIOC->ODR = Score_val[11];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[12];
			GPIOC->ODR = Score_val[12];

			GPIOC->ODR = Score_val[13];
			GPIOC->ODR = Score_val[13];

			GPIOC->ODR = Score_val[14];
			GPIOC->ODR = Score_val[14];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[15];
			GPIOC->ODR = Score_val[15];

			GPIOC->ODR = Score_val[16];
			GPIOC->ODR = Score_val[16];

			GPIOC->ODR = Score_val[17];
			GPIOC->ODR = Score_val[17];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 110 ... 114: //1111c

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[100];
			GPIOC->ODR = pixel[100];

			GPIOC->ODR = pixel[101];
			GPIOC->ODR = pixel[101];

			GPIOC->ODR = pixel[102];
			GPIOC->ODR = pixel[102];

			GPIOC->ODR = pixel[103];
			GPIOC->ODR = pixel[103];

			GPIOC->ODR = pixel[104];
			GPIOC->ODR = pixel[104];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[105];
			GPIOC->ODR = pixel[105];

			GPIOC->ODR = pixel[106];
			GPIOC->ODR = pixel[106];

			GPIOC->ODR = pixel[107];
			GPIOC->ODR = pixel[107];

			GPIOC->ODR = pixel[108];
			GPIOC->ODR = pixel[108];

			GPIOC->ODR = pixel[109];
			GPIOC->ODR = pixel[109];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[110];
			GPIOC->ODR = pixel[110];

			GPIOC->ODR = pixel[111];
			GPIOC->ODR = pixel[111];

			GPIOC->ODR = pixel[112];
			GPIOC->ODR = pixel[112];

			GPIOC->ODR = pixel[113];
			GPIOC->ODR = pixel[113];

			GPIOC->ODR = pixel[114];
			GPIOC->ODR = pixel[114];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[115];
			GPIOC->ODR = pixel[115];

			GPIOC->ODR = pixel[116];
			GPIOC->ODR = pixel[116];

			GPIOC->ODR = pixel[117];
			GPIOC->ODR = pixel[117];

			GPIOC->ODR = pixel[118];
			GPIOC->ODR = pixel[118];

			GPIOC->ODR = pixel[119];
			GPIOC->ODR = pixel[119];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[120];
			GPIOC->ODR = pixel[120];

			GPIOC->ODR = pixel[121];
			GPIOC->ODR = pixel[121];

			GPIOC->ODR = pixel[122];
			GPIOC->ODR = pixel[122];

			GPIOC->ODR = pixel[123];
			GPIOC->ODR = pixel[123];

			GPIOC->ODR = pixel[124];
			GPIOC->ODR = pixel[124];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[125];
			GPIOC->ODR = pixel[125];

			GPIOC->ODR = pixel[126];
			GPIOC->ODR = pixel[126];

			GPIOC->ODR = pixel[127];
			GPIOC->ODR = pixel[127];

			GPIOC->ODR = pixel[128];
			GPIOC->ODR = pixel[128];

			GPIOC->ODR = pixel[129];
			GPIOC->ODR = pixel[129];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[130];
			GPIOC->ODR = pixel[130];

			GPIOC->ODR = pixel[131];
			GPIOC->ODR = pixel[131];

			GPIOC->ODR = pixel[132];
			GPIOC->ODR = pixel[132];

			GPIOC->ODR = pixel[133];
			GPIOC->ODR = pixel[133];

			GPIOC->ODR = pixel[134];
			GPIOC->ODR = pixel[134];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[135];
			GPIOC->ODR = pixel[135];

			GPIOC->ODR = pixel[136];
			GPIOC->ODR = pixel[136];

			GPIOC->ODR = pixel[137];
			GPIOC->ODR = pixel[137];

			GPIOC->ODR = pixel[138];
			GPIOC->ODR = pixel[138];

			GPIOC->ODR = pixel[139];
			GPIOC->ODR = pixel[139];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[140];
			GPIOC->ODR = pixel[140];

			GPIOC->ODR = pixel[141];
			GPIOC->ODR = pixel[141];

			GPIOC->ODR = pixel[142];
			GPIOC->ODR = pixel[142];

			GPIOC->ODR = pixel[143];
			GPIOC->ODR = pixel[143];

			GPIOC->ODR = pixel[144];
			GPIOC->ODR = pixel[144];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[145];
			GPIOC->ODR = pixel[145];

			GPIOC->ODR = pixel[146];
			GPIOC->ODR = pixel[146];

			GPIOC->ODR = pixel[147];
			GPIOC->ODR = pixel[147];

			GPIOC->ODR = pixel[148];
			GPIOC->ODR = pixel[148];

			GPIOC->ODR = pixel[149];
			GPIOC->ODR = pixel[149];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[18];
			GPIOC->ODR = Score_val[19];

			GPIOC->ODR = Score_val[19];
			GPIOC->ODR = Score_val[19];

			GPIOC->ODR = Score_val[20];
			GPIOC->ODR = Score_val[20];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[21];
			GPIOC->ODR = Score_val[21];

			GPIOC->ODR = Score_val[22];
			GPIOC->ODR = Score_val[22];

			GPIOC->ODR = Score_val[23];
			GPIOC->ODR = Score_val[23];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[24];
			GPIOC->ODR = Score_val[24];

			GPIOC->ODR = Score_val[25];
			GPIOC->ODR = Score_val[25];

			GPIOC->ODR = Score_val[26];
			GPIOC->ODR = Score_val[26];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 115 ... 119://1111d
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[150];
			GPIOC->ODR = pixel[150];

			GPIOC->ODR = pixel[151];
			GPIOC->ODR = pixel[151];

			GPIOC->ODR = pixel[152];
			GPIOC->ODR = pixel[152];

			GPIOC->ODR = pixel[153];
			GPIOC->ODR = pixel[153];

			GPIOC->ODR = pixel[154];
			GPIOC->ODR = pixel[154];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[155];
			GPIOC->ODR = pixel[155];

			GPIOC->ODR = pixel[156];
			GPIOC->ODR = pixel[156];

			GPIOC->ODR = pixel[157];
			GPIOC->ODR = pixel[157];

			GPIOC->ODR = pixel[158];
			GPIOC->ODR = pixel[158];

			GPIOC->ODR = pixel[159];
			GPIOC->ODR = pixel[159];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[160];
			GPIOC->ODR = pixel[160];

			GPIOC->ODR = pixel[161];
			GPIOC->ODR = pixel[161];

			GPIOC->ODR = pixel[162];
			GPIOC->ODR = pixel[162];

			GPIOC->ODR = pixel[163];
			GPIOC->ODR = pixel[163];

			GPIOC->ODR = pixel[164];
			GPIOC->ODR = pixel[164];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[165];
			GPIOC->ODR = pixel[165];

			GPIOC->ODR = pixel[166];
			GPIOC->ODR = pixel[166];

			GPIOC->ODR = pixel[167];
			GPIOC->ODR = pixel[167];

			GPIOC->ODR = pixel[168];
			GPIOC->ODR = pixel[168];

			GPIOC->ODR = pixel[169];
			GPIOC->ODR = pixel[169];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[170];
			GPIOC->ODR = pixel[170];

			GPIOC->ODR = pixel[171];
			GPIOC->ODR = pixel[171];

			GPIOC->ODR = pixel[172];
			GPIOC->ODR = pixel[172];

			GPIOC->ODR = pixel[173];
			GPIOC->ODR = pixel[173];

			GPIOC->ODR = pixel[174];
			GPIOC->ODR = pixel[174];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[175];
			GPIOC->ODR = pixel[175];

			GPIOC->ODR = pixel[176];
			GPIOC->ODR = pixel[176];

			GPIOC->ODR = pixel[177];
			GPIOC->ODR = pixel[177];

			GPIOC->ODR = pixel[178];
			GPIOC->ODR = pixel[178];

			GPIOC->ODR = pixel[179];
			GPIOC->ODR = pixel[179];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[180];
			GPIOC->ODR = pixel[180];

			GPIOC->ODR = pixel[181];
			GPIOC->ODR = pixel[181];

			GPIOC->ODR = pixel[182];
			GPIOC->ODR = pixel[182];

			GPIOC->ODR = pixel[183];
			GPIOC->ODR = pixel[183];

			GPIOC->ODR = pixel[184];
			GPIOC->ODR = pixel[184];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[185];
			GPIOC->ODR = pixel[185];

			GPIOC->ODR = pixel[186];
			GPIOC->ODR = pixel[186];

			GPIOC->ODR = pixel[187];
			GPIOC->ODR = pixel[187];

			GPIOC->ODR = pixel[188];
			GPIOC->ODR = pixel[188];

			GPIOC->ODR = pixel[189];
			GPIOC->ODR = pixel[189];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[190];
			GPIOC->ODR = pixel[190];

			GPIOC->ODR = pixel[191];
			GPIOC->ODR = pixel[191];

			GPIOC->ODR = pixel[192];
			GPIOC->ODR = pixel[192];

			GPIOC->ODR = pixel[193];
			GPIOC->ODR = pixel[193];

			GPIOC->ODR = pixel[194];
			GPIOC->ODR = pixel[194];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[195];
			GPIOC->ODR = pixel[195];

			GPIOC->ODR = pixel[196];
			GPIOC->ODR = pixel[196];

			GPIOC->ODR = pixel[197];
			GPIOC->ODR = pixel[197];

			GPIOC->ODR = pixel[198];
			GPIOC->ODR = pixel[198];

			GPIOC->ODR = pixel[199];
			GPIOC->ODR = pixel[199];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[27];
			GPIOC->ODR = Score_val[27];

			GPIOC->ODR = Score_val[28];
			GPIOC->ODR = Score_val[28];

			GPIOC->ODR = Score_val[29];
			GPIOC->ODR = Score_val[29];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[30];
			GPIOC->ODR = Score_val[30];

			GPIOC->ODR = Score_val[31];
			GPIOC->ODR = Score_val[31];

			GPIOC->ODR = Score_val[32];
			GPIOC->ODR = Score_val[32];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[33];
			GPIOC->ODR = Score_val[33];

			GPIOC->ODR = Score_val[34];
			GPIOC->ODR = Score_val[34];

			GPIOC->ODR = Score_val[35];
			GPIOC->ODR = Score_val[35];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 120 ... 124://1111e

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;//dot
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[200];
			GPIOC->ODR = pixel[200];

			GPIOC->ODR = pixel[201];
			GPIOC->ODR = pixel[201];

			GPIOC->ODR = pixel[202];
			GPIOC->ODR = pixel[202];

			GPIOC->ODR = pixel[203];
			GPIOC->ODR = pixel[203];

			GPIOC->ODR = pixel[204];
			GPIOC->ODR = pixel[204];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[205];
			GPIOC->ODR = pixel[205];

			GPIOC->ODR = pixel[206];
			GPIOC->ODR = pixel[206];

			GPIOC->ODR = pixel[207];
			GPIOC->ODR = pixel[207];

			GPIOC->ODR = pixel[208];
			GPIOC->ODR = pixel[208];

			GPIOC->ODR = pixel[209];
			GPIOC->ODR = pixel[209];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[210];
			GPIOC->ODR = pixel[210];

			GPIOC->ODR = pixel[211];
			GPIOC->ODR = pixel[211];

			GPIOC->ODR = pixel[212];
			GPIOC->ODR = pixel[212];

			GPIOC->ODR = pixel[213];
			GPIOC->ODR = pixel[213];

			GPIOC->ODR = pixel[214];
			GPIOC->ODR = pixel[214];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[215];
			GPIOC->ODR = pixel[215];

			GPIOC->ODR = pixel[216];
			GPIOC->ODR = pixel[216];

			GPIOC->ODR = pixel[217];
			GPIOC->ODR = pixel[217];

			GPIOC->ODR = pixel[218];
			GPIOC->ODR = pixel[218];

			GPIOC->ODR = pixel[219];
			GPIOC->ODR = pixel[219];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[220];
			GPIOC->ODR = pixel[220];

			GPIOC->ODR = pixel[221];
			GPIOC->ODR = pixel[221];

			GPIOC->ODR = pixel[222];
			GPIOC->ODR = pixel[222];

			GPIOC->ODR = pixel[223];
			GPIOC->ODR = pixel[223];

			GPIOC->ODR = pixel[224];
			GPIOC->ODR = pixel[224];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[225];
			GPIOC->ODR = pixel[225];

			GPIOC->ODR = pixel[226];
			GPIOC->ODR = pixel[226];

			GPIOC->ODR = pixel[227];
			GPIOC->ODR = pixel[227];

			GPIOC->ODR = pixel[228];
			GPIOC->ODR = pixel[228];

			GPIOC->ODR = pixel[229];
			GPIOC->ODR = pixel[229];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[230];
			GPIOC->ODR = pixel[230];

			GPIOC->ODR = pixel[231];
			GPIOC->ODR = pixel[231];

			GPIOC->ODR = pixel[232];
			GPIOC->ODR = pixel[232];

			GPIOC->ODR = pixel[233];
			GPIOC->ODR = pixel[233];

			GPIOC->ODR = pixel[234];
			GPIOC->ODR = pixel[234];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[235];
			GPIOC->ODR = pixel[235];

			GPIOC->ODR = pixel[236];
			GPIOC->ODR = pixel[236];

			GPIOC->ODR = pixel[237];
			GPIOC->ODR = pixel[237];

			GPIOC->ODR = pixel[238];
			GPIOC->ODR = pixel[238];

			GPIOC->ODR = pixel[239];
			GPIOC->ODR = pixel[239];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[240];
			GPIOC->ODR = pixel[240];

			GPIOC->ODR = pixel[241];
			GPIOC->ODR = pixel[241];

			GPIOC->ODR = pixel[242];
			GPIOC->ODR = pixel[242];

			GPIOC->ODR = pixel[243];
			GPIOC->ODR = pixel[243];

			GPIOC->ODR = pixel[244];
			GPIOC->ODR = pixel[244];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[245];
			GPIOC->ODR = pixel[245];

			GPIOC->ODR = pixel[246];
			GPIOC->ODR = pixel[246];

			GPIOC->ODR = pixel[247];
			GPIOC->ODR = pixel[247];

			GPIOC->ODR = pixel[248];
			GPIOC->ODR = pixel[248];

			GPIOC->ODR = pixel[249];
			GPIOC->ODR = pixel[249];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[36];
			GPIOC->ODR = Score_val[36];

			GPIOC->ODR = Score_val[37];
			GPIOC->ODR = Score_val[37];

			GPIOC->ODR = Score_val[38];
			GPIOC->ODR = Score_val[38];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[39];
			GPIOC->ODR = Score_val[39];

			GPIOC->ODR = Score_val[40];
			GPIOC->ODR = Score_val[40];

			GPIOC->ODR = Score_val[41];
			GPIOC->ODR = Score_val[41];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[42];
			GPIOC->ODR = Score_val[42];

			GPIOC->ODR = Score_val[43];
			GPIOC->ODR = Score_val[43];

			GPIOC->ODR = Score_val[44];
			GPIOC->ODR = Score_val[44];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 125 ... 129:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 130 ... 130:
			GPIOC->ODR = White_OFF;
			break;
			case 131 ... 134:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;

			}
		break;
		case 135 ... 169: //twelves
			switch(Lines)
			{
			case 135 ... 139:
			GPIOC->ODR = White_OFF; //1212a
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[250];
			GPIOC->ODR = pixel[250];

			GPIOC->ODR = pixel[251];
			GPIOC->ODR = pixel[251];

			GPIOC->ODR = pixel[252];
			GPIOC->ODR = pixel[252];

			GPIOC->ODR = pixel[253];
			GPIOC->ODR = pixel[253];

			GPIOC->ODR = pixel[254];
			GPIOC->ODR = pixel[254];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[255];
			GPIOC->ODR = pixel[255];

			GPIOC->ODR = pixel[256];
			GPIOC->ODR = pixel[256];

			GPIOC->ODR = pixel[257];
			GPIOC->ODR = pixel[257];

			GPIOC->ODR = pixel[258];
			GPIOC->ODR = pixel[258];

			GPIOC->ODR = pixel[259];
			GPIOC->ODR = pixel[259];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[260];
			GPIOC->ODR = pixel[260];

			GPIOC->ODR = pixel[261];
			GPIOC->ODR = pixel[261];

			GPIOC->ODR = pixel[262];
			GPIOC->ODR = pixel[262];

			GPIOC->ODR = pixel[263];
			GPIOC->ODR = pixel[263];

			GPIOC->ODR = pixel[264];
			GPIOC->ODR = pixel[264];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[265];
			GPIOC->ODR = pixel[265];

			GPIOC->ODR = pixel[266];
			GPIOC->ODR = pixel[266];

			GPIOC->ODR = pixel[267];
			GPIOC->ODR = pixel[267];

			GPIOC->ODR = pixel[268];
			GPIOC->ODR = pixel[268];

			GPIOC->ODR = pixel[269];
			GPIOC->ODR = pixel[269];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[270];
			GPIOC->ODR = pixel[270];

			GPIOC->ODR = pixel[271];
			GPIOC->ODR = pixel[271];

			GPIOC->ODR = pixel[272];
			GPIOC->ODR = pixel[272];

			GPIOC->ODR = pixel[273];
			GPIOC->ODR = pixel[273];

			GPIOC->ODR = pixel[274];
			GPIOC->ODR = pixel[274];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[275];
			GPIOC->ODR = pixel[275];

			GPIOC->ODR = pixel[276];
			GPIOC->ODR = pixel[276];

			GPIOC->ODR = pixel[277];
			GPIOC->ODR = pixel[277];

			GPIOC->ODR = pixel[278];
			GPIOC->ODR = pixel[278];

			GPIOC->ODR = pixel[279];
			GPIOC->ODR = pixel[279];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[280];
			GPIOC->ODR = pixel[280];

			GPIOC->ODR = pixel[281];
			GPIOC->ODR = pixel[281];

			GPIOC->ODR = pixel[282];
			GPIOC->ODR = pixel[282];

			GPIOC->ODR = pixel[283];
			GPIOC->ODR = pixel[283];

			GPIOC->ODR = pixel[284];
			GPIOC->ODR = pixel[284];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[285];
			GPIOC->ODR = pixel[285];

			GPIOC->ODR = pixel[286];
			GPIOC->ODR = pixel[286];

			GPIOC->ODR = pixel[287];
			GPIOC->ODR = pixel[287];

			GPIOC->ODR = pixel[288];
			GPIOC->ODR = pixel[288];

			GPIOC->ODR = pixel[289];
			GPIOC->ODR = pixel[289];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[290];
			GPIOC->ODR = pixel[290];

			GPIOC->ODR = pixel[291];
			GPIOC->ODR = pixel[291];

			GPIOC->ODR = pixel[292];
			GPIOC->ODR = pixel[292];

			GPIOC->ODR = pixel[293];
			GPIOC->ODR = pixel[293];

			GPIOC->ODR = pixel[294];
			GPIOC->ODR = pixel[294];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[295];
			GPIOC->ODR = pixel[295];

			GPIOC->ODR = pixel[296];
			GPIOC->ODR = pixel[296];

			GPIOC->ODR = pixel[297];
			GPIOC->ODR = pixel[297];

			GPIOC->ODR = pixel[298];
			GPIOC->ODR = pixel[298];

			GPIOC->ODR = pixel[299];
			GPIOC->ODR = pixel[299];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[45];
			GPIOC->ODR = Score_val[45];

			GPIOC->ODR = Score_val[46];
			GPIOC->ODR = Score_val[46];

			GPIOC->ODR = Score_val[47];
			GPIOC->ODR = Score_val[47];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[48];
			GPIOC->ODR = Score_val[48];

			GPIOC->ODR = Score_val[49];
			GPIOC->ODR = Score_val[49];

			GPIOC->ODR = Score_val[50];
			GPIOC->ODR = Score_val[50];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[51];
			GPIOC->ODR = Score_val[51];

			GPIOC->ODR = Score_val[52];
			GPIOC->ODR = Score_val[52];

			GPIOC->ODR = Score_val[53];
			GPIOC->ODR = Score_val[53];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 140 ... 144: //1212b

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[300];
			GPIOC->ODR = pixel[300];

			GPIOC->ODR = pixel[301];
			GPIOC->ODR = pixel[301];

			GPIOC->ODR = pixel[302];
			GPIOC->ODR = pixel[302];

			GPIOC->ODR = pixel[303];
			GPIOC->ODR = pixel[303];

			GPIOC->ODR = pixel[304];
			GPIOC->ODR = pixel[304];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[305];
			GPIOC->ODR = pixel[305];

			GPIOC->ODR = pixel[306];
			GPIOC->ODR = pixel[306];

			GPIOC->ODR = pixel[307];
			GPIOC->ODR = pixel[307];

			GPIOC->ODR = pixel[308];
			GPIOC->ODR = pixel[308];

			GPIOC->ODR = pixel[309];
			GPIOC->ODR = pixel[309];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[310];
			GPIOC->ODR = pixel[310];

			GPIOC->ODR = pixel[311];
			GPIOC->ODR = pixel[311];

			GPIOC->ODR = pixel[312];
			GPIOC->ODR = pixel[312];

			GPIOC->ODR = pixel[313];
			GPIOC->ODR = pixel[313];

			GPIOC->ODR = pixel[314];
			GPIOC->ODR = pixel[314];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[315];
			GPIOC->ODR = pixel[315];

			GPIOC->ODR = pixel[316];
			GPIOC->ODR = pixel[316];

			GPIOC->ODR = pixel[317];
			GPIOC->ODR = pixel[317];

			GPIOC->ODR = pixel[318];
			GPIOC->ODR = pixel[318];

			GPIOC->ODR = pixel[319];
			GPIOC->ODR = pixel[319];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[320];
			GPIOC->ODR = pixel[320];

			GPIOC->ODR = pixel[321];
			GPIOC->ODR = pixel[321];

			GPIOC->ODR = pixel[322];
			GPIOC->ODR = pixel[322];

			GPIOC->ODR = pixel[323];
			GPIOC->ODR = pixel[323];

			GPIOC->ODR = pixel[324];
			GPIOC->ODR = pixel[324];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[325];
			GPIOC->ODR = pixel[325];

			GPIOC->ODR = pixel[326];
			GPIOC->ODR = pixel[326];

			GPIOC->ODR = pixel[327];
			GPIOC->ODR = pixel[327];

			GPIOC->ODR = pixel[328];
			GPIOC->ODR = pixel[328];

			GPIOC->ODR = pixel[329];
			GPIOC->ODR = pixel[329];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[330];
			GPIOC->ODR = pixel[330];

			GPIOC->ODR = pixel[331];
			GPIOC->ODR = pixel[331];

			GPIOC->ODR = pixel[332];
			GPIOC->ODR = pixel[332];

			GPIOC->ODR = pixel[333];
			GPIOC->ODR = pixel[333];

			GPIOC->ODR = pixel[334];
			GPIOC->ODR = pixel[334];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[335];
			GPIOC->ODR = pixel[335];

			GPIOC->ODR = pixel[336];
			GPIOC->ODR = pixel[336];

			GPIOC->ODR = pixel[337];
			GPIOC->ODR = pixel[337];

			GPIOC->ODR = pixel[338];
			GPIOC->ODR = pixel[338];

			GPIOC->ODR = pixel[339];
			GPIOC->ODR = pixel[339];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[340];
			GPIOC->ODR = pixel[340];

			GPIOC->ODR = pixel[341];
			GPIOC->ODR = pixel[341];

			GPIOC->ODR = pixel[342];
			GPIOC->ODR = pixel[342];

			GPIOC->ODR = pixel[343];
			GPIOC->ODR = pixel[343];

			GPIOC->ODR = pixel[344];
			GPIOC->ODR = pixel[344];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[345];
			GPIOC->ODR = pixel[345];

			GPIOC->ODR = pixel[346];
			GPIOC->ODR = pixel[346];

			GPIOC->ODR = pixel[347];
			GPIOC->ODR = pixel[347];

			GPIOC->ODR = pixel[348];
			GPIOC->ODR = pixel[348];

			GPIOC->ODR = pixel[349];
			GPIOC->ODR = pixel[349];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[54];
			GPIOC->ODR = Score_val[54];

			GPIOC->ODR = Score_val[55];
			GPIOC->ODR = Score_val[55];

			GPIOC->ODR = Score_val[56];
			GPIOC->ODR = Score_val[56];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[57];
			GPIOC->ODR = Score_val[57];

			GPIOC->ODR = Score_val[58];
			GPIOC->ODR = Score_val[58];

			GPIOC->ODR = Score_val[59];
			GPIOC->ODR = Score_val[59];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[60];
			GPIOC->ODR = Score_val[60];

			GPIOC->ODR = Score_val[61];
			GPIOC->ODR = Score_val[61];

			GPIOC->ODR = Score_val[62];
			GPIOC->ODR = Score_val[62];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 145 ... 149: //1212c

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[350];
			GPIOC->ODR = pixel[350];

			GPIOC->ODR = pixel[351];
			GPIOC->ODR = pixel[351];

			GPIOC->ODR = pixel[352];
			GPIOC->ODR = pixel[352];

			GPIOC->ODR = pixel[353];
			GPIOC->ODR = pixel[353];

			GPIOC->ODR = pixel[354];
			GPIOC->ODR = pixel[354];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[355];
			GPIOC->ODR = pixel[355];

			GPIOC->ODR = pixel[356];
			GPIOC->ODR = pixel[356];

			GPIOC->ODR = pixel[357];
			GPIOC->ODR = pixel[357];

			GPIOC->ODR = pixel[358];
			GPIOC->ODR = pixel[358];

			GPIOC->ODR = pixel[359];
			GPIOC->ODR = pixel[359];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[360];
			GPIOC->ODR = pixel[360];

			GPIOC->ODR = pixel[361];
			GPIOC->ODR = pixel[361];

			GPIOC->ODR = pixel[362];
			GPIOC->ODR = pixel[362];

			GPIOC->ODR = pixel[363];
			GPIOC->ODR = pixel[363];

			GPIOC->ODR = pixel[364];
			GPIOC->ODR = pixel[364];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[365];
			GPIOC->ODR = pixel[365];

			GPIOC->ODR = pixel[366];
			GPIOC->ODR = pixel[366];

			GPIOC->ODR = pixel[367];
			GPIOC->ODR = pixel[367];

			GPIOC->ODR = pixel[368];
			GPIOC->ODR = pixel[368];

			GPIOC->ODR = pixel[369];
			GPIOC->ODR = pixel[369];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[370];
			GPIOC->ODR = pixel[370];

			GPIOC->ODR = pixel[371];
			GPIOC->ODR = pixel[371];

			GPIOC->ODR = pixel[372];
			GPIOC->ODR = pixel[372];

			GPIOC->ODR = pixel[373];
			GPIOC->ODR = pixel[373];

			GPIOC->ODR = pixel[374];
			GPIOC->ODR = pixel[374];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[375];
			GPIOC->ODR = pixel[375];

			GPIOC->ODR = pixel[376];
			GPIOC->ODR = pixel[376];

			GPIOC->ODR = pixel[377];
			GPIOC->ODR = pixel[377];

			GPIOC->ODR = pixel[378];
			GPIOC->ODR = pixel[378];

			GPIOC->ODR = pixel[379];
			GPIOC->ODR = pixel[379];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[380];
			GPIOC->ODR = pixel[380];

			GPIOC->ODR = pixel[381];
			GPIOC->ODR = pixel[381];

			GPIOC->ODR = pixel[382];
			GPIOC->ODR = pixel[382];

			GPIOC->ODR = pixel[383];
			GPIOC->ODR = pixel[383];

			GPIOC->ODR = pixel[384];
			GPIOC->ODR = pixel[384];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[385];
			GPIOC->ODR = pixel[385];

			GPIOC->ODR = pixel[386];
			GPIOC->ODR = pixel[386];

			GPIOC->ODR = pixel[387];
			GPIOC->ODR = pixel[387];

			GPIOC->ODR = pixel[388];
			GPIOC->ODR = pixel[388];

			GPIOC->ODR = pixel[389];
			GPIOC->ODR = pixel[389];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[390];
			GPIOC->ODR = pixel[390];

			GPIOC->ODR = pixel[391];
			GPIOC->ODR = pixel[391];

			GPIOC->ODR = pixel[392];
			GPIOC->ODR = pixel[392];

			GPIOC->ODR = pixel[393];
			GPIOC->ODR = pixel[393];

			GPIOC->ODR = pixel[394];
			GPIOC->ODR = pixel[394];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[395];
			GPIOC->ODR = pixel[395];

			GPIOC->ODR = pixel[396];
			GPIOC->ODR = pixel[396];

			GPIOC->ODR = pixel[397];
			GPIOC->ODR = pixel[397];

			GPIOC->ODR = pixel[398];
			GPIOC->ODR = pixel[398];

			GPIOC->ODR = pixel[399];
			GPIOC->ODR = pixel[399];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[63];
			GPIOC->ODR = Score_val[63];

			GPIOC->ODR = Score_val[64];
			GPIOC->ODR = Score_val[64];

			GPIOC->ODR = Score_val[65];
			GPIOC->ODR = Score_val[65];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[66];
			GPIOC->ODR = Score_val[66];

			GPIOC->ODR = Score_val[67];
			GPIOC->ODR = Score_val[67];

			GPIOC->ODR = Score_val[68];
			GPIOC->ODR = Score_val[68];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[69];
			GPIOC->ODR = Score_val[69];

			GPIOC->ODR = Score_val[70];
			GPIOC->ODR = Score_val[70];

			GPIOC->ODR = Score_val[71];
			GPIOC->ODR = Score_val[71];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 150 ... 154: // 1212d

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[400];
			GPIOC->ODR = pixel[400];

			GPIOC->ODR = pixel[401];
			GPIOC->ODR = pixel[401];

			GPIOC->ODR = pixel[402];
			GPIOC->ODR = pixel[402];

			GPIOC->ODR = pixel[403];
			GPIOC->ODR = pixel[403];

			GPIOC->ODR = pixel[404];
			GPIOC->ODR = pixel[404];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[405];
			GPIOC->ODR = pixel[405];

			GPIOC->ODR = pixel[406];
			GPIOC->ODR = pixel[406];

			GPIOC->ODR = pixel[407];
			GPIOC->ODR = pixel[407];

			GPIOC->ODR = pixel[408];
			GPIOC->ODR = pixel[408];

			GPIOC->ODR = pixel[409];
			GPIOC->ODR = pixel[409];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[410];
			GPIOC->ODR = pixel[410];

			GPIOC->ODR = pixel[411];
			GPIOC->ODR = pixel[411];

			GPIOC->ODR = pixel[412];
			GPIOC->ODR = pixel[412];

			GPIOC->ODR = pixel[413];
			GPIOC->ODR = pixel[413];

			GPIOC->ODR = pixel[414];
			GPIOC->ODR = pixel[414];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[415];
			GPIOC->ODR = pixel[415];

			GPIOC->ODR = pixel[416];
			GPIOC->ODR = pixel[416];

			GPIOC->ODR = pixel[417];
			GPIOC->ODR = pixel[417];

			GPIOC->ODR = pixel[418];
			GPIOC->ODR = pixel[418];

			GPIOC->ODR = pixel[419];
			GPIOC->ODR = pixel[419];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[420];
			GPIOC->ODR = pixel[420];

			GPIOC->ODR = pixel[421];
			GPIOC->ODR = pixel[421];

			GPIOC->ODR = pixel[422];
			GPIOC->ODR = pixel[422];

			GPIOC->ODR = pixel[423];
			GPIOC->ODR = pixel[423];

			GPIOC->ODR = pixel[424];
			GPIOC->ODR = pixel[424];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[425];
			GPIOC->ODR = pixel[425];

			GPIOC->ODR = pixel[426];
			GPIOC->ODR = pixel[426];

			GPIOC->ODR = pixel[427];
			GPIOC->ODR = pixel[427];

			GPIOC->ODR = pixel[428];
			GPIOC->ODR = pixel[428];

			GPIOC->ODR = pixel[429];
			GPIOC->ODR = pixel[429];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[430];
			GPIOC->ODR = pixel[430];

			GPIOC->ODR = pixel[431];
			GPIOC->ODR = pixel[431];

			GPIOC->ODR = pixel[432];
			GPIOC->ODR = pixel[432];

			GPIOC->ODR = pixel[433];
			GPIOC->ODR = pixel[433];

			GPIOC->ODR = pixel[434];
			GPIOC->ODR = pixel[434];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[435];
			GPIOC->ODR = pixel[435];

			GPIOC->ODR = pixel[436];
			GPIOC->ODR = pixel[436];

			GPIOC->ODR = pixel[437];
			GPIOC->ODR = pixel[437];

			GPIOC->ODR = pixel[438];
			GPIOC->ODR = pixel[438];

			GPIOC->ODR = pixel[439];
			GPIOC->ODR = pixel[439];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[440];
			GPIOC->ODR = pixel[440];

			GPIOC->ODR = pixel[441];
			GPIOC->ODR = pixel[441];

			GPIOC->ODR = pixel[442];
			GPIOC->ODR = pixel[442];

			GPIOC->ODR = pixel[443];
			GPIOC->ODR = pixel[443];

			GPIOC->ODR = pixel[444];
			GPIOC->ODR = pixel[444];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[445];
			GPIOC->ODR = pixel[445];

			GPIOC->ODR = pixel[446];
			GPIOC->ODR = pixel[446];

			GPIOC->ODR = pixel[447];
			GPIOC->ODR = pixel[447];

			GPIOC->ODR = pixel[448];
			GPIOC->ODR = pixel[448];

			GPIOC->ODR = pixel[449];
			GPIOC->ODR = pixel[449];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[72];
			GPIOC->ODR = Score_val[72];

			GPIOC->ODR = Score_val[73];
			GPIOC->ODR = Score_val[73];

			GPIOC->ODR = Score_val[74];
			GPIOC->ODR = Score_val[74];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[75];
			GPIOC->ODR = Score_val[75];

			GPIOC->ODR = Score_val[76];
			GPIOC->ODR = Score_val[76];

			GPIOC->ODR = Score_val[77];
			GPIOC->ODR = Score_val[77];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[78];
			GPIOC->ODR = Score_val[78];

			GPIOC->ODR = Score_val[79];
			GPIOC->ODR = Score_val[79];

			GPIOC->ODR = Score_val[80];
			GPIOC->ODR = Score_val[80];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 155 ... 159: // 1212e

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green; //dot
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[450];
			GPIOC->ODR = pixel[450];

			GPIOC->ODR = pixel[451];
			GPIOC->ODR = pixel[451];

			GPIOC->ODR = pixel[452];
			GPIOC->ODR = pixel[452];

			GPIOC->ODR = pixel[453];
			GPIOC->ODR = pixel[453];

			GPIOC->ODR = pixel[454];
			GPIOC->ODR = pixel[454];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[455];
			GPIOC->ODR = pixel[455];

			GPIOC->ODR = pixel[456];
			GPIOC->ODR = pixel[456];

			GPIOC->ODR = pixel[457];
			GPIOC->ODR = pixel[457];

			GPIOC->ODR = pixel[458];
			GPIOC->ODR = pixel[458];

			GPIOC->ODR = pixel[459];
			GPIOC->ODR = pixel[459];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[460];
			GPIOC->ODR = pixel[460];

			GPIOC->ODR = pixel[461];
			GPIOC->ODR = pixel[461];

			GPIOC->ODR = pixel[462];
			GPIOC->ODR = pixel[462];

			GPIOC->ODR = pixel[463];
			GPIOC->ODR = pixel[463];

			GPIOC->ODR = pixel[464];
			GPIOC->ODR = pixel[464];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[465];
			GPIOC->ODR = pixel[465];

			GPIOC->ODR = pixel[466];
			GPIOC->ODR = pixel[466];

			GPIOC->ODR = pixel[467];
			GPIOC->ODR = pixel[467];

			GPIOC->ODR = pixel[468];
			GPIOC->ODR = pixel[468];

			GPIOC->ODR = pixel[469];
			GPIOC->ODR = pixel[469];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[470];
			GPIOC->ODR = pixel[470];

			GPIOC->ODR = pixel[471];
			GPIOC->ODR = pixel[471];

			GPIOC->ODR = pixel[472];
			GPIOC->ODR = pixel[472];

			GPIOC->ODR = pixel[473];
			GPIOC->ODR = pixel[473];

			GPIOC->ODR = pixel[474];
			GPIOC->ODR = pixel[474];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[475];
			GPIOC->ODR = pixel[475];

			GPIOC->ODR = pixel[476];
			GPIOC->ODR = pixel[476];

			GPIOC->ODR = pixel[477];
			GPIOC->ODR = pixel[477];

			GPIOC->ODR = pixel[478];
			GPIOC->ODR = pixel[478];

			GPIOC->ODR = pixel[479];
			GPIOC->ODR = pixel[479];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[480];
			GPIOC->ODR = pixel[480];

			GPIOC->ODR = pixel[481];
			GPIOC->ODR = pixel[481];

			GPIOC->ODR = pixel[482];
			GPIOC->ODR = pixel[482];

			GPIOC->ODR = pixel[483];
			GPIOC->ODR = pixel[483];

			GPIOC->ODR = pixel[484];
			GPIOC->ODR = pixel[484];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[485];
			GPIOC->ODR = pixel[485];

			GPIOC->ODR = pixel[486];
			GPIOC->ODR = pixel[486];

			GPIOC->ODR = pixel[487];
			GPIOC->ODR = pixel[487];

			GPIOC->ODR = pixel[488];
			GPIOC->ODR = pixel[488];

			GPIOC->ODR = pixel[489];
			GPIOC->ODR = pixel[489];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[490];
			GPIOC->ODR = pixel[490];

			GPIOC->ODR = pixel[491];
			GPIOC->ODR = pixel[491];

			GPIOC->ODR = pixel[492];
			GPIOC->ODR = pixel[492];

			GPIOC->ODR = pixel[493];
			GPIOC->ODR = pixel[493];

			GPIOC->ODR = pixel[494];
			GPIOC->ODR = pixel[494];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[495];
			GPIOC->ODR = pixel[495];

			GPIOC->ODR = pixel[496];
			GPIOC->ODR = pixel[496];

			GPIOC->ODR = pixel[497];
			GPIOC->ODR = pixel[497];

			GPIOC->ODR = pixel[498];
			GPIOC->ODR = pixel[498];

			GPIOC->ODR = pixel[499];
			GPIOC->ODR = pixel[499];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[81];
			GPIOC->ODR = Score_val[81];

			GPIOC->ODR = Score_val[82];
			GPIOC->ODR = Score_val[82];

			GPIOC->ODR = Score_val[83];
			GPIOC->ODR = Score_val[83];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[84];
			GPIOC->ODR = Score_val[84];

			GPIOC->ODR = Score_val[85];
			GPIOC->ODR = Score_val[85];

			GPIOC->ODR = Score_val[86];
			GPIOC->ODR = Score_val[86];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[87];
			GPIOC->ODR = Score_val[87];

			GPIOC->ODR = Score_val[88];
			GPIOC->ODR = Score_val[88];

			GPIOC->ODR = Score_val[89];
			GPIOC->ODR = Score_val[89];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 160 ... 164:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 165 ... 165:
			GPIOC->ODR = White_OFF;
			break;
			case 166 ... 169:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			}
		break;
		case 170 ... 204: //thirteens
			switch(Lines)
			{
			case 170 ... 174: //1313a

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[500];
			GPIOC->ODR = pixel[500];

			GPIOC->ODR = pixel[501];
			GPIOC->ODR = pixel[501];

			GPIOC->ODR = pixel[502];
			GPIOC->ODR = pixel[502];

			GPIOC->ODR = pixel[503];
			GPIOC->ODR = pixel[503];

			GPIOC->ODR = pixel[504];
			GPIOC->ODR = pixel[504];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[505];
			GPIOC->ODR = pixel[505];

			GPIOC->ODR = pixel[506];
			GPIOC->ODR = pixel[506];

			GPIOC->ODR = pixel[507];
			GPIOC->ODR = pixel[507];

			GPIOC->ODR = pixel[508];
			GPIOC->ODR = pixel[508];

			GPIOC->ODR = pixel[509];
			GPIOC->ODR = pixel[509];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[510];
			GPIOC->ODR = pixel[510];

			GPIOC->ODR = pixel[511];
			GPIOC->ODR = pixel[511];

			GPIOC->ODR = pixel[512];
			GPIOC->ODR = pixel[512];

			GPIOC->ODR = pixel[513];
			GPIOC->ODR = pixel[513];

			GPIOC->ODR = pixel[514];
			GPIOC->ODR = pixel[514];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[515];
			GPIOC->ODR = pixel[515];

			GPIOC->ODR = pixel[516];
			GPIOC->ODR = pixel[516];

			GPIOC->ODR = pixel[517];
			GPIOC->ODR = pixel[517];

			GPIOC->ODR = pixel[518];
			GPIOC->ODR = pixel[518];

			GPIOC->ODR = pixel[519];
			GPIOC->ODR = pixel[519];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[520];
			GPIOC->ODR = pixel[520];

			GPIOC->ODR = pixel[521];
			GPIOC->ODR = pixel[521];

			GPIOC->ODR = pixel[522];
			GPIOC->ODR = pixel[522];

			GPIOC->ODR = pixel[523];
			GPIOC->ODR = pixel[523];

			GPIOC->ODR = pixel[524];
			GPIOC->ODR = pixel[524];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[525];
			GPIOC->ODR = pixel[525];

			GPIOC->ODR = pixel[526];
			GPIOC->ODR = pixel[526];

			GPIOC->ODR = pixel[527];
			GPIOC->ODR = pixel[527];

			GPIOC->ODR = pixel[528];
			GPIOC->ODR = pixel[528];

			GPIOC->ODR = pixel[529];
			GPIOC->ODR = pixel[529];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[530];
			GPIOC->ODR = pixel[530];

			GPIOC->ODR = pixel[531];
			GPIOC->ODR = pixel[531];

			GPIOC->ODR = pixel[532];
			GPIOC->ODR = pixel[532];

			GPIOC->ODR = pixel[533];
			GPIOC->ODR = pixel[533];

			GPIOC->ODR = pixel[534];
			GPIOC->ODR = pixel[534];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[535];
			GPIOC->ODR = pixel[535];

			GPIOC->ODR = pixel[536];
			GPIOC->ODR = pixel[536];

			GPIOC->ODR = pixel[537];
			GPIOC->ODR = pixel[537];

			GPIOC->ODR = pixel[538];
			GPIOC->ODR = pixel[538];

			GPIOC->ODR = pixel[539];
			GPIOC->ODR = pixel[539];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[540];
			GPIOC->ODR = pixel[540];

			GPIOC->ODR = pixel[541];
			GPIOC->ODR = pixel[541];

			GPIOC->ODR = pixel[542];
			GPIOC->ODR = pixel[542];

			GPIOC->ODR = pixel[543];
			GPIOC->ODR = pixel[543];

			GPIOC->ODR = pixel[544];
			GPIOC->ODR = pixel[544];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[545];
			GPIOC->ODR = pixel[545];

			GPIOC->ODR = pixel[546];
			GPIOC->ODR = pixel[546];

			GPIOC->ODR = pixel[547];
			GPIOC->ODR = pixel[547];

			GPIOC->ODR = pixel[548];
			GPIOC->ODR = pixel[548];

			GPIOC->ODR = pixel[549];
			GPIOC->ODR = pixel[549];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[90];
			GPIOC->ODR = Score_val[90];

			GPIOC->ODR = Score_val[91];
			GPIOC->ODR = Score_val[91];

			GPIOC->ODR = Score_val[92];
			GPIOC->ODR = Score_val[92];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[93];
			GPIOC->ODR = Score_val[93];

			GPIOC->ODR = Score_val[94];
			GPIOC->ODR = Score_val[94];

			GPIOC->ODR = Score_val[95];
			GPIOC->ODR = Score_val[95];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[96];
			GPIOC->ODR = Score_val[96];

			GPIOC->ODR = Score_val[97];
			GPIOC->ODR = Score_val[97];

			GPIOC->ODR = Score_val[98];
			GPIOC->ODR = Score_val[98];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 175 ... 179: //1313b

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[550];
			GPIOC->ODR = pixel[550];

			GPIOC->ODR = pixel[551];
			GPIOC->ODR = pixel[551];

			GPIOC->ODR = pixel[552];
			GPIOC->ODR = pixel[552];

			GPIOC->ODR = pixel[553];
			GPIOC->ODR = pixel[553];

			GPIOC->ODR = pixel[554];
			GPIOC->ODR = pixel[554];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[555];
			GPIOC->ODR = pixel[555];

			GPIOC->ODR = pixel[556];
			GPIOC->ODR = pixel[556];

			GPIOC->ODR = pixel[557];
			GPIOC->ODR = pixel[557];

			GPIOC->ODR = pixel[558];
			GPIOC->ODR = pixel[558];

			GPIOC->ODR = pixel[559];
			GPIOC->ODR = pixel[559];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[560];
			GPIOC->ODR = pixel[560];

			GPIOC->ODR = pixel[561];
			GPIOC->ODR = pixel[561];

			GPIOC->ODR = pixel[562];
			GPIOC->ODR = pixel[562];

			GPIOC->ODR = pixel[563];
			GPIOC->ODR = pixel[563];

			GPIOC->ODR = pixel[564];
			GPIOC->ODR = pixel[564];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[565];
			GPIOC->ODR = pixel[565];

			GPIOC->ODR = pixel[566];
			GPIOC->ODR = pixel[566];

			GPIOC->ODR = pixel[567];
			GPIOC->ODR = pixel[567];

			GPIOC->ODR = pixel[568];
			GPIOC->ODR = pixel[568];

			GPIOC->ODR = pixel[569];
			GPIOC->ODR = pixel[569];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[570];
			GPIOC->ODR = pixel[570];

			GPIOC->ODR = pixel[571];
			GPIOC->ODR = pixel[571];

			GPIOC->ODR = pixel[572];
			GPIOC->ODR = pixel[572];

			GPIOC->ODR = pixel[573];
			GPIOC->ODR = pixel[573];

			GPIOC->ODR = pixel[574];
			GPIOC->ODR = pixel[574];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[575];
			GPIOC->ODR = pixel[575];

			GPIOC->ODR = pixel[576];
			GPIOC->ODR = pixel[576];

			GPIOC->ODR = pixel[577];
			GPIOC->ODR = pixel[577];

			GPIOC->ODR = pixel[578];
			GPIOC->ODR = pixel[578];

			GPIOC->ODR = pixel[579];
			GPIOC->ODR = pixel[579];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[580];
			GPIOC->ODR = pixel[580];

			GPIOC->ODR = pixel[581];
			GPIOC->ODR = pixel[581];

			GPIOC->ODR = pixel[582];
			GPIOC->ODR = pixel[582];

			GPIOC->ODR = pixel[583];
			GPIOC->ODR = pixel[583];

			GPIOC->ODR = pixel[584];
			GPIOC->ODR = pixel[584];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[585];
			GPIOC->ODR = pixel[585];

			GPIOC->ODR = pixel[586];
			GPIOC->ODR = pixel[586];

			GPIOC->ODR = pixel[587];
			GPIOC->ODR = pixel[587];

			GPIOC->ODR = pixel[588];
			GPIOC->ODR = pixel[588];

			GPIOC->ODR = pixel[589];
			GPIOC->ODR = pixel[589];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[590];
			GPIOC->ODR = pixel[590];

			GPIOC->ODR = pixel[591];
			GPIOC->ODR = pixel[591];

			GPIOC->ODR = pixel[592];
			GPIOC->ODR = pixel[592];

			GPIOC->ODR = pixel[593];
			GPIOC->ODR = pixel[593];

			GPIOC->ODR = pixel[594];
			GPIOC->ODR = pixel[594];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[595];
			GPIOC->ODR = pixel[595];

			GPIOC->ODR = pixel[596];
			GPIOC->ODR = pixel[596];

			GPIOC->ODR = pixel[597];
			GPIOC->ODR = pixel[597];

			GPIOC->ODR = pixel[598];
			GPIOC->ODR = pixel[598];

			GPIOC->ODR = pixel[599];
			GPIOC->ODR = pixel[599];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[99];
			GPIOC->ODR = Score_val[99];

			GPIOC->ODR = Score_val[100];
			GPIOC->ODR = Score_val[100];

			GPIOC->ODR = Score_val[101];
			GPIOC->ODR = Score_val[101];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[102];
			GPIOC->ODR = Score_val[102];

			GPIOC->ODR = Score_val[103];
			GPIOC->ODR = Score_val[103];

			GPIOC->ODR = Score_val[104];
			GPIOC->ODR = Score_val[104];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[105];
			GPIOC->ODR = Score_val[105];

			GPIOC->ODR = Score_val[106];
			GPIOC->ODR = Score_val[106];

			GPIOC->ODR = Score_val[107];
			GPIOC->ODR = Score_val[107];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 180 ... 184: //1313c

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[600];
			GPIOC->ODR = pixel[600];

			GPIOC->ODR = pixel[601];
			GPIOC->ODR = pixel[601];

			GPIOC->ODR = pixel[602];
			GPIOC->ODR = pixel[602];

			GPIOC->ODR = pixel[603];
			GPIOC->ODR = pixel[603];

			GPIOC->ODR = pixel[604];
			GPIOC->ODR = pixel[604];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[605];
			GPIOC->ODR = pixel[605];

			GPIOC->ODR = pixel[606];
			GPIOC->ODR = pixel[606];

			GPIOC->ODR = pixel[607];
			GPIOC->ODR = pixel[607];

			GPIOC->ODR = pixel[608];
			GPIOC->ODR = pixel[608];

			GPIOC->ODR = pixel[609];
			GPIOC->ODR = pixel[609];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[610];
			GPIOC->ODR = pixel[610];

			GPIOC->ODR = pixel[611];
			GPIOC->ODR = pixel[611];

			GPIOC->ODR = pixel[612];
			GPIOC->ODR = pixel[612];

			GPIOC->ODR = pixel[613];
			GPIOC->ODR = pixel[613];

			GPIOC->ODR = pixel[614];
			GPIOC->ODR = pixel[614];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[615];
			GPIOC->ODR = pixel[615];

			GPIOC->ODR = pixel[616];
			GPIOC->ODR = pixel[616];

			GPIOC->ODR = pixel[617];
			GPIOC->ODR = pixel[617];

			GPIOC->ODR = pixel[618];
			GPIOC->ODR = pixel[618];

			GPIOC->ODR = pixel[619];
			GPIOC->ODR = pixel[619];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[620];
			GPIOC->ODR = pixel[620];

			GPIOC->ODR = pixel[621];
			GPIOC->ODR = pixel[621];

			GPIOC->ODR = pixel[622];
			GPIOC->ODR = pixel[622];

			GPIOC->ODR = pixel[623];
			GPIOC->ODR = pixel[623];

			GPIOC->ODR = pixel[624];
			GPIOC->ODR = pixel[624];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[625];
			GPIOC->ODR = pixel[625];

			GPIOC->ODR = pixel[626];
			GPIOC->ODR = pixel[626];

			GPIOC->ODR = pixel[627];
			GPIOC->ODR = pixel[627];

			GPIOC->ODR = pixel[628];
			GPIOC->ODR = pixel[628];

			GPIOC->ODR = pixel[629];
			GPIOC->ODR = pixel[629];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[630];
			GPIOC->ODR = pixel[630];

			GPIOC->ODR = pixel[631];
			GPIOC->ODR = pixel[631];

			GPIOC->ODR = pixel[632];
			GPIOC->ODR = pixel[632];

			GPIOC->ODR = pixel[633];
			GPIOC->ODR = pixel[633];

			GPIOC->ODR = pixel[634];
			GPIOC->ODR = pixel[634];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[635];
			GPIOC->ODR = pixel[635];

			GPIOC->ODR = pixel[636];
			GPIOC->ODR = pixel[636];

			GPIOC->ODR = pixel[637];
			GPIOC->ODR = pixel[637];

			GPIOC->ODR = pixel[638];
			GPIOC->ODR = pixel[638];

			GPIOC->ODR = pixel[639];
			GPIOC->ODR = pixel[639];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[640];
			GPIOC->ODR = pixel[640];

			GPIOC->ODR = pixel[641];
			GPIOC->ODR = pixel[641];

			GPIOC->ODR = pixel[642];
			GPIOC->ODR = pixel[642];

			GPIOC->ODR = pixel[643];
			GPIOC->ODR = pixel[643];

			GPIOC->ODR = pixel[644];
			GPIOC->ODR = pixel[644];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[645];
			GPIOC->ODR = pixel[645];

			GPIOC->ODR = pixel[646];
			GPIOC->ODR = pixel[646];

			GPIOC->ODR = pixel[647];
			GPIOC->ODR = pixel[647];

			GPIOC->ODR = pixel[648];
			GPIOC->ODR = pixel[648];

			GPIOC->ODR = pixel[649];
			GPIOC->ODR = pixel[649];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[108];
			GPIOC->ODR = Score_val[108];

			GPIOC->ODR = Score_val[109];
			GPIOC->ODR = Score_val[109];

			GPIOC->ODR = Score_val[110];
			GPIOC->ODR = Score_val[110];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[111];
			GPIOC->ODR = Score_val[111];

			GPIOC->ODR = Score_val[112];
			GPIOC->ODR = Score_val[112];

			GPIOC->ODR = Score_val[113];
			GPIOC->ODR = Score_val[113];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[114];
			GPIOC->ODR = Score_val[114];

			GPIOC->ODR = Score_val[115];
			GPIOC->ODR = Score_val[115];

			GPIOC->ODR = Score_val[116];
			GPIOC->ODR = Score_val[116];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 185 ... 189: //1313d

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[650];
			GPIOC->ODR = pixel[650];

			GPIOC->ODR = pixel[651];
			GPIOC->ODR = pixel[651];

			GPIOC->ODR = pixel[652];
			GPIOC->ODR = pixel[652];

			GPIOC->ODR = pixel[653];
			GPIOC->ODR = pixel[653];

			GPIOC->ODR = pixel[654];
			GPIOC->ODR = pixel[654];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[655];
			GPIOC->ODR = pixel[655];

			GPIOC->ODR = pixel[656];
			GPIOC->ODR = pixel[656];

			GPIOC->ODR = pixel[657];
			GPIOC->ODR = pixel[657];

			GPIOC->ODR = pixel[658];
			GPIOC->ODR = pixel[658];

			GPIOC->ODR = pixel[659];
			GPIOC->ODR = pixel[659];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[660];
			GPIOC->ODR = pixel[660];

			GPIOC->ODR = pixel[661];
			GPIOC->ODR = pixel[661];

			GPIOC->ODR = pixel[662];
			GPIOC->ODR = pixel[662];

			GPIOC->ODR = pixel[663];
			GPIOC->ODR = pixel[663];

			GPIOC->ODR = pixel[664];
			GPIOC->ODR = pixel[664];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[665];
			GPIOC->ODR = pixel[665];

			GPIOC->ODR = pixel[666];
			GPIOC->ODR = pixel[666];

			GPIOC->ODR = pixel[667];
			GPIOC->ODR = pixel[667];

			GPIOC->ODR = pixel[668];
			GPIOC->ODR = pixel[668];

			GPIOC->ODR = pixel[669];
			GPIOC->ODR = pixel[669];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[670];
			GPIOC->ODR = pixel[670];

			GPIOC->ODR = pixel[671];
			GPIOC->ODR = pixel[671];

			GPIOC->ODR = pixel[672];
			GPIOC->ODR = pixel[672];

			GPIOC->ODR = pixel[673];
			GPIOC->ODR = pixel[673];

			GPIOC->ODR = pixel[674];
			GPIOC->ODR = pixel[674];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[675];
			GPIOC->ODR = pixel[675];

			GPIOC->ODR = pixel[676];
			GPIOC->ODR = pixel[676];

			GPIOC->ODR = pixel[677];
			GPIOC->ODR = pixel[677];

			GPIOC->ODR = pixel[678];
			GPIOC->ODR = pixel[678];

			GPIOC->ODR = pixel[679];
			GPIOC->ODR = pixel[679];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[680];
			GPIOC->ODR = pixel[680];

			GPIOC->ODR = pixel[681];
			GPIOC->ODR = pixel[681];

			GPIOC->ODR = pixel[682];
			GPIOC->ODR = pixel[682];

			GPIOC->ODR = pixel[683];
			GPIOC->ODR = pixel[683];

			GPIOC->ODR = pixel[684];
			GPIOC->ODR = pixel[684];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[685];
			GPIOC->ODR = pixel[685];

			GPIOC->ODR = pixel[686];
			GPIOC->ODR = pixel[686];

			GPIOC->ODR = pixel[687];
			GPIOC->ODR = pixel[687];

			GPIOC->ODR = pixel[688];
			GPIOC->ODR = pixel[688];

			GPIOC->ODR = pixel[689];
			GPIOC->ODR = pixel[689];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[690];
			GPIOC->ODR = pixel[690];

			GPIOC->ODR = pixel[691];
			GPIOC->ODR = pixel[691];

			GPIOC->ODR = pixel[692];
			GPIOC->ODR = pixel[692];

			GPIOC->ODR = pixel[693];
			GPIOC->ODR = pixel[693];

			GPIOC->ODR = pixel[694];
			GPIOC->ODR = pixel[694];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[695];
			GPIOC->ODR = pixel[695];

			GPIOC->ODR = pixel[696];
			GPIOC->ODR = pixel[696];

			GPIOC->ODR = pixel[697];
			GPIOC->ODR = pixel[697];

			GPIOC->ODR = pixel[698];
			GPIOC->ODR = pixel[698];

			GPIOC->ODR = pixel[699];
			GPIOC->ODR = pixel[699];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[117];
			GPIOC->ODR = Score_val[117];

			GPIOC->ODR = Score_val[118];
			GPIOC->ODR = Score_val[118];

			GPIOC->ODR = Score_val[119];
			GPIOC->ODR = Score_val[119];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[120];
			GPIOC->ODR = Score_val[120];

			GPIOC->ODR = Score_val[121];
			GPIOC->ODR = Score_val[121];

			GPIOC->ODR = Score_val[122];
			GPIOC->ODR = Score_val[122];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[123];
			GPIOC->ODR = Score_val[123];

			GPIOC->ODR = Score_val[124];
			GPIOC->ODR = Score_val[124];

			GPIOC->ODR = Score_val[125];
			GPIOC->ODR = Score_val[125];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 190 ... 194: //1313e

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green; // dot
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[700];
			GPIOC->ODR = pixel[700];

			GPIOC->ODR = pixel[701];
			GPIOC->ODR = pixel[701];

			GPIOC->ODR = pixel[702];
			GPIOC->ODR = pixel[702];

			GPIOC->ODR = pixel[703];
			GPIOC->ODR = pixel[703];

			GPIOC->ODR = pixel[704];
			GPIOC->ODR = pixel[704];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[705];
			GPIOC->ODR = pixel[705];

			GPIOC->ODR = pixel[706];
			GPIOC->ODR = pixel[706];

			GPIOC->ODR = pixel[707];
			GPIOC->ODR = pixel[707];

			GPIOC->ODR = pixel[708];
			GPIOC->ODR = pixel[708];

			GPIOC->ODR = pixel[709];
			GPIOC->ODR = pixel[709];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[710];
			GPIOC->ODR = pixel[710];

			GPIOC->ODR = pixel[711];
			GPIOC->ODR = pixel[711];

			GPIOC->ODR = pixel[712];
			GPIOC->ODR = pixel[712];

			GPIOC->ODR = pixel[713];
			GPIOC->ODR = pixel[713];

			GPIOC->ODR = pixel[714];
			GPIOC->ODR = pixel[714];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[715];
			GPIOC->ODR = pixel[715];

			GPIOC->ODR = pixel[716];
			GPIOC->ODR = pixel[716];

			GPIOC->ODR = pixel[717];
			GPIOC->ODR = pixel[717];

			GPIOC->ODR = pixel[718];
			GPIOC->ODR = pixel[718];

			GPIOC->ODR = pixel[719];
			GPIOC->ODR = pixel[719];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[720];
			GPIOC->ODR = pixel[720];

			GPIOC->ODR = pixel[721];
			GPIOC->ODR = pixel[721];

			GPIOC->ODR = pixel[722];
			GPIOC->ODR = pixel[722];

			GPIOC->ODR = pixel[723];
			GPIOC->ODR = pixel[723];

			GPIOC->ODR = pixel[724];
			GPIOC->ODR = pixel[724];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[725];
			GPIOC->ODR = pixel[725];

			GPIOC->ODR = pixel[726];
			GPIOC->ODR = pixel[726];

			GPIOC->ODR = pixel[727];
			GPIOC->ODR = pixel[727];

			GPIOC->ODR = pixel[728];
			GPIOC->ODR = pixel[728];

			GPIOC->ODR = pixel[729];
			GPIOC->ODR = pixel[729];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[730];
			GPIOC->ODR = pixel[730];

			GPIOC->ODR = pixel[731];
			GPIOC->ODR = pixel[731];

			GPIOC->ODR = pixel[732];
			GPIOC->ODR = pixel[732];

			GPIOC->ODR = pixel[733];
			GPIOC->ODR = pixel[733];

			GPIOC->ODR = pixel[734];
			GPIOC->ODR = pixel[734];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[735];
			GPIOC->ODR = pixel[735];

			GPIOC->ODR = pixel[736];
			GPIOC->ODR = pixel[736];

			GPIOC->ODR = pixel[737];
			GPIOC->ODR = pixel[737];

			GPIOC->ODR = pixel[738];
			GPIOC->ODR = pixel[738];

			GPIOC->ODR = pixel[739];
			GPIOC->ODR = pixel[739];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[740];
			GPIOC->ODR = pixel[740];

			GPIOC->ODR = pixel[741];
			GPIOC->ODR = pixel[741];

			GPIOC->ODR = pixel[742];
			GPIOC->ODR = pixel[742];

			GPIOC->ODR = pixel[743];
			GPIOC->ODR = pixel[743];

			GPIOC->ODR = pixel[744];
			GPIOC->ODR = pixel[744];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[745];
			GPIOC->ODR = pixel[745];

			GPIOC->ODR = pixel[746];
			GPIOC->ODR = pixel[746];

			GPIOC->ODR = pixel[747];
			GPIOC->ODR = pixel[747];

			GPIOC->ODR = pixel[748];
			GPIOC->ODR = pixel[748];

			GPIOC->ODR = pixel[749];
			GPIOC->ODR = pixel[749];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[126];
			GPIOC->ODR = Score_val[126];

			GPIOC->ODR = Score_val[127];
			GPIOC->ODR = Score_val[127];

			GPIOC->ODR = Score_val[128];
			GPIOC->ODR = Score_val[128];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[129];
			GPIOC->ODR = Score_val[129];

			GPIOC->ODR = Score_val[130];
			GPIOC->ODR = Score_val[130];

			GPIOC->ODR = Score_val[131];
			GPIOC->ODR = Score_val[131];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[132];
			GPIOC->ODR = Score_val[132];

			GPIOC->ODR = Score_val[133];
			GPIOC->ODR = Score_val[133];

			GPIOC->ODR = Score_val[134];
			GPIOC->ODR = Score_val[134];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 195 ... 199:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 200 ... 200:
			GPIOC->ODR = White_OFF;
			break;
			case 201 ... 204:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			}
		break;
		case 205 ... 239:  //fours
			switch(Lines)
			{
			case 205 ... 209: //1414a

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[750];
			GPIOC->ODR = pixel[750];

			GPIOC->ODR = pixel[751];
			GPIOC->ODR = pixel[751];

			GPIOC->ODR = pixel[752];
			GPIOC->ODR = pixel[752];

			GPIOC->ODR = pixel[753];
			GPIOC->ODR = pixel[753];

			GPIOC->ODR = pixel[754];
			GPIOC->ODR = pixel[754];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[755];
			GPIOC->ODR = pixel[755];

			GPIOC->ODR = pixel[756];
			GPIOC->ODR = pixel[756];

			GPIOC->ODR = pixel[757];
			GPIOC->ODR = pixel[757];

			GPIOC->ODR = pixel[758];
			GPIOC->ODR = pixel[758];

			GPIOC->ODR = pixel[759];
			GPIOC->ODR = pixel[759];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[760];
			GPIOC->ODR = pixel[760];

			GPIOC->ODR = pixel[761];
			GPIOC->ODR = pixel[761];

			GPIOC->ODR = pixel[762];
			GPIOC->ODR = pixel[762];

			GPIOC->ODR = pixel[763];
			GPIOC->ODR = pixel[763];

			GPIOC->ODR = pixel[764];
			GPIOC->ODR = pixel[764];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[765];
			GPIOC->ODR = pixel[765];

			GPIOC->ODR = pixel[766];
			GPIOC->ODR = pixel[766];

			GPIOC->ODR = pixel[767];
			GPIOC->ODR = pixel[767];

			GPIOC->ODR = pixel[768];
			GPIOC->ODR = pixel[768];

			GPIOC->ODR = pixel[769];
			GPIOC->ODR = pixel[769];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[770];
			GPIOC->ODR = pixel[770];

			GPIOC->ODR = pixel[771];
			GPIOC->ODR = pixel[771];

			GPIOC->ODR = pixel[772];
			GPIOC->ODR = pixel[772];

			GPIOC->ODR = pixel[773];
			GPIOC->ODR = pixel[773];

			GPIOC->ODR = pixel[774];
			GPIOC->ODR = pixel[774];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[775];
			GPIOC->ODR = pixel[775];

			GPIOC->ODR = pixel[776];
			GPIOC->ODR = pixel[776];

			GPIOC->ODR = pixel[777];
			GPIOC->ODR = pixel[777];

			GPIOC->ODR = pixel[778];
			GPIOC->ODR = pixel[778];

			GPIOC->ODR = pixel[779];
			GPIOC->ODR = pixel[779];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[780];
			GPIOC->ODR = pixel[780];

			GPIOC->ODR = pixel[781];
			GPIOC->ODR = pixel[781];

			GPIOC->ODR = pixel[782];
			GPIOC->ODR = pixel[782];

			GPIOC->ODR = pixel[783];
			GPIOC->ODR = pixel[783];

			GPIOC->ODR = pixel[784];
			GPIOC->ODR = pixel[784];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[785];
			GPIOC->ODR = pixel[785];

			GPIOC->ODR = pixel[786];
			GPIOC->ODR = pixel[786];

			GPIOC->ODR = pixel[787];
			GPIOC->ODR = pixel[787];

			GPIOC->ODR = pixel[788];
			GPIOC->ODR = pixel[788];

			GPIOC->ODR = pixel[789];
			GPIOC->ODR = pixel[789];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[790];
			GPIOC->ODR = pixel[790];

			GPIOC->ODR = pixel[791];
			GPIOC->ODR = pixel[791];

			GPIOC->ODR = pixel[792];
			GPIOC->ODR = pixel[792];

			GPIOC->ODR = pixel[793];
			GPIOC->ODR = pixel[793];

			GPIOC->ODR = pixel[794];
			GPIOC->ODR = pixel[794];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[795];
			GPIOC->ODR = pixel[795];

			GPIOC->ODR = pixel[796];
			GPIOC->ODR = pixel[796];

			GPIOC->ODR = pixel[797];
			GPIOC->ODR = pixel[797];

			GPIOC->ODR = pixel[798];
			GPIOC->ODR = pixel[798];

			GPIOC->ODR = pixel[799];
			GPIOC->ODR = pixel[799];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[135];
			GPIOC->ODR = Score_val[135];

			GPIOC->ODR = Score_val[136];
			GPIOC->ODR = Score_val[136];

			GPIOC->ODR = Score_val[137];
			GPIOC->ODR = Score_val[137];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[138];
			GPIOC->ODR = Score_val[138];

			GPIOC->ODR = Score_val[139];
			GPIOC->ODR = Score_val[139];

			GPIOC->ODR = Score_val[140];
			GPIOC->ODR = Score_val[140];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[141];
			GPIOC->ODR = Score_val[141];

			GPIOC->ODR = Score_val[142];
			GPIOC->ODR = Score_val[142];

			GPIOC->ODR = Score_val[143];
			GPIOC->ODR = Score_val[143];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 210 ... 214: //1414b

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[800];
			GPIOC->ODR = pixel[800];

			GPIOC->ODR = pixel[801];
			GPIOC->ODR = pixel[801];

			GPIOC->ODR = pixel[802];
			GPIOC->ODR = pixel[802];

			GPIOC->ODR = pixel[803];
			GPIOC->ODR = pixel[803];

			GPIOC->ODR = pixel[804];
			GPIOC->ODR = pixel[804];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[805];
			GPIOC->ODR = pixel[805];

			GPIOC->ODR = pixel[806];
			GPIOC->ODR = pixel[806];

			GPIOC->ODR = pixel[807];
			GPIOC->ODR = pixel[807];

			GPIOC->ODR = pixel[808];
			GPIOC->ODR = pixel[808];

			GPIOC->ODR = pixel[809];
			GPIOC->ODR = pixel[809];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[810];
			GPIOC->ODR = pixel[810];

			GPIOC->ODR = pixel[811];
			GPIOC->ODR = pixel[811];

			GPIOC->ODR = pixel[812];
			GPIOC->ODR = pixel[812];

			GPIOC->ODR = pixel[813];
			GPIOC->ODR = pixel[813];

			GPIOC->ODR = pixel[814];
			GPIOC->ODR = pixel[814];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[815];
			GPIOC->ODR = pixel[815];

			GPIOC->ODR = pixel[816];
			GPIOC->ODR = pixel[816];

			GPIOC->ODR = pixel[817];
			GPIOC->ODR = pixel[817];

			GPIOC->ODR = pixel[818];
			GPIOC->ODR = pixel[818];

			GPIOC->ODR = pixel[819];
			GPIOC->ODR = pixel[819];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[820];
			GPIOC->ODR = pixel[820];

			GPIOC->ODR = pixel[821];
			GPIOC->ODR = pixel[821];

			GPIOC->ODR = pixel[822];
			GPIOC->ODR = pixel[822];

			GPIOC->ODR = pixel[823];
			GPIOC->ODR = pixel[823];

			GPIOC->ODR = pixel[824];
			GPIOC->ODR = pixel[824];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[825];
			GPIOC->ODR = pixel[825];

			GPIOC->ODR = pixel[826];
			GPIOC->ODR = pixel[826];

			GPIOC->ODR = pixel[827];
			GPIOC->ODR = pixel[827];

			GPIOC->ODR = pixel[828];
			GPIOC->ODR = pixel[828];

			GPIOC->ODR = pixel[829];
			GPIOC->ODR = pixel[829];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[830];
			GPIOC->ODR = pixel[830];

			GPIOC->ODR = pixel[831];
			GPIOC->ODR = pixel[831];

			GPIOC->ODR = pixel[832];
			GPIOC->ODR = pixel[832];

			GPIOC->ODR = pixel[833];
			GPIOC->ODR = pixel[833];

			GPIOC->ODR = pixel[834];
			GPIOC->ODR = pixel[834];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[835];
			GPIOC->ODR = pixel[835];

			GPIOC->ODR = pixel[836];
			GPIOC->ODR = pixel[836];

			GPIOC->ODR = pixel[837];
			GPIOC->ODR = pixel[837];

			GPIOC->ODR = pixel[838];
			GPIOC->ODR = pixel[838];

			GPIOC->ODR = pixel[839];
			GPIOC->ODR = pixel[839];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[840];
			GPIOC->ODR = pixel[840];

			GPIOC->ODR = pixel[841];
			GPIOC->ODR = pixel[841];

			GPIOC->ODR = pixel[842];
			GPIOC->ODR = pixel[842];

			GPIOC->ODR = pixel[843];
			GPIOC->ODR = pixel[843];

			GPIOC->ODR = pixel[844];
			GPIOC->ODR = pixel[844];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[845];
			GPIOC->ODR = pixel[845];

			GPIOC->ODR = pixel[846];
			GPIOC->ODR = pixel[846];

			GPIOC->ODR = pixel[847];
			GPIOC->ODR = pixel[847];

			GPIOC->ODR = pixel[848];
			GPIOC->ODR = pixel[848];

			GPIOC->ODR = pixel[849];
			GPIOC->ODR = pixel[849];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[144];
			GPIOC->ODR = Score_val[144];

			GPIOC->ODR = Score_val[145];
			GPIOC->ODR = Score_val[145];

			GPIOC->ODR = Score_val[146];
			GPIOC->ODR = Score_val[146];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[147];
			GPIOC->ODR = Score_val[147];

			GPIOC->ODR = Score_val[148];
			GPIOC->ODR = Score_val[148];

			GPIOC->ODR = Score_val[149];
			GPIOC->ODR = Score_val[149];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[150];
			GPIOC->ODR = Score_val[150];

			GPIOC->ODR = Score_val[151];
			GPIOC->ODR = Score_val[151];

			GPIOC->ODR = Score_val[152];
			GPIOC->ODR = Score_val[152];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 215 ... 219: //1414c

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;//dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[850];
			GPIOC->ODR = pixel[850];

			GPIOC->ODR = pixel[851];
			GPIOC->ODR = pixel[851];

			GPIOC->ODR = pixel[852];
			GPIOC->ODR = pixel[852];

			GPIOC->ODR = pixel[853];
			GPIOC->ODR = pixel[853];

			GPIOC->ODR = pixel[854];
			GPIOC->ODR = pixel[854];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[855];
			GPIOC->ODR = pixel[855];

			GPIOC->ODR = pixel[856];
			GPIOC->ODR = pixel[856];

			GPIOC->ODR = pixel[857];
			GPIOC->ODR = pixel[857];

			GPIOC->ODR = pixel[858];
			GPIOC->ODR = pixel[858];

			GPIOC->ODR = pixel[859];
			GPIOC->ODR = pixel[859];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[860];
			GPIOC->ODR = pixel[860];

			GPIOC->ODR = pixel[861];
			GPIOC->ODR = pixel[861];

			GPIOC->ODR = pixel[862];
			GPIOC->ODR = pixel[862];

			GPIOC->ODR = pixel[863];
			GPIOC->ODR = pixel[863];

			GPIOC->ODR = pixel[864];
			GPIOC->ODR = pixel[864];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[865];
			GPIOC->ODR = pixel[865];

			GPIOC->ODR = pixel[866];
			GPIOC->ODR = pixel[866];

			GPIOC->ODR = pixel[867];
			GPIOC->ODR = pixel[867];

			GPIOC->ODR = pixel[868];
			GPIOC->ODR = pixel[868];

			GPIOC->ODR = pixel[869];
			GPIOC->ODR = pixel[869];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[870];
			GPIOC->ODR = pixel[870];

			GPIOC->ODR = pixel[871];
			GPIOC->ODR = pixel[871];

			GPIOC->ODR = pixel[872];
			GPIOC->ODR = pixel[872];

			GPIOC->ODR = pixel[873];
			GPIOC->ODR = pixel[873];

			GPIOC->ODR = pixel[874];
			GPIOC->ODR = pixel[874];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[875];
			GPIOC->ODR = pixel[875];

			GPIOC->ODR = pixel[876];
			GPIOC->ODR = pixel[876];

			GPIOC->ODR = pixel[877];
			GPIOC->ODR = pixel[877];

			GPIOC->ODR = pixel[878];
			GPIOC->ODR = pixel[878];

			GPIOC->ODR = pixel[879];
			GPIOC->ODR = pixel[879];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[880];
			GPIOC->ODR = pixel[880];

			GPIOC->ODR = pixel[881];
			GPIOC->ODR = pixel[881];

			GPIOC->ODR = pixel[882];
			GPIOC->ODR = pixel[882];

			GPIOC->ODR = pixel[883];
			GPIOC->ODR = pixel[883];

			GPIOC->ODR = pixel[884];
			GPIOC->ODR = pixel[884];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[885];
			GPIOC->ODR = pixel[885];

			GPIOC->ODR = pixel[886];
			GPIOC->ODR = pixel[886];

			GPIOC->ODR = pixel[887];
			GPIOC->ODR = pixel[887];

			GPIOC->ODR = pixel[888];
			GPIOC->ODR = pixel[888];

			GPIOC->ODR = pixel[889];
			GPIOC->ODR = pixel[889];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[890];
			GPIOC->ODR = pixel[890];

			GPIOC->ODR = pixel[891];
			GPIOC->ODR = pixel[891];

			GPIOC->ODR = pixel[892];
			GPIOC->ODR = pixel[892];

			GPIOC->ODR = pixel[893];
			GPIOC->ODR = pixel[893];

			GPIOC->ODR = pixel[894];
			GPIOC->ODR = pixel[894];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[895];
			GPIOC->ODR = pixel[895];

			GPIOC->ODR = pixel[896];
			GPIOC->ODR = pixel[896];

			GPIOC->ODR = pixel[897];
			GPIOC->ODR = pixel[897];

			GPIOC->ODR = pixel[898];
			GPIOC->ODR = pixel[898];

			GPIOC->ODR = pixel[899];
			GPIOC->ODR = pixel[899];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[153];
			GPIOC->ODR = Score_val[153];

			GPIOC->ODR = Score_val[154];
			GPIOC->ODR = Score_val[154];

			GPIOC->ODR = Score_val[155];
			GPIOC->ODR = Score_val[155];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[156];
			GPIOC->ODR = Score_val[156];

			GPIOC->ODR = Score_val[157];
			GPIOC->ODR = Score_val[157];

			GPIOC->ODR = Score_val[158];
			GPIOC->ODR = Score_val[158];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[159];
			GPIOC->ODR = Score_val[159];

			GPIOC->ODR = Score_val[160];
			GPIOC->ODR = Score_val[160];

			GPIOC->ODR = Score_val[161];
			GPIOC->ODR = Score_val[161];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 220 ... 224: // 1414d

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[900];
			GPIOC->ODR = pixel[900];

			GPIOC->ODR = pixel[901];
			GPIOC->ODR = pixel[901];

			GPIOC->ODR = pixel[902];
			GPIOC->ODR = pixel[902];

			GPIOC->ODR = pixel[903];
			GPIOC->ODR = pixel[903];

			GPIOC->ODR = pixel[904];
			GPIOC->ODR = pixel[904];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[905];
			GPIOC->ODR = pixel[905];

			GPIOC->ODR = pixel[906];
			GPIOC->ODR = pixel[906];

			GPIOC->ODR = pixel[907];
			GPIOC->ODR = pixel[907];

			GPIOC->ODR = pixel[908];
			GPIOC->ODR = pixel[908];

			GPIOC->ODR = pixel[909];
			GPIOC->ODR = pixel[909];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[910];
			GPIOC->ODR = pixel[910];

			GPIOC->ODR = pixel[911];
			GPIOC->ODR = pixel[911];

			GPIOC->ODR = pixel[912];
			GPIOC->ODR = pixel[912];

			GPIOC->ODR = pixel[913];
			GPIOC->ODR = pixel[913];

			GPIOC->ODR = pixel[914];
			GPIOC->ODR = pixel[914];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[915];
			GPIOC->ODR = pixel[915];

			GPIOC->ODR = pixel[916];
			GPIOC->ODR = pixel[916];

			GPIOC->ODR = pixel[917];
			GPIOC->ODR = pixel[917];

			GPIOC->ODR = pixel[918];
			GPIOC->ODR = pixel[918];

			GPIOC->ODR = pixel[919];
			GPIOC->ODR = pixel[919];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[920];
			GPIOC->ODR = pixel[920];

			GPIOC->ODR = pixel[921];
			GPIOC->ODR = pixel[921];

			GPIOC->ODR = pixel[922];
			GPIOC->ODR = pixel[922];

			GPIOC->ODR = pixel[923];
			GPIOC->ODR = pixel[923];

			GPIOC->ODR = pixel[924];
			GPIOC->ODR = pixel[924];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[925];
			GPIOC->ODR = pixel[925];

			GPIOC->ODR = pixel[926];
			GPIOC->ODR = pixel[926];

			GPIOC->ODR = pixel[927];
			GPIOC->ODR = pixel[927];

			GPIOC->ODR = pixel[928];
			GPIOC->ODR = pixel[928];

			GPIOC->ODR = pixel[929];
			GPIOC->ODR = pixel[929];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[930];
			GPIOC->ODR = pixel[930];

			GPIOC->ODR = pixel[931];
			GPIOC->ODR = pixel[931];

			GPIOC->ODR = pixel[932];
			GPIOC->ODR = pixel[932];

			GPIOC->ODR = pixel[933];
			GPIOC->ODR = pixel[933];

			GPIOC->ODR = pixel[934];
			GPIOC->ODR = pixel[934];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[935];
			GPIOC->ODR = pixel[935];

			GPIOC->ODR = pixel[936];
			GPIOC->ODR = pixel[936];

			GPIOC->ODR = pixel[937];
			GPIOC->ODR = pixel[937];

			GPIOC->ODR = pixel[938];
			GPIOC->ODR = pixel[938];

			GPIOC->ODR = pixel[939];
			GPIOC->ODR = pixel[939];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[940];
			GPIOC->ODR = pixel[940];

			GPIOC->ODR = pixel[941];
			GPIOC->ODR = pixel[941];

			GPIOC->ODR = pixel[942];
			GPIOC->ODR = pixel[942];

			GPIOC->ODR = pixel[943];
			GPIOC->ODR = pixel[943];

			GPIOC->ODR = pixel[944];
			GPIOC->ODR = pixel[944];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[945];
			GPIOC->ODR = pixel[945];

			GPIOC->ODR = pixel[946];
			GPIOC->ODR = pixel[946];

			GPIOC->ODR = pixel[947];
			GPIOC->ODR = pixel[947];

			GPIOC->ODR = pixel[948];
			GPIOC->ODR = pixel[948];

			GPIOC->ODR = pixel[949];
			GPIOC->ODR = pixel[949];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[162];
			GPIOC->ODR = Score_val[162];

			GPIOC->ODR = Score_val[163];
			GPIOC->ODR = Score_val[163];

			GPIOC->ODR = Score_val[164];
			GPIOC->ODR = Score_val[164];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[165];
			GPIOC->ODR = Score_val[165];

			GPIOC->ODR = Score_val[166];
			GPIOC->ODR = Score_val[166];

			GPIOC->ODR = Score_val[167];
			GPIOC->ODR = Score_val[167];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[168];
			GPIOC->ODR = Score_val[168];

			GPIOC->ODR = Score_val[169];
			GPIOC->ODR = Score_val[169];

			GPIOC->ODR = Score_val[170];
			GPIOC->ODR = Score_val[170];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 225 ... 229: //1414e

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[950];
			GPIOC->ODR = pixel[950];

			GPIOC->ODR = pixel[951];
			GPIOC->ODR = pixel[951];

			GPIOC->ODR = pixel[952];
			GPIOC->ODR = pixel[952];

			GPIOC->ODR = pixel[953];
			GPIOC->ODR = pixel[953];

			GPIOC->ODR = pixel[954];
			GPIOC->ODR = pixel[954];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[955];
			GPIOC->ODR = pixel[955];

			GPIOC->ODR = pixel[956];
			GPIOC->ODR = pixel[956];

			GPIOC->ODR = pixel[957];
			GPIOC->ODR = pixel[957];

			GPIOC->ODR = pixel[958];
			GPIOC->ODR = pixel[958];

			GPIOC->ODR = pixel[959];
			GPIOC->ODR = pixel[959];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[960];
			GPIOC->ODR = pixel[960];

			GPIOC->ODR = pixel[961];
			GPIOC->ODR = pixel[961];

			GPIOC->ODR = pixel[962];
			GPIOC->ODR = pixel[962];

			GPIOC->ODR = pixel[963];
			GPIOC->ODR = pixel[963];

			GPIOC->ODR = pixel[964];
			GPIOC->ODR = pixel[964];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[965];
			GPIOC->ODR = pixel[965];

			GPIOC->ODR = pixel[966];
			GPIOC->ODR = pixel[966];

			GPIOC->ODR = pixel[967];
			GPIOC->ODR = pixel[967];

			GPIOC->ODR = pixel[968];
			GPIOC->ODR = pixel[968];

			GPIOC->ODR = pixel[969];
			GPIOC->ODR = pixel[969];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[970];
			GPIOC->ODR = pixel[970];

			GPIOC->ODR = pixel[971];
			GPIOC->ODR = pixel[971];

			GPIOC->ODR = pixel[972];
			GPIOC->ODR = pixel[972];

			GPIOC->ODR = pixel[973];
			GPIOC->ODR = pixel[973];

			GPIOC->ODR = pixel[974];
			GPIOC->ODR = pixel[974];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[975];
			GPIOC->ODR = pixel[975];

			GPIOC->ODR = pixel[976];
			GPIOC->ODR = pixel[976];

			GPIOC->ODR = pixel[977];
			GPIOC->ODR = pixel[977];

			GPIOC->ODR = pixel[978];
			GPIOC->ODR = pixel[978];

			GPIOC->ODR = pixel[979];
			GPIOC->ODR = pixel[979];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[980];
			GPIOC->ODR = pixel[980];

			GPIOC->ODR = pixel[981];
			GPIOC->ODR = pixel[981];

			GPIOC->ODR = pixel[982];
			GPIOC->ODR = pixel[982];

			GPIOC->ODR = pixel[983];
			GPIOC->ODR = pixel[983];

			GPIOC->ODR = pixel[984];
			GPIOC->ODR = pixel[984];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[985];
			GPIOC->ODR = pixel[985];

			GPIOC->ODR = pixel[986];
			GPIOC->ODR = pixel[986];

			GPIOC->ODR = pixel[987];
			GPIOC->ODR = pixel[987];

			GPIOC->ODR = pixel[988];
			GPIOC->ODR = pixel[988];

			GPIOC->ODR = pixel[989];
			GPIOC->ODR = pixel[989];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[990];
			GPIOC->ODR = pixel[990];

			GPIOC->ODR = pixel[991];
			GPIOC->ODR = pixel[991];

			GPIOC->ODR = pixel[992];
			GPIOC->ODR = pixel[992];

			GPIOC->ODR = pixel[993];
			GPIOC->ODR = pixel[993];

			GPIOC->ODR = pixel[994];
			GPIOC->ODR = pixel[994];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[995];
			GPIOC->ODR = pixel[995];

			GPIOC->ODR = pixel[996];
			GPIOC->ODR = pixel[996];

			GPIOC->ODR = pixel[997];
			GPIOC->ODR = pixel[997];

			GPIOC->ODR = pixel[998];
			GPIOC->ODR = pixel[998];

			GPIOC->ODR = pixel[999];
			GPIOC->ODR = pixel[999];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[171];
			GPIOC->ODR = Score_val[171];

			GPIOC->ODR = Score_val[172];
			GPIOC->ODR = Score_val[172];

			GPIOC->ODR = Score_val[173];
			GPIOC->ODR = Score_val[173];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[174];
			GPIOC->ODR = Score_val[174];

			GPIOC->ODR = Score_val[175];
			GPIOC->ODR = Score_val[175];

			GPIOC->ODR = Score_val[176];
			GPIOC->ODR = Score_val[176];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[177];
			GPIOC->ODR = Score_val[177];

			GPIOC->ODR = Score_val[178];
			GPIOC->ODR = Score_val[178];

			GPIOC->ODR = Score_val[179];
			GPIOC->ODR = Score_val[179];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 230 ... 234:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 235 ... 235:
			GPIOC->ODR = White_OFF;
			break;
			case 236 ... 239:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			}
		break;


		case 240 ... 274: //fiveteens 1515a
		switch(Lines)
		{
		case 240 ... 244:

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[0];
		GPIOC->ODR = ppixel[0];

		GPIOC->ODR = ppixel[1];
		GPIOC->ODR = ppixel[1];

		GPIOC->ODR = ppixel[2];
		GPIOC->ODR = ppixel[2];

		GPIOC->ODR = ppixel[3];
		GPIOC->ODR = ppixel[3];

		GPIOC->ODR = ppixel[4];
		GPIOC->ODR = ppixel[4];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[5];
		GPIOC->ODR = ppixel[5];

		GPIOC->ODR = ppixel[6];
		GPIOC->ODR = ppixel[6];

		GPIOC->ODR = ppixel[7];
		GPIOC->ODR = ppixel[7];

		GPIOC->ODR = ppixel[8];
		GPIOC->ODR = ppixel[8];

		GPIOC->ODR = ppixel[9];
		GPIOC->ODR = ppixel[9];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[10];
		GPIOC->ODR = ppixel[10];

		GPIOC->ODR = ppixel[11];
		GPIOC->ODR = ppixel[11];

		GPIOC->ODR = ppixel[12];
		GPIOC->ODR = ppixel[12];

		GPIOC->ODR = ppixel[13];
		GPIOC->ODR = ppixel[13];

		GPIOC->ODR = ppixel[14];
		GPIOC->ODR = ppixel[14];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[15];
		GPIOC->ODR = ppixel[15];

		GPIOC->ODR = ppixel[16];
		GPIOC->ODR = ppixel[16];

		GPIOC->ODR = ppixel[17];
		GPIOC->ODR = ppixel[17];

		GPIOC->ODR = ppixel[18];
		GPIOC->ODR = ppixel[18];

		GPIOC->ODR = ppixel[19];
		GPIOC->ODR = ppixel[19];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[20];
		GPIOC->ODR = ppixel[20];

		GPIOC->ODR = ppixel[21];
		GPIOC->ODR = ppixel[21];

		GPIOC->ODR = ppixel[22];
		GPIOC->ODR = ppixel[22];

		GPIOC->ODR = ppixel[23];
		GPIOC->ODR = ppixel[23];

		GPIOC->ODR = ppixel[24];
		GPIOC->ODR = ppixel[24];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[25];
		GPIOC->ODR = ppixel[25];

		GPIOC->ODR = ppixel[26];
		GPIOC->ODR = ppixel[26];

		GPIOC->ODR = ppixel[27];
		GPIOC->ODR = ppixel[27];

		GPIOC->ODR = ppixel[28];
		GPIOC->ODR = ppixel[28];

		GPIOC->ODR = ppixel[29];
		GPIOC->ODR = ppixel[29];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[30];
		GPIOC->ODR = ppixel[30];

		GPIOC->ODR = ppixel[31];
		GPIOC->ODR = ppixel[31];

		GPIOC->ODR = ppixel[32];
		GPIOC->ODR = ppixel[32];

		GPIOC->ODR = ppixel[33];
		GPIOC->ODR = ppixel[33];

		GPIOC->ODR = ppixel[34];
		GPIOC->ODR = ppixel[34];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[35];
		GPIOC->ODR = ppixel[35];

		GPIOC->ODR = ppixel[36];
		GPIOC->ODR = ppixel[36];

		GPIOC->ODR = ppixel[37];
		GPIOC->ODR = ppixel[37];

		GPIOC->ODR = ppixel[38];
		GPIOC->ODR = ppixel[38];

		GPIOC->ODR = ppixel[39];
		GPIOC->ODR = ppixel[39];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[40];
		GPIOC->ODR = ppixel[40];

		GPIOC->ODR = ppixel[41];
		GPIOC->ODR = ppixel[41];

		GPIOC->ODR = ppixel[42];
		GPIOC->ODR = ppixel[42];

		GPIOC->ODR = ppixel[43];
		GPIOC->ODR = ppixel[43];

		GPIOC->ODR = ppixel[44];
		GPIOC->ODR = ppixel[44];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[45];
		GPIOC->ODR = ppixel[45];

		GPIOC->ODR = ppixel[46];
		GPIOC->ODR = ppixel[46];

		GPIOC->ODR = ppixel[47];
		GPIOC->ODR = ppixel[47];

		GPIOC->ODR = ppixel[48];
		GPIOC->ODR = ppixel[48];

		GPIOC->ODR = ppixel[49];
		GPIOC->ODR = ppixel[49];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[180];
		GPIOC->ODR = Score_val[180];

		GPIOC->ODR = Score_val[181];
		GPIOC->ODR = Score_val[181];

		GPIOC->ODR = Score_val[182];
		GPIOC->ODR = Score_val[182];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[183];
		GPIOC->ODR = Score_val[183];

		GPIOC->ODR = Score_val[184];
		GPIOC->ODR = Score_val[184];

		GPIOC->ODR = Score_val[185];
		GPIOC->ODR = Score_val[185];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[186];
		GPIOC->ODR = Score_val[186];

		GPIOC->ODR = Score_val[187];
		GPIOC->ODR = Score_val[187];

		GPIOC->ODR = Score_val[188];
		GPIOC->ODR = Score_val[188];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 245 ... 249: //1515b

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[50];
		GPIOC->ODR = ppixel[50];

		GPIOC->ODR = ppixel[51];
		GPIOC->ODR = ppixel[51];

		GPIOC->ODR = ppixel[52];
		GPIOC->ODR = ppixel[52];

		GPIOC->ODR = ppixel[53];
		GPIOC->ODR = ppixel[53];

		GPIOC->ODR = ppixel[54];
		GPIOC->ODR = ppixel[54];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[55];
		GPIOC->ODR = ppixel[55];

		GPIOC->ODR = ppixel[56];
		GPIOC->ODR = ppixel[56];

		GPIOC->ODR = ppixel[57];
		GPIOC->ODR = ppixel[57];

		GPIOC->ODR = ppixel[58];
		GPIOC->ODR = ppixel[58];

		GPIOC->ODR = ppixel[59];
		GPIOC->ODR = ppixel[59];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[60];
		GPIOC->ODR = ppixel[60];

		GPIOC->ODR = ppixel[61];
		GPIOC->ODR = ppixel[61];

		GPIOC->ODR = ppixel[62];
		GPIOC->ODR = ppixel[62];

		GPIOC->ODR = ppixel[63];
		GPIOC->ODR = ppixel[63];

		GPIOC->ODR = ppixel[64];
		GPIOC->ODR = ppixel[64];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[65];
		GPIOC->ODR = ppixel[65];

		GPIOC->ODR = ppixel[66];
		GPIOC->ODR = ppixel[66];

		GPIOC->ODR = ppixel[67];
		GPIOC->ODR = ppixel[67];

		GPIOC->ODR = ppixel[68];
		GPIOC->ODR = ppixel[68];

		GPIOC->ODR = ppixel[69];
		GPIOC->ODR = ppixel[69];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[70];
		GPIOC->ODR = ppixel[70];

		GPIOC->ODR = ppixel[71];
		GPIOC->ODR = ppixel[71];

		GPIOC->ODR = ppixel[72];
		GPIOC->ODR = ppixel[72];

		GPIOC->ODR = ppixel[73];
		GPIOC->ODR = ppixel[73];

		GPIOC->ODR = ppixel[74];
		GPIOC->ODR = ppixel[74];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[75];
		GPIOC->ODR = ppixel[75];

		GPIOC->ODR = ppixel[76];
		GPIOC->ODR = ppixel[76];

		GPIOC->ODR = ppixel[77];
		GPIOC->ODR = ppixel[77];

		GPIOC->ODR = ppixel[78];
		GPIOC->ODR = ppixel[78];

		GPIOC->ODR = ppixel[79];
		GPIOC->ODR = ppixel[79];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[80];
		GPIOC->ODR = ppixel[80];

		GPIOC->ODR = ppixel[81];
		GPIOC->ODR = ppixel[81];

		GPIOC->ODR = ppixel[82];
		GPIOC->ODR = ppixel[82];

		GPIOC->ODR = ppixel[83];
		GPIOC->ODR = ppixel[83];

		GPIOC->ODR = ppixel[84];
		GPIOC->ODR = ppixel[84];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[85];
		GPIOC->ODR = ppixel[85];

		GPIOC->ODR = ppixel[86];
		GPIOC->ODR = ppixel[86];

		GPIOC->ODR = ppixel[87];
		GPIOC->ODR = ppixel[87];

		GPIOC->ODR = ppixel[88];
		GPIOC->ODR = ppixel[88];

		GPIOC->ODR = ppixel[89];
		GPIOC->ODR = ppixel[89];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[90];
		GPIOC->ODR = ppixel[90];

		GPIOC->ODR = ppixel[91];
		GPIOC->ODR = ppixel[91];

		GPIOC->ODR = ppixel[92];
		GPIOC->ODR = ppixel[92];

		GPIOC->ODR = ppixel[93];
		GPIOC->ODR = ppixel[93];

		GPIOC->ODR = ppixel[94];
		GPIOC->ODR = ppixel[94];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[95];
		GPIOC->ODR = ppixel[95];

		GPIOC->ODR = ppixel[96];
		GPIOC->ODR = ppixel[96];

		GPIOC->ODR = ppixel[97];
		GPIOC->ODR = ppixel[97];

		GPIOC->ODR = ppixel[98];
		GPIOC->ODR = ppixel[98];

		GPIOC->ODR = ppixel[99];
		GPIOC->ODR = ppixel[99];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[189];
		GPIOC->ODR = Score_val[189];

		GPIOC->ODR = Score_val[190];
		GPIOC->ODR = Score_val[190];

		GPIOC->ODR = Score_val[191];
		GPIOC->ODR = Score_val[191];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[192];
		GPIOC->ODR = Score_val[192];

		GPIOC->ODR = Score_val[193];
		GPIOC->ODR = Score_val[193];

		GPIOC->ODR = Score_val[194];
		GPIOC->ODR = Score_val[194];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[195];
		GPIOC->ODR = Score_val[195];

		GPIOC->ODR = Score_val[196];
		GPIOC->ODR = Score_val[196];

		GPIOC->ODR = Score_val[197];
		GPIOC->ODR = Score_val[197];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 250 ... 254: //1515c

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[100];
		GPIOC->ODR = ppixel[100];

		GPIOC->ODR = ppixel[101];
		GPIOC->ODR = ppixel[101];

		GPIOC->ODR = ppixel[102];
		GPIOC->ODR = ppixel[102];

		GPIOC->ODR = ppixel[103];
		GPIOC->ODR = ppixel[103];

		GPIOC->ODR = ppixel[104];
		GPIOC->ODR = ppixel[104];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[105];
		GPIOC->ODR = ppixel[105];

		GPIOC->ODR = ppixel[106];
		GPIOC->ODR = ppixel[106];

		GPIOC->ODR = ppixel[107];
		GPIOC->ODR = ppixel[107];

		GPIOC->ODR = ppixel[108];
		GPIOC->ODR = ppixel[108];

		GPIOC->ODR = ppixel[109];
		GPIOC->ODR = ppixel[109];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[110];
		GPIOC->ODR = ppixel[110];

		GPIOC->ODR = ppixel[111];
		GPIOC->ODR = ppixel[111];

		GPIOC->ODR = ppixel[112];
		GPIOC->ODR = ppixel[112];

		GPIOC->ODR = ppixel[113];
		GPIOC->ODR = ppixel[113];

		GPIOC->ODR = ppixel[114];
		GPIOC->ODR = ppixel[114];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[115];
		GPIOC->ODR = ppixel[115];

		GPIOC->ODR = ppixel[116];
		GPIOC->ODR = ppixel[116];

		GPIOC->ODR = ppixel[117];
		GPIOC->ODR = ppixel[117];

		GPIOC->ODR = ppixel[118];
		GPIOC->ODR = ppixel[118];

		GPIOC->ODR = ppixel[119];
		GPIOC->ODR = ppixel[119];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[120];
		GPIOC->ODR = ppixel[120];

		GPIOC->ODR = ppixel[121];
		GPIOC->ODR = ppixel[121];

		GPIOC->ODR = ppixel[122];
		GPIOC->ODR = ppixel[122];

		GPIOC->ODR = ppixel[123];
		GPIOC->ODR = ppixel[123];

		GPIOC->ODR = ppixel[124];
		GPIOC->ODR = ppixel[124];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[125];
		GPIOC->ODR = ppixel[125];

		GPIOC->ODR = ppixel[126];
		GPIOC->ODR = ppixel[126];

		GPIOC->ODR = ppixel[127];
		GPIOC->ODR = ppixel[127];

		GPIOC->ODR = ppixel[128];
		GPIOC->ODR = ppixel[128];

		GPIOC->ODR = ppixel[129];
		GPIOC->ODR = ppixel[129];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[130];
		GPIOC->ODR = ppixel[130];

		GPIOC->ODR = ppixel[131];
		GPIOC->ODR = ppixel[131];

		GPIOC->ODR = ppixel[132];
		GPIOC->ODR = ppixel[132];

		GPIOC->ODR = ppixel[133];
		GPIOC->ODR = ppixel[133];

		GPIOC->ODR = ppixel[134];
		GPIOC->ODR = ppixel[134];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[135];
		GPIOC->ODR = ppixel[135];

		GPIOC->ODR = ppixel[136];
		GPIOC->ODR = ppixel[136];

		GPIOC->ODR = ppixel[137];
		GPIOC->ODR = ppixel[137];

		GPIOC->ODR = ppixel[138];
		GPIOC->ODR = ppixel[138];

		GPIOC->ODR = ppixel[139];
		GPIOC->ODR = ppixel[139];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[140];
		GPIOC->ODR = ppixel[140];

		GPIOC->ODR = ppixel[141];
		GPIOC->ODR = ppixel[141];

		GPIOC->ODR = ppixel[142];
		GPIOC->ODR = ppixel[142];

		GPIOC->ODR = ppixel[143];
		GPIOC->ODR = ppixel[143];

		GPIOC->ODR = ppixel[144];
		GPIOC->ODR = ppixel[144];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[145];
		GPIOC->ODR = ppixel[145];

		GPIOC->ODR = ppixel[146];
		GPIOC->ODR = ppixel[146];

		GPIOC->ODR = ppixel[147];
		GPIOC->ODR = ppixel[147];

		GPIOC->ODR = ppixel[148];
		GPIOC->ODR = ppixel[148];

		GPIOC->ODR = ppixel[149];
		GPIOC->ODR = ppixel[149];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[198];
		GPIOC->ODR = Score_val[198];

		GPIOC->ODR = Score_val[199];
		GPIOC->ODR = Score_val[199];

		GPIOC->ODR = Score_val[200];
		GPIOC->ODR = Score_val[200];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[201];
		GPIOC->ODR = Score_val[201];

		GPIOC->ODR = Score_val[202];
		GPIOC->ODR = Score_val[202];

		GPIOC->ODR = Score_val[203];
		GPIOC->ODR = Score_val[203];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[204];
		GPIOC->ODR = Score_val[204];

		GPIOC->ODR = Score_val[205];
		GPIOC->ODR = Score_val[205];

		GPIOC->ODR = Score_val[206];
		GPIOC->ODR = Score_val[206];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 255 ... 259: // 1515d

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[150];
		GPIOC->ODR = ppixel[150];

		GPIOC->ODR = ppixel[151];
		GPIOC->ODR = ppixel[151];

		GPIOC->ODR = ppixel[152];
		GPIOC->ODR = ppixel[152];

		GPIOC->ODR = ppixel[153];
		GPIOC->ODR = ppixel[153];

		GPIOC->ODR = ppixel[154];
		GPIOC->ODR = ppixel[154];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[155];
		GPIOC->ODR = ppixel[155];

		GPIOC->ODR = ppixel[156];
		GPIOC->ODR = ppixel[156];

		GPIOC->ODR = ppixel[157];
		GPIOC->ODR = ppixel[157];

		GPIOC->ODR = ppixel[158];
		GPIOC->ODR = ppixel[158];

		GPIOC->ODR = ppixel[159];
		GPIOC->ODR = ppixel[159];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[160];
		GPIOC->ODR = ppixel[160];

		GPIOC->ODR = ppixel[161];
		GPIOC->ODR = ppixel[161];

		GPIOC->ODR = ppixel[162];
		GPIOC->ODR = ppixel[162];

		GPIOC->ODR = ppixel[163];
		GPIOC->ODR = ppixel[163];

		GPIOC->ODR = ppixel[164];
		GPIOC->ODR = ppixel[164];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[165];
		GPIOC->ODR = ppixel[165];

		GPIOC->ODR = ppixel[166];
		GPIOC->ODR = ppixel[166];

		GPIOC->ODR = ppixel[167];
		GPIOC->ODR = ppixel[167];

		GPIOC->ODR = ppixel[168];
		GPIOC->ODR = ppixel[168];

		GPIOC->ODR = ppixel[169];
		GPIOC->ODR = ppixel[169];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[170];
		GPIOC->ODR = ppixel[170];

		GPIOC->ODR = ppixel[171];
		GPIOC->ODR = ppixel[171];

		GPIOC->ODR = ppixel[172];
		GPIOC->ODR = ppixel[172];

		GPIOC->ODR = ppixel[173];
		GPIOC->ODR = ppixel[173];

		GPIOC->ODR = ppixel[174];
		GPIOC->ODR = ppixel[174];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[175];
		GPIOC->ODR = ppixel[175];

		GPIOC->ODR = ppixel[176];
		GPIOC->ODR = ppixel[176];

		GPIOC->ODR = ppixel[177];
		GPIOC->ODR = ppixel[177];

		GPIOC->ODR = ppixel[178];
		GPIOC->ODR = ppixel[178];

		GPIOC->ODR = ppixel[179];
		GPIOC->ODR = ppixel[179];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[180];
		GPIOC->ODR = ppixel[180];

		GPIOC->ODR = ppixel[181];
		GPIOC->ODR = ppixel[181];

		GPIOC->ODR = ppixel[182];
		GPIOC->ODR = ppixel[182];

		GPIOC->ODR = ppixel[183];
		GPIOC->ODR = ppixel[183];

		GPIOC->ODR = ppixel[184];
		GPIOC->ODR = ppixel[184];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[185];
		GPIOC->ODR = ppixel[185];

		GPIOC->ODR = ppixel[186];
		GPIOC->ODR = ppixel[186];

		GPIOC->ODR = ppixel[187];
		GPIOC->ODR = ppixel[187];

		GPIOC->ODR = ppixel[188];
		GPIOC->ODR = ppixel[188];

		GPIOC->ODR = ppixel[189];
		GPIOC->ODR = ppixel[189];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[190];
		GPIOC->ODR = ppixel[190];

		GPIOC->ODR = ppixel[191];
		GPIOC->ODR = ppixel[191];

		GPIOC->ODR = ppixel[192];
		GPIOC->ODR = ppixel[192];

		GPIOC->ODR = ppixel[193];
		GPIOC->ODR = ppixel[193];

		GPIOC->ODR = ppixel[194];
		GPIOC->ODR = ppixel[194];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[195];
		GPIOC->ODR = ppixel[195];

		GPIOC->ODR = ppixel[196];
		GPIOC->ODR = ppixel[196];

		GPIOC->ODR = ppixel[197];
		GPIOC->ODR = ppixel[197];

		GPIOC->ODR = ppixel[198];
		GPIOC->ODR = ppixel[198];

		GPIOC->ODR = ppixel[199];
		GPIOC->ODR = ppixel[199];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[207];
		GPIOC->ODR = Score_val[207];

		GPIOC->ODR = Score_val[208];
		GPIOC->ODR = Score_val[208];

		GPIOC->ODR = Score_val[209];
		GPIOC->ODR = Score_val[209];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[210];
		GPIOC->ODR = Score_val[210];

		GPIOC->ODR = Score_val[211];
		GPIOC->ODR = Score_val[211];

		GPIOC->ODR = Score_val[212];
		GPIOC->ODR = Score_val[212];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[213];
		GPIOC->ODR = Score_val[213];

		GPIOC->ODR = Score_val[214];
		GPIOC->ODR = Score_val[214];

		GPIOC->ODR = Score_val[215];
		GPIOC->ODR = Score_val[215];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 260 ... 264: //1515e

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green; // dot
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[200];
		GPIOC->ODR = ppixel[200];

		GPIOC->ODR = ppixel[201];
		GPIOC->ODR = ppixel[201];

		GPIOC->ODR = ppixel[202];
		GPIOC->ODR = ppixel[202];

		GPIOC->ODR = ppixel[203];
		GPIOC->ODR = ppixel[203];

		GPIOC->ODR = ppixel[204];
		GPIOC->ODR = ppixel[204];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[205];
		GPIOC->ODR = ppixel[205];

		GPIOC->ODR = ppixel[206];
		GPIOC->ODR = ppixel[206];

		GPIOC->ODR = ppixel[207];
		GPIOC->ODR = ppixel[207];

		GPIOC->ODR = ppixel[208];
		GPIOC->ODR = ppixel[208];

		GPIOC->ODR = ppixel[209];
		GPIOC->ODR = ppixel[209];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[210];
		GPIOC->ODR = ppixel[210];

		GPIOC->ODR = ppixel[211];
		GPIOC->ODR = ppixel[211];

		GPIOC->ODR = ppixel[212];
		GPIOC->ODR = ppixel[212];

		GPIOC->ODR = ppixel[213];
		GPIOC->ODR = ppixel[213];

		GPIOC->ODR = ppixel[214];
		GPIOC->ODR = ppixel[214];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[215];
		GPIOC->ODR = ppixel[215];

		GPIOC->ODR = ppixel[216];
		GPIOC->ODR = ppixel[216];

		GPIOC->ODR = ppixel[217];
		GPIOC->ODR = ppixel[217];

		GPIOC->ODR = ppixel[218];
		GPIOC->ODR = ppixel[218];

		GPIOC->ODR = ppixel[219];
		GPIOC->ODR = ppixel[219];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[220];
		GPIOC->ODR = ppixel[220];

		GPIOC->ODR = ppixel[221];
		GPIOC->ODR = ppixel[221];

		GPIOC->ODR = ppixel[222];
		GPIOC->ODR = ppixel[222];

		GPIOC->ODR = ppixel[223];
		GPIOC->ODR = ppixel[223];

		GPIOC->ODR = ppixel[224];
		GPIOC->ODR = ppixel[224];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[225];
		GPIOC->ODR = ppixel[225];

		GPIOC->ODR = ppixel[226];
		GPIOC->ODR = ppixel[226];

		GPIOC->ODR = ppixel[227];
		GPIOC->ODR = ppixel[227];

		GPIOC->ODR = ppixel[228];
		GPIOC->ODR = ppixel[228];

		GPIOC->ODR = ppixel[229];
		GPIOC->ODR = ppixel[229];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[230];
		GPIOC->ODR = ppixel[230];

		GPIOC->ODR = ppixel[231];
		GPIOC->ODR = ppixel[231];

		GPIOC->ODR = ppixel[232];
		GPIOC->ODR = ppixel[232];

		GPIOC->ODR = ppixel[233];
		GPIOC->ODR = ppixel[233];

		GPIOC->ODR = ppixel[234];
		GPIOC->ODR = ppixel[234];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[235];
		GPIOC->ODR = ppixel[235];

		GPIOC->ODR = ppixel[236];
		GPIOC->ODR = ppixel[236];

		GPIOC->ODR = ppixel[237];
		GPIOC->ODR = ppixel[237];

		GPIOC->ODR = ppixel[238];
		GPIOC->ODR = ppixel[238];

		GPIOC->ODR = ppixel[239];
		GPIOC->ODR = ppixel[239];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[240];
		GPIOC->ODR = ppixel[240];

		GPIOC->ODR = ppixel[241];
		GPIOC->ODR = ppixel[241];

		GPIOC->ODR = ppixel[242];
		GPIOC->ODR = ppixel[242];

		GPIOC->ODR = ppixel[243];
		GPIOC->ODR = ppixel[243];

		GPIOC->ODR = ppixel[244];
		GPIOC->ODR = ppixel[244];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[245];
		GPIOC->ODR = ppixel[245];

		GPIOC->ODR = ppixel[246];
		GPIOC->ODR = ppixel[246];

		GPIOC->ODR = ppixel[247];
		GPIOC->ODR = ppixel[247];

		GPIOC->ODR = ppixel[248];
		GPIOC->ODR = ppixel[248];

		GPIOC->ODR = ppixel[249];
		GPIOC->ODR = ppixel[249];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[216];
		GPIOC->ODR = Score_val[216];

		GPIOC->ODR = Score_val[217];
		GPIOC->ODR = Score_val[217];

		GPIOC->ODR = Score_val[218];
		GPIOC->ODR = Score_val[218];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[219];
		GPIOC->ODR = Score_val[219];

		GPIOC->ODR = Score_val[220];
		GPIOC->ODR = Score_val[220];

		GPIOC->ODR = Score_val[221];
		GPIOC->ODR = Score_val[221];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[222];
		GPIOC->ODR = Score_val[222];

		GPIOC->ODR = Score_val[223];
		GPIOC->ODR = Score_val[223];

		GPIOC->ODR = Score_val[224];
		GPIOC->ODR = Score_val[224];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 265 ... 269:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		while(waste_of_time<50)
		{
			GPIOC->ODR = Deep_Green;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = White_OFF;
		break;
		case 270 ... 270:
		GPIOC->ODR = White_OFF;
		break;
		case 271 ... 274:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		while(waste_of_time<50)
		{
			GPIOC->ODR = Deep_Green;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = White_OFF;
		break;
		}
		break;
		break;
	}//1515a switch
		} // visko piesimo switch
	break; // antro page break;
	case 3:
		switch(Lines)
		{
		case 0 ... 30:
		GPIOC->ODR &= White_OFF;
		break;
		case 31 ... 55: //scorecase = 1
		while(waste_of_time<18)
		{
			GPIOC->ODR &= White_OFF;
			waste_of_time++;
		}
		waste_of_time = 0;
		switch(Lines)
		{
		case 31 ... 35: //SSS1
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//CCC1

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//OOO1

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR1

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE1

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::1

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 36 ... 40: //SSS2
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //CCC2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //OOO2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE2

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::2

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		break;
		case 41 ... 45:
		GPIOC->ODR = White_OFF; //SSS3
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //CCC3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //OOO3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE3

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::3

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		break;
		case 46 ... 50:
		GPIOC->ODR = White_OFF; //SSS4
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //CCC4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //OOO4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE4

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::4

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		break;
		case 51 ... 55:
		GPIOC->ODR = Deep_Green; //SSS5
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = White_OFF; //CCC5
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//OOO5

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //RRR5

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //EEE5

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //:::5

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		}
		break;
		case 95 ... 600: //scorecase = 2
		while(waste_of_time<1)
		{
			GPIOC->ODR &= White_OFF;
			waste_of_time++;
		}
		waste_of_time = 0;
		switch(Lines)
		{
		case 95 ... 134:
		switch(Lines)
			{
			case 95  ... 99:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 100 ... 104: //1616a

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[0]; // first pixel of first letter of first rank
			GPIOC->ODR = pixel[0];

			GPIOC->ODR = pixel[1];
			GPIOC->ODR = pixel[1];

			GPIOC->ODR = pixel[2];
			GPIOC->ODR = pixel[2];

			GPIOC->ODR = pixel[3];
			GPIOC->ODR = pixel[3];

			GPIOC->ODR = pixel[4];
			GPIOC->ODR = pixel[4];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[5];
			GPIOC->ODR = pixel[5];

			GPIOC->ODR = pixel[6];
			GPIOC->ODR = pixel[6];

			GPIOC->ODR = pixel[7];
			GPIOC->ODR = pixel[7];

			GPIOC->ODR = pixel[8];
			GPIOC->ODR = pixel[8];

			GPIOC->ODR = pixel[9];
			GPIOC->ODR = pixel[9];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[10];
			GPIOC->ODR = pixel[10];

			GPIOC->ODR = pixel[11];
			GPIOC->ODR = pixel[11];

			GPIOC->ODR = pixel[12];
			GPIOC->ODR = pixel[12];

			GPIOC->ODR = pixel[13];
			GPIOC->ODR = pixel[13];

			GPIOC->ODR = pixel[14];
			GPIOC->ODR = pixel[14];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[15];
			GPIOC->ODR = pixel[15];

			GPIOC->ODR = pixel[16];
			GPIOC->ODR = pixel[16];

			GPIOC->ODR = pixel[17];
			GPIOC->ODR = pixel[17];

			GPIOC->ODR = pixel[18];
			GPIOC->ODR = pixel[18];

			GPIOC->ODR = pixel[19];
			GPIOC->ODR = pixel[19];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[20];
			GPIOC->ODR = pixel[20];

			GPIOC->ODR = pixel[21];
			GPIOC->ODR = pixel[21];

			GPIOC->ODR = pixel[22];
			GPIOC->ODR = pixel[22];

			GPIOC->ODR = pixel[23];
			GPIOC->ODR = pixel[23];

			GPIOC->ODR = pixel[24];
			GPIOC->ODR = pixel[24];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[25];
			GPIOC->ODR = pixel[25];

			GPIOC->ODR = pixel[26];
			GPIOC->ODR = pixel[26];

			GPIOC->ODR = pixel[27];
			GPIOC->ODR = pixel[27];

			GPIOC->ODR = pixel[28];
			GPIOC->ODR = pixel[28];

			GPIOC->ODR = pixel[29];
			GPIOC->ODR = pixel[29];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[30];
			GPIOC->ODR = pixel[30];

			GPIOC->ODR = pixel[31];
			GPIOC->ODR = pixel[31];

			GPIOC->ODR = pixel[32];
			GPIOC->ODR = pixel[32];

			GPIOC->ODR = pixel[33];
			GPIOC->ODR = pixel[33];

			GPIOC->ODR = pixel[34];
			GPIOC->ODR = pixel[34];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[35];
			GPIOC->ODR = pixel[35];

			GPIOC->ODR = pixel[36];
			GPIOC->ODR = pixel[36];

			GPIOC->ODR = pixel[37];
			GPIOC->ODR = pixel[37];

			GPIOC->ODR = pixel[38];
			GPIOC->ODR = pixel[38];

			GPIOC->ODR = pixel[39];
			GPIOC->ODR = pixel[39];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[40];
			GPIOC->ODR = pixel[40];

			GPIOC->ODR = pixel[41];
			GPIOC->ODR = pixel[41];

			GPIOC->ODR = pixel[42];
			GPIOC->ODR = pixel[42];

			GPIOC->ODR = pixel[43];
			GPIOC->ODR = pixel[43];

			GPIOC->ODR = pixel[44];
			GPIOC->ODR = pixel[44];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[45];
			GPIOC->ODR = pixel[45];

			GPIOC->ODR = pixel[46];
			GPIOC->ODR = pixel[46];

			GPIOC->ODR = pixel[47];
			GPIOC->ODR = pixel[47];

			GPIOC->ODR = pixel[48];
			GPIOC->ODR = pixel[48];

			GPIOC->ODR = pixel[49];
			GPIOC->ODR = pixel[49];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[0];
			GPIOC->ODR = Score_val[0];

			GPIOC->ODR = Score_val[1];
			GPIOC->ODR = Score_val[1];

			GPIOC->ODR = Score_val[2];
			GPIOC->ODR = Score_val[2];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[3];
			GPIOC->ODR = Score_val[3];

			GPIOC->ODR = Score_val[4];
			GPIOC->ODR = Score_val[4];

			GPIOC->ODR = Score_val[5];
			GPIOC->ODR = Score_val[5];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[6];
			GPIOC->ODR = Score_val[6];

			GPIOC->ODR = Score_val[7];
			GPIOC->ODR = Score_val[7];

			GPIOC->ODR = Score_val[8];
			GPIOC->ODR = Score_val[8];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			break;
			case 105 ... 109: //1616b

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[50];
			GPIOC->ODR = pixel[50];

			GPIOC->ODR = pixel[51];
			GPIOC->ODR = pixel[51];

			GPIOC->ODR = pixel[52];
			GPIOC->ODR = pixel[52];

			GPIOC->ODR = pixel[53];
			GPIOC->ODR = pixel[53];

			GPIOC->ODR = pixel[54];
			GPIOC->ODR = pixel[54];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[55];
			GPIOC->ODR = pixel[55];

			GPIOC->ODR = pixel[56];
			GPIOC->ODR = pixel[56];

			GPIOC->ODR = pixel[57];
			GPIOC->ODR = pixel[57];

			GPIOC->ODR = pixel[58];
			GPIOC->ODR = pixel[58];

			GPIOC->ODR = pixel[59];
			GPIOC->ODR = pixel[59];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[60];
			GPIOC->ODR = pixel[60];

			GPIOC->ODR = pixel[61];
			GPIOC->ODR = pixel[61];

			GPIOC->ODR = pixel[62];
			GPIOC->ODR = pixel[62];

			GPIOC->ODR = pixel[63];
			GPIOC->ODR = pixel[63];

			GPIOC->ODR = pixel[64];
			GPIOC->ODR = pixel[64];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[65];
			GPIOC->ODR = pixel[65];

			GPIOC->ODR = pixel[66];
			GPIOC->ODR = pixel[66];

			GPIOC->ODR = pixel[67];
			GPIOC->ODR = pixel[67];

			GPIOC->ODR = pixel[68];
			GPIOC->ODR = pixel[68];

			GPIOC->ODR = pixel[69];
			GPIOC->ODR = pixel[69];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[70];
			GPIOC->ODR = pixel[70];

			GPIOC->ODR = pixel[71];
			GPIOC->ODR = pixel[71];

			GPIOC->ODR = pixel[72];
			GPIOC->ODR = pixel[72];

			GPIOC->ODR = pixel[73];
			GPIOC->ODR = pixel[73];

			GPIOC->ODR = pixel[74];
			GPIOC->ODR = pixel[74];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[75];
			GPIOC->ODR = pixel[75];

			GPIOC->ODR = pixel[76];
			GPIOC->ODR = pixel[76];

			GPIOC->ODR = pixel[77];
			GPIOC->ODR = pixel[77];

			GPIOC->ODR = pixel[78];
			GPIOC->ODR = pixel[78];

			GPIOC->ODR = pixel[79];
			GPIOC->ODR = pixel[79];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[80];
			GPIOC->ODR = pixel[80];

			GPIOC->ODR = pixel[81];
			GPIOC->ODR = pixel[81];

			GPIOC->ODR = pixel[82];
			GPIOC->ODR = pixel[82];

			GPIOC->ODR = pixel[83];
			GPIOC->ODR = pixel[83];

			GPIOC->ODR = pixel[84];
			GPIOC->ODR = pixel[84];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[85];
			GPIOC->ODR = pixel[85];

			GPIOC->ODR = pixel[86];
			GPIOC->ODR = pixel[86];

			GPIOC->ODR = pixel[87];
			GPIOC->ODR = pixel[87];

			GPIOC->ODR = pixel[88];
			GPIOC->ODR = pixel[88];

			GPIOC->ODR = pixel[89];
			GPIOC->ODR = pixel[89];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[90];
			GPIOC->ODR = pixel[90];

			GPIOC->ODR = pixel[91];
			GPIOC->ODR = pixel[91];

			GPIOC->ODR = pixel[92];
			GPIOC->ODR = pixel[92];

			GPIOC->ODR = pixel[93];
			GPIOC->ODR = pixel[93];

			GPIOC->ODR = pixel[94];
			GPIOC->ODR = pixel[94];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[95];
			GPIOC->ODR = pixel[95];

			GPIOC->ODR = pixel[96];
			GPIOC->ODR = pixel[96];

			GPIOC->ODR = pixel[97];
			GPIOC->ODR = pixel[97];

			GPIOC->ODR = pixel[98];
			GPIOC->ODR = pixel[98];

			GPIOC->ODR = pixel[99];
			GPIOC->ODR = pixel[99];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[9];
			GPIOC->ODR = Score_val[9];

			GPIOC->ODR = Score_val[10];
			GPIOC->ODR = Score_val[10];

			GPIOC->ODR = Score_val[11];
			GPIOC->ODR = Score_val[11];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[12];
			GPIOC->ODR = Score_val[12];

			GPIOC->ODR = Score_val[13];
			GPIOC->ODR = Score_val[13];

			GPIOC->ODR = Score_val[14];
			GPIOC->ODR = Score_val[14];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[15];
			GPIOC->ODR = Score_val[15];

			GPIOC->ODR = Score_val[16];
			GPIOC->ODR = Score_val[16];

			GPIOC->ODR = Score_val[17];
			GPIOC->ODR = Score_val[17];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 110 ... 114: //1616c


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[100];
			GPIOC->ODR = pixel[100];

			GPIOC->ODR = pixel[101];
			GPIOC->ODR = pixel[101];

			GPIOC->ODR = pixel[102];
			GPIOC->ODR = pixel[102];

			GPIOC->ODR = pixel[103];
			GPIOC->ODR = pixel[103];

			GPIOC->ODR = pixel[104];
			GPIOC->ODR = pixel[104];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[105];
			GPIOC->ODR = pixel[105];

			GPIOC->ODR = pixel[106];
			GPIOC->ODR = pixel[106];

			GPIOC->ODR = pixel[107];
			GPIOC->ODR = pixel[107];

			GPIOC->ODR = pixel[108];
			GPIOC->ODR = pixel[108];

			GPIOC->ODR = pixel[109];
			GPIOC->ODR = pixel[109];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[110];
			GPIOC->ODR = pixel[110];

			GPIOC->ODR = pixel[111];
			GPIOC->ODR = pixel[111];

			GPIOC->ODR = pixel[112];
			GPIOC->ODR = pixel[112];

			GPIOC->ODR = pixel[113];
			GPIOC->ODR = pixel[113];

			GPIOC->ODR = pixel[114];
			GPIOC->ODR = pixel[114];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[115];
			GPIOC->ODR = pixel[115];

			GPIOC->ODR = pixel[116];
			GPIOC->ODR = pixel[116];

			GPIOC->ODR = pixel[117];
			GPIOC->ODR = pixel[117];

			GPIOC->ODR = pixel[118];
			GPIOC->ODR = pixel[118];

			GPIOC->ODR = pixel[119];
			GPIOC->ODR = pixel[119];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[120];
			GPIOC->ODR = pixel[120];

			GPIOC->ODR = pixel[121];
			GPIOC->ODR = pixel[121];

			GPIOC->ODR = pixel[122];
			GPIOC->ODR = pixel[122];

			GPIOC->ODR = pixel[123];
			GPIOC->ODR = pixel[123];

			GPIOC->ODR = pixel[124];
			GPIOC->ODR = pixel[124];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[125];
			GPIOC->ODR = pixel[125];

			GPIOC->ODR = pixel[126];
			GPIOC->ODR = pixel[126];

			GPIOC->ODR = pixel[127];
			GPIOC->ODR = pixel[127];

			GPIOC->ODR = pixel[128];
			GPIOC->ODR = pixel[128];

			GPIOC->ODR = pixel[129];
			GPIOC->ODR = pixel[129];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[130];
			GPIOC->ODR = pixel[130];

			GPIOC->ODR = pixel[131];
			GPIOC->ODR = pixel[131];

			GPIOC->ODR = pixel[132];
			GPIOC->ODR = pixel[132];

			GPIOC->ODR = pixel[133];
			GPIOC->ODR = pixel[133];

			GPIOC->ODR = pixel[134];
			GPIOC->ODR = pixel[134];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[135];
			GPIOC->ODR = pixel[135];

			GPIOC->ODR = pixel[136];
			GPIOC->ODR = pixel[136];

			GPIOC->ODR = pixel[137];
			GPIOC->ODR = pixel[137];

			GPIOC->ODR = pixel[138];
			GPIOC->ODR = pixel[138];

			GPIOC->ODR = pixel[139];
			GPIOC->ODR = pixel[139];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[140];
			GPIOC->ODR = pixel[140];

			GPIOC->ODR = pixel[141];
			GPIOC->ODR = pixel[141];

			GPIOC->ODR = pixel[142];
			GPIOC->ODR = pixel[142];

			GPIOC->ODR = pixel[143];
			GPIOC->ODR = pixel[143];

			GPIOC->ODR = pixel[144];
			GPIOC->ODR = pixel[144];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[145];
			GPIOC->ODR = pixel[145];

			GPIOC->ODR = pixel[146];
			GPIOC->ODR = pixel[146];

			GPIOC->ODR = pixel[147];
			GPIOC->ODR = pixel[147];

			GPIOC->ODR = pixel[148];
			GPIOC->ODR = pixel[148];

			GPIOC->ODR = pixel[149];
			GPIOC->ODR = pixel[149];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[18];
			GPIOC->ODR = Score_val[18];

			GPIOC->ODR = Score_val[19];
			GPIOC->ODR = Score_val[19];

			GPIOC->ODR = Score_val[20];
			GPIOC->ODR = Score_val[20];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[21];
			GPIOC->ODR = Score_val[21];

			GPIOC->ODR = Score_val[22];
			GPIOC->ODR = Score_val[22];

			GPIOC->ODR = Score_val[23];
			GPIOC->ODR = Score_val[23];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[24];
			GPIOC->ODR = Score_val[24];

			GPIOC->ODR = Score_val[25];
			GPIOC->ODR = Score_val[25];

			GPIOC->ODR = Score_val[26];
			GPIOC->ODR = Score_val[26];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 115 ... 119://1616d

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[150];
			GPIOC->ODR = pixel[150];

			GPIOC->ODR = pixel[151];
			GPIOC->ODR = pixel[151];

			GPIOC->ODR = pixel[152];
			GPIOC->ODR = pixel[152];

			GPIOC->ODR = pixel[153];
			GPIOC->ODR = pixel[153];

			GPIOC->ODR = pixel[154];
			GPIOC->ODR = pixel[154];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[155];
			GPIOC->ODR = pixel[155];

			GPIOC->ODR = pixel[156];
			GPIOC->ODR = pixel[156];

			GPIOC->ODR = pixel[157];
			GPIOC->ODR = pixel[157];

			GPIOC->ODR = pixel[158];
			GPIOC->ODR = pixel[158];

			GPIOC->ODR = pixel[159];
			GPIOC->ODR = pixel[159];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[160];
			GPIOC->ODR = pixel[160];

			GPIOC->ODR = pixel[161];
			GPIOC->ODR = pixel[161];

			GPIOC->ODR = pixel[162];
			GPIOC->ODR = pixel[162];

			GPIOC->ODR = pixel[163];
			GPIOC->ODR = pixel[163];

			GPIOC->ODR = pixel[164];
			GPIOC->ODR = pixel[164];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[165];
			GPIOC->ODR = pixel[165];

			GPIOC->ODR = pixel[166];
			GPIOC->ODR = pixel[166];

			GPIOC->ODR = pixel[167];
			GPIOC->ODR = pixel[167];

			GPIOC->ODR = pixel[168];
			GPIOC->ODR = pixel[168];

			GPIOC->ODR = pixel[169];
			GPIOC->ODR = pixel[169];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[170];
			GPIOC->ODR = pixel[170];

			GPIOC->ODR = pixel[171];
			GPIOC->ODR = pixel[171];

			GPIOC->ODR = pixel[172];
			GPIOC->ODR = pixel[172];

			GPIOC->ODR = pixel[173];
			GPIOC->ODR = pixel[173];

			GPIOC->ODR = pixel[174];
			GPIOC->ODR = pixel[174];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[175];
			GPIOC->ODR = pixel[175];

			GPIOC->ODR = pixel[176];
			GPIOC->ODR = pixel[176];

			GPIOC->ODR = pixel[177];
			GPIOC->ODR = pixel[177];

			GPIOC->ODR = pixel[178];
			GPIOC->ODR = pixel[178];

			GPIOC->ODR = pixel[179];
			GPIOC->ODR = pixel[179];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[180];
			GPIOC->ODR = pixel[180];

			GPIOC->ODR = pixel[181];
			GPIOC->ODR = pixel[181];

			GPIOC->ODR = pixel[182];
			GPIOC->ODR = pixel[182];

			GPIOC->ODR = pixel[183];
			GPIOC->ODR = pixel[183];

			GPIOC->ODR = pixel[184];
			GPIOC->ODR = pixel[184];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[185];
			GPIOC->ODR = pixel[185];

			GPIOC->ODR = pixel[186];
			GPIOC->ODR = pixel[186];

			GPIOC->ODR = pixel[187];
			GPIOC->ODR = pixel[187];

			GPIOC->ODR = pixel[188];
			GPIOC->ODR = pixel[188];

			GPIOC->ODR = pixel[189];
			GPIOC->ODR = pixel[189];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[190];
			GPIOC->ODR = pixel[190];

			GPIOC->ODR = pixel[191];
			GPIOC->ODR = pixel[191];

			GPIOC->ODR = pixel[192];
			GPIOC->ODR = pixel[192];

			GPIOC->ODR = pixel[193];
			GPIOC->ODR = pixel[193];

			GPIOC->ODR = pixel[194];
			GPIOC->ODR = pixel[194];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[195];
			GPIOC->ODR = pixel[195];

			GPIOC->ODR = pixel[196];
			GPIOC->ODR = pixel[196];

			GPIOC->ODR = pixel[197];
			GPIOC->ODR = pixel[197];

			GPIOC->ODR = pixel[198];
			GPIOC->ODR = pixel[198];

			GPIOC->ODR = pixel[199];
			GPIOC->ODR = pixel[199];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[27];
			GPIOC->ODR = Score_val[27];

			GPIOC->ODR = Score_val[28];
			GPIOC->ODR = Score_val[28];

			GPIOC->ODR = Score_val[29];
			GPIOC->ODR = Score_val[29];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[30];
			GPIOC->ODR = Score_val[30];

			GPIOC->ODR = Score_val[31];
			GPIOC->ODR = Score_val[31];

			GPIOC->ODR = Score_val[32];
			GPIOC->ODR = Score_val[32];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[33];
			GPIOC->ODR = Score_val[33];

			GPIOC->ODR = Score_val[34];
			GPIOC->ODR = Score_val[34];

			GPIOC->ODR = Score_val[35];
			GPIOC->ODR = Score_val[35];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 120 ... 124://1616e

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;//dot
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[200];
			GPIOC->ODR = pixel[200];

			GPIOC->ODR = pixel[201];
			GPIOC->ODR = pixel[201];

			GPIOC->ODR = pixel[202];
			GPIOC->ODR = pixel[202];

			GPIOC->ODR = pixel[203];
			GPIOC->ODR = pixel[203];

			GPIOC->ODR = pixel[204];
			GPIOC->ODR = pixel[204];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[205];
			GPIOC->ODR = pixel[205];

			GPIOC->ODR = pixel[206];
			GPIOC->ODR = pixel[206];

			GPIOC->ODR = pixel[207];
			GPIOC->ODR = pixel[207];

			GPIOC->ODR = pixel[208];
			GPIOC->ODR = pixel[208];

			GPIOC->ODR = pixel[209];
			GPIOC->ODR = pixel[209];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[210];
			GPIOC->ODR = pixel[210];

			GPIOC->ODR = pixel[211];
			GPIOC->ODR = pixel[211];

			GPIOC->ODR = pixel[212];
			GPIOC->ODR = pixel[212];

			GPIOC->ODR = pixel[213];
			GPIOC->ODR = pixel[213];

			GPIOC->ODR = pixel[214];
			GPIOC->ODR = pixel[214];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[215];
			GPIOC->ODR = pixel[215];

			GPIOC->ODR = pixel[216];
			GPIOC->ODR = pixel[216];

			GPIOC->ODR = pixel[217];
			GPIOC->ODR = pixel[217];

			GPIOC->ODR = pixel[218];
			GPIOC->ODR = pixel[218];

			GPIOC->ODR = pixel[219];
			GPIOC->ODR = pixel[219];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[220];
			GPIOC->ODR = pixel[220];

			GPIOC->ODR = pixel[221];
			GPIOC->ODR = pixel[221];

			GPIOC->ODR = pixel[222];
			GPIOC->ODR = pixel[222];

			GPIOC->ODR = pixel[223];
			GPIOC->ODR = pixel[223];

			GPIOC->ODR = pixel[224];
			GPIOC->ODR = pixel[224];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[225];
			GPIOC->ODR = pixel[225];

			GPIOC->ODR = pixel[226];
			GPIOC->ODR = pixel[226];

			GPIOC->ODR = pixel[227];
			GPIOC->ODR = pixel[227];

			GPIOC->ODR = pixel[228];
			GPIOC->ODR = pixel[228];

			GPIOC->ODR = pixel[229];
			GPIOC->ODR = pixel[229];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[230];
			GPIOC->ODR = pixel[230];

			GPIOC->ODR = pixel[231];
			GPIOC->ODR = pixel[231];

			GPIOC->ODR = pixel[232];
			GPIOC->ODR = pixel[232];

			GPIOC->ODR = pixel[233];
			GPIOC->ODR = pixel[233];

			GPIOC->ODR = pixel[234];
			GPIOC->ODR = pixel[234];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[235];
			GPIOC->ODR = pixel[235];

			GPIOC->ODR = pixel[236];
			GPIOC->ODR = pixel[236];

			GPIOC->ODR = pixel[237];
			GPIOC->ODR = pixel[237];

			GPIOC->ODR = pixel[238];
			GPIOC->ODR = pixel[238];

			GPIOC->ODR = pixel[239];
			GPIOC->ODR = pixel[239];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[240];
			GPIOC->ODR = pixel[240];

			GPIOC->ODR = pixel[241];
			GPIOC->ODR = pixel[241];

			GPIOC->ODR = pixel[242];
			GPIOC->ODR = pixel[242];

			GPIOC->ODR = pixel[243];
			GPIOC->ODR = pixel[243];

			GPIOC->ODR = pixel[244];
			GPIOC->ODR = pixel[244];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[245];
			GPIOC->ODR = pixel[245];

			GPIOC->ODR = pixel[246];
			GPIOC->ODR = pixel[246];

			GPIOC->ODR = pixel[247];
			GPIOC->ODR = pixel[247];

			GPIOC->ODR = pixel[248];
			GPIOC->ODR = pixel[248];

			GPIOC->ODR = pixel[249];
			GPIOC->ODR = pixel[249];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[36];
			GPIOC->ODR = Score_val[36];

			GPIOC->ODR = Score_val[37];
			GPIOC->ODR = Score_val[37];

			GPIOC->ODR = Score_val[38];
			GPIOC->ODR = Score_val[38];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[39];
			GPIOC->ODR = Score_val[39];

			GPIOC->ODR = Score_val[40];
			GPIOC->ODR = Score_val[40];

			GPIOC->ODR = Score_val[41];
			GPIOC->ODR = Score_val[41];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[42];
			GPIOC->ODR = Score_val[42];

			GPIOC->ODR = Score_val[43];
			GPIOC->ODR = Score_val[43];

			GPIOC->ODR = Score_val[44];
			GPIOC->ODR = Score_val[44];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 125 ... 129:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 130 ... 130:
			GPIOC->ODR = White_OFF;
			break;
			case 131 ... 134:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;

			}
		break;
		case 135 ... 169: //seventeens
			switch(Lines)
			{
			case 135 ... 139:
			GPIOC->ODR = White_OFF; //1717a
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[250];
			GPIOC->ODR = pixel[250];

			GPIOC->ODR = pixel[251];
			GPIOC->ODR = pixel[251];

			GPIOC->ODR = pixel[252];
			GPIOC->ODR = pixel[252];

			GPIOC->ODR = pixel[253];
			GPIOC->ODR = pixel[253];

			GPIOC->ODR = pixel[254];
			GPIOC->ODR = pixel[254];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[255];
			GPIOC->ODR = pixel[255];

			GPIOC->ODR = pixel[256];
			GPIOC->ODR = pixel[256];

			GPIOC->ODR = pixel[257];
			GPIOC->ODR = pixel[257];

			GPIOC->ODR = pixel[258];
			GPIOC->ODR = pixel[258];

			GPIOC->ODR = pixel[259];
			GPIOC->ODR = pixel[259];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[260];
			GPIOC->ODR = pixel[260];

			GPIOC->ODR = pixel[261];
			GPIOC->ODR = pixel[261];

			GPIOC->ODR = pixel[262];
			GPIOC->ODR = pixel[262];

			GPIOC->ODR = pixel[263];
			GPIOC->ODR = pixel[263];

			GPIOC->ODR = pixel[264];
			GPIOC->ODR = pixel[264];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[265];
			GPIOC->ODR = pixel[265];

			GPIOC->ODR = pixel[266];
			GPIOC->ODR = pixel[266];

			GPIOC->ODR = pixel[267];
			GPIOC->ODR = pixel[267];

			GPIOC->ODR = pixel[268];
			GPIOC->ODR = pixel[268];

			GPIOC->ODR = pixel[269];
			GPIOC->ODR = pixel[269];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[270];
			GPIOC->ODR = pixel[270];

			GPIOC->ODR = pixel[271];
			GPIOC->ODR = pixel[271];

			GPIOC->ODR = pixel[272];
			GPIOC->ODR = pixel[272];

			GPIOC->ODR = pixel[273];
			GPIOC->ODR = pixel[273];

			GPIOC->ODR = pixel[274];
			GPIOC->ODR = pixel[274];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[275];
			GPIOC->ODR = pixel[275];

			GPIOC->ODR = pixel[276];
			GPIOC->ODR = pixel[276];

			GPIOC->ODR = pixel[277];
			GPIOC->ODR = pixel[277];

			GPIOC->ODR = pixel[278];
			GPIOC->ODR = pixel[278];

			GPIOC->ODR = pixel[279];
			GPIOC->ODR = pixel[279];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[280];
			GPIOC->ODR = pixel[280];

			GPIOC->ODR = pixel[281];
			GPIOC->ODR = pixel[281];

			GPIOC->ODR = pixel[282];
			GPIOC->ODR = pixel[282];

			GPIOC->ODR = pixel[283];
			GPIOC->ODR = pixel[283];

			GPIOC->ODR = pixel[284];
			GPIOC->ODR = pixel[284];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[285];
			GPIOC->ODR = pixel[285];

			GPIOC->ODR = pixel[286];
			GPIOC->ODR = pixel[286];

			GPIOC->ODR = pixel[287];
			GPIOC->ODR = pixel[287];

			GPIOC->ODR = pixel[288];
			GPIOC->ODR = pixel[288];

			GPIOC->ODR = pixel[289];
			GPIOC->ODR = pixel[289];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[290];
			GPIOC->ODR = pixel[290];

			GPIOC->ODR = pixel[291];
			GPIOC->ODR = pixel[291];

			GPIOC->ODR = pixel[292];
			GPIOC->ODR = pixel[292];

			GPIOC->ODR = pixel[293];
			GPIOC->ODR = pixel[293];

			GPIOC->ODR = pixel[294];
			GPIOC->ODR = pixel[294];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[295];
			GPIOC->ODR = pixel[295];

			GPIOC->ODR = pixel[296];
			GPIOC->ODR = pixel[296];

			GPIOC->ODR = pixel[297];
			GPIOC->ODR = pixel[297];

			GPIOC->ODR = pixel[298];
			GPIOC->ODR = pixel[298];

			GPIOC->ODR = pixel[299];
			GPIOC->ODR = pixel[299];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[45];
			GPIOC->ODR = Score_val[45];

			GPIOC->ODR = Score_val[46];
			GPIOC->ODR = Score_val[46];

			GPIOC->ODR = Score_val[47];
			GPIOC->ODR = Score_val[47];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[48];
			GPIOC->ODR = Score_val[48];

			GPIOC->ODR = Score_val[49];
			GPIOC->ODR = Score_val[49];

			GPIOC->ODR = Score_val[50];
			GPIOC->ODR = Score_val[50];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[51];
			GPIOC->ODR = Score_val[51];

			GPIOC->ODR = Score_val[52];
			GPIOC->ODR = Score_val[52];

			GPIOC->ODR = Score_val[53];
			GPIOC->ODR = Score_val[53];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 140 ... 144: //1717b

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[300];
			GPIOC->ODR = pixel[300];

			GPIOC->ODR = pixel[301];
			GPIOC->ODR = pixel[301];

			GPIOC->ODR = pixel[302];
			GPIOC->ODR = pixel[302];

			GPIOC->ODR = pixel[303];
			GPIOC->ODR = pixel[303];

			GPIOC->ODR = pixel[304];
			GPIOC->ODR = pixel[304];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[305];
			GPIOC->ODR = pixel[305];

			GPIOC->ODR = pixel[306];
			GPIOC->ODR = pixel[306];

			GPIOC->ODR = pixel[307];
			GPIOC->ODR = pixel[307];

			GPIOC->ODR = pixel[308];
			GPIOC->ODR = pixel[308];

			GPIOC->ODR = pixel[309];
			GPIOC->ODR = pixel[309];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[310];
			GPIOC->ODR = pixel[310];

			GPIOC->ODR = pixel[311];
			GPIOC->ODR = pixel[311];

			GPIOC->ODR = pixel[312];
			GPIOC->ODR = pixel[312];

			GPIOC->ODR = pixel[313];
			GPIOC->ODR = pixel[313];

			GPIOC->ODR = pixel[314];
			GPIOC->ODR = pixel[314];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[315];
			GPIOC->ODR = pixel[315];

			GPIOC->ODR = pixel[316];
			GPIOC->ODR = pixel[316];

			GPIOC->ODR = pixel[317];
			GPIOC->ODR = pixel[317];

			GPIOC->ODR = pixel[318];
			GPIOC->ODR = pixel[318];

			GPIOC->ODR = pixel[319];
			GPIOC->ODR = pixel[319];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[320];
			GPIOC->ODR = pixel[320];

			GPIOC->ODR = pixel[321];
			GPIOC->ODR = pixel[321];

			GPIOC->ODR = pixel[322];
			GPIOC->ODR = pixel[322];

			GPIOC->ODR = pixel[323];
			GPIOC->ODR = pixel[323];

			GPIOC->ODR = pixel[324];
			GPIOC->ODR = pixel[324];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[325];
			GPIOC->ODR = pixel[325];

			GPIOC->ODR = pixel[326];
			GPIOC->ODR = pixel[326];

			GPIOC->ODR = pixel[327];
			GPIOC->ODR = pixel[327];

			GPIOC->ODR = pixel[328];
			GPIOC->ODR = pixel[328];

			GPIOC->ODR = pixel[329];
			GPIOC->ODR = pixel[329];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[330];
			GPIOC->ODR = pixel[330];

			GPIOC->ODR = pixel[331];
			GPIOC->ODR = pixel[331];

			GPIOC->ODR = pixel[332];
			GPIOC->ODR = pixel[332];

			GPIOC->ODR = pixel[333];
			GPIOC->ODR = pixel[333];

			GPIOC->ODR = pixel[334];
			GPIOC->ODR = pixel[334];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[335];
			GPIOC->ODR = pixel[335];

			GPIOC->ODR = pixel[336];
			GPIOC->ODR = pixel[336];

			GPIOC->ODR = pixel[337];
			GPIOC->ODR = pixel[337];

			GPIOC->ODR = pixel[338];
			GPIOC->ODR = pixel[338];

			GPIOC->ODR = pixel[339];
			GPIOC->ODR = pixel[339];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[340];
			GPIOC->ODR = pixel[340];

			GPIOC->ODR = pixel[341];
			GPIOC->ODR = pixel[341];

			GPIOC->ODR = pixel[342];
			GPIOC->ODR = pixel[342];

			GPIOC->ODR = pixel[343];
			GPIOC->ODR = pixel[343];

			GPIOC->ODR = pixel[344];
			GPIOC->ODR = pixel[344];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[345];
			GPIOC->ODR = pixel[345];

			GPIOC->ODR = pixel[346];
			GPIOC->ODR = pixel[346];

			GPIOC->ODR = pixel[347];
			GPIOC->ODR = pixel[347];

			GPIOC->ODR = pixel[348];
			GPIOC->ODR = pixel[348];

			GPIOC->ODR = pixel[349];
			GPIOC->ODR = pixel[349];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[54];
			GPIOC->ODR = Score_val[54];

			GPIOC->ODR = Score_val[55];
			GPIOC->ODR = Score_val[55];

			GPIOC->ODR = Score_val[56];
			GPIOC->ODR = Score_val[56];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[57];
			GPIOC->ODR = Score_val[57];

			GPIOC->ODR = Score_val[58];
			GPIOC->ODR = Score_val[58];

			GPIOC->ODR = Score_val[59];
			GPIOC->ODR = Score_val[59];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[60];
			GPIOC->ODR = Score_val[60];

			GPIOC->ODR = Score_val[61];
			GPIOC->ODR = Score_val[61];

			GPIOC->ODR = Score_val[62];
			GPIOC->ODR = Score_val[62];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 145 ... 149: //1717c


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[350];
			GPIOC->ODR = pixel[350];

			GPIOC->ODR = pixel[351];
			GPIOC->ODR = pixel[351];

			GPIOC->ODR = pixel[352];
			GPIOC->ODR = pixel[352];

			GPIOC->ODR = pixel[353];
			GPIOC->ODR = pixel[353];

			GPIOC->ODR = pixel[354];
			GPIOC->ODR = pixel[354];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[355];
			GPIOC->ODR = pixel[355];

			GPIOC->ODR = pixel[356];
			GPIOC->ODR = pixel[356];

			GPIOC->ODR = pixel[357];
			GPIOC->ODR = pixel[357];

			GPIOC->ODR = pixel[358];
			GPIOC->ODR = pixel[358];

			GPIOC->ODR = pixel[359];
			GPIOC->ODR = pixel[359];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[360];
			GPIOC->ODR = pixel[360];

			GPIOC->ODR = pixel[361];
			GPIOC->ODR = pixel[361];

			GPIOC->ODR = pixel[362];
			GPIOC->ODR = pixel[362];

			GPIOC->ODR = pixel[363];
			GPIOC->ODR = pixel[363];

			GPIOC->ODR = pixel[364];
			GPIOC->ODR = pixel[364];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[365];
			GPIOC->ODR = pixel[365];

			GPIOC->ODR = pixel[366];
			GPIOC->ODR = pixel[366];

			GPIOC->ODR = pixel[367];
			GPIOC->ODR = pixel[367];

			GPIOC->ODR = pixel[368];
			GPIOC->ODR = pixel[368];

			GPIOC->ODR = pixel[369];
			GPIOC->ODR = pixel[369];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[370];
			GPIOC->ODR = pixel[370];

			GPIOC->ODR = pixel[371];
			GPIOC->ODR = pixel[371];

			GPIOC->ODR = pixel[372];
			GPIOC->ODR = pixel[372];

			GPIOC->ODR = pixel[373];
			GPIOC->ODR = pixel[373];

			GPIOC->ODR = pixel[374];
			GPIOC->ODR = pixel[374];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[375];
			GPIOC->ODR = pixel[375];

			GPIOC->ODR = pixel[376];
			GPIOC->ODR = pixel[376];

			GPIOC->ODR = pixel[377];
			GPIOC->ODR = pixel[377];

			GPIOC->ODR = pixel[378];
			GPIOC->ODR = pixel[378];

			GPIOC->ODR = pixel[379];
			GPIOC->ODR = pixel[379];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[380];
			GPIOC->ODR = pixel[380];

			GPIOC->ODR = pixel[381];
			GPIOC->ODR = pixel[381];

			GPIOC->ODR = pixel[382];
			GPIOC->ODR = pixel[382];

			GPIOC->ODR = pixel[383];
			GPIOC->ODR = pixel[383];

			GPIOC->ODR = pixel[384];
			GPIOC->ODR = pixel[384];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[385];
			GPIOC->ODR = pixel[385];

			GPIOC->ODR = pixel[386];
			GPIOC->ODR = pixel[386];

			GPIOC->ODR = pixel[387];
			GPIOC->ODR = pixel[387];

			GPIOC->ODR = pixel[388];
			GPIOC->ODR = pixel[388];

			GPIOC->ODR = pixel[389];
			GPIOC->ODR = pixel[389];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[390];
			GPIOC->ODR = pixel[390];

			GPIOC->ODR = pixel[391];
			GPIOC->ODR = pixel[391];

			GPIOC->ODR = pixel[392];
			GPIOC->ODR = pixel[392];

			GPIOC->ODR = pixel[393];
			GPIOC->ODR = pixel[393];

			GPIOC->ODR = pixel[394];
			GPIOC->ODR = pixel[394];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[395];
			GPIOC->ODR = pixel[395];

			GPIOC->ODR = pixel[396];
			GPIOC->ODR = pixel[396];

			GPIOC->ODR = pixel[397];
			GPIOC->ODR = pixel[397];

			GPIOC->ODR = pixel[398];
			GPIOC->ODR = pixel[398];

			GPIOC->ODR = pixel[399];
			GPIOC->ODR = pixel[399];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[63];
			GPIOC->ODR = Score_val[63];

			GPIOC->ODR = Score_val[64];
			GPIOC->ODR = Score_val[64];

			GPIOC->ODR = Score_val[65];
			GPIOC->ODR = Score_val[65];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[66];
			GPIOC->ODR = Score_val[66];

			GPIOC->ODR = Score_val[67];
			GPIOC->ODR = Score_val[67];

			GPIOC->ODR = Score_val[68];
			GPIOC->ODR = Score_val[68];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[69];
			GPIOC->ODR = Score_val[69];

			GPIOC->ODR = Score_val[70];
			GPIOC->ODR = Score_val[70];

			GPIOC->ODR = Score_val[71];
			GPIOC->ODR = Score_val[71];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 150 ... 154: // 1717d

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[400];
			GPIOC->ODR = pixel[400];

			GPIOC->ODR = pixel[401];
			GPIOC->ODR = pixel[401];

			GPIOC->ODR = pixel[402];
			GPIOC->ODR = pixel[402];

			GPIOC->ODR = pixel[403];
			GPIOC->ODR = pixel[403];

			GPIOC->ODR = pixel[404];
			GPIOC->ODR = pixel[404];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[405];
			GPIOC->ODR = pixel[405];

			GPIOC->ODR = pixel[406];
			GPIOC->ODR = pixel[406];

			GPIOC->ODR = pixel[407];
			GPIOC->ODR = pixel[407];

			GPIOC->ODR = pixel[408];
			GPIOC->ODR = pixel[408];

			GPIOC->ODR = pixel[409];
			GPIOC->ODR = pixel[409];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[410];
			GPIOC->ODR = pixel[410];

			GPIOC->ODR = pixel[411];
			GPIOC->ODR = pixel[411];

			GPIOC->ODR = pixel[412];
			GPIOC->ODR = pixel[412];

			GPIOC->ODR = pixel[413];
			GPIOC->ODR = pixel[413];

			GPIOC->ODR = pixel[414];
			GPIOC->ODR = pixel[414];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[415];
			GPIOC->ODR = pixel[415];

			GPIOC->ODR = pixel[416];
			GPIOC->ODR = pixel[416];

			GPIOC->ODR = pixel[417];
			GPIOC->ODR = pixel[417];

			GPIOC->ODR = pixel[418];
			GPIOC->ODR = pixel[418];

			GPIOC->ODR = pixel[419];
			GPIOC->ODR = pixel[419];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[420];
			GPIOC->ODR = pixel[420];

			GPIOC->ODR = pixel[421];
			GPIOC->ODR = pixel[421];

			GPIOC->ODR = pixel[422];
			GPIOC->ODR = pixel[422];

			GPIOC->ODR = pixel[423];
			GPIOC->ODR = pixel[423];

			GPIOC->ODR = pixel[424];
			GPIOC->ODR = pixel[424];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[425];
			GPIOC->ODR = pixel[425];

			GPIOC->ODR = pixel[426];
			GPIOC->ODR = pixel[426];

			GPIOC->ODR = pixel[427];
			GPIOC->ODR = pixel[427];

			GPIOC->ODR = pixel[428];
			GPIOC->ODR = pixel[428];

			GPIOC->ODR = pixel[429];
			GPIOC->ODR = pixel[429];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[430];
			GPIOC->ODR = pixel[430];

			GPIOC->ODR = pixel[431];
			GPIOC->ODR = pixel[431];

			GPIOC->ODR = pixel[432];
			GPIOC->ODR = pixel[432];

			GPIOC->ODR = pixel[433];
			GPIOC->ODR = pixel[433];

			GPIOC->ODR = pixel[434];
			GPIOC->ODR = pixel[434];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[435];
			GPIOC->ODR = pixel[435];

			GPIOC->ODR = pixel[436];
			GPIOC->ODR = pixel[436];

			GPIOC->ODR = pixel[437];
			GPIOC->ODR = pixel[437];

			GPIOC->ODR = pixel[438];
			GPIOC->ODR = pixel[438];

			GPIOC->ODR = pixel[439];
			GPIOC->ODR = pixel[439];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[440];
			GPIOC->ODR = pixel[440];

			GPIOC->ODR = pixel[441];
			GPIOC->ODR = pixel[441];

			GPIOC->ODR = pixel[442];
			GPIOC->ODR = pixel[442];

			GPIOC->ODR = pixel[443];
			GPIOC->ODR = pixel[443];

			GPIOC->ODR = pixel[444];
			GPIOC->ODR = pixel[444];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[445];
			GPIOC->ODR = pixel[445];

			GPIOC->ODR = pixel[446];
			GPIOC->ODR = pixel[446];

			GPIOC->ODR = pixel[447];
			GPIOC->ODR = pixel[447];

			GPIOC->ODR = pixel[448];
			GPIOC->ODR = pixel[448];

			GPIOC->ODR = pixel[449];
			GPIOC->ODR = pixel[449];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[72];
			GPIOC->ODR = Score_val[72];

			GPIOC->ODR = Score_val[73];
			GPIOC->ODR = Score_val[73];

			GPIOC->ODR = Score_val[74];
			GPIOC->ODR = Score_val[74];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[75];
			GPIOC->ODR = Score_val[75];

			GPIOC->ODR = Score_val[76];
			GPIOC->ODR = Score_val[76];

			GPIOC->ODR = Score_val[77];
			GPIOC->ODR = Score_val[77];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[78];
			GPIOC->ODR = Score_val[78];

			GPIOC->ODR = Score_val[79];
			GPIOC->ODR = Score_val[79];

			GPIOC->ODR = Score_val[80];
			GPIOC->ODR = Score_val[80];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 155 ... 159: // 1717e


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green; //dot
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[450];
			GPIOC->ODR = pixel[450];

			GPIOC->ODR = pixel[451];
			GPIOC->ODR = pixel[451];

			GPIOC->ODR = pixel[452];
			GPIOC->ODR = pixel[452];

			GPIOC->ODR = pixel[453];
			GPIOC->ODR = pixel[453];

			GPIOC->ODR = pixel[454];
			GPIOC->ODR = pixel[454];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[455];
			GPIOC->ODR = pixel[455];

			GPIOC->ODR = pixel[456];
			GPIOC->ODR = pixel[456];

			GPIOC->ODR = pixel[457];
			GPIOC->ODR = pixel[457];

			GPIOC->ODR = pixel[458];
			GPIOC->ODR = pixel[458];

			GPIOC->ODR = pixel[459];
			GPIOC->ODR = pixel[459];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[460];
			GPIOC->ODR = pixel[460];

			GPIOC->ODR = pixel[461];
			GPIOC->ODR = pixel[461];

			GPIOC->ODR = pixel[462];
			GPIOC->ODR = pixel[462];

			GPIOC->ODR = pixel[463];
			GPIOC->ODR = pixel[463];

			GPIOC->ODR = pixel[464];
			GPIOC->ODR = pixel[464];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[465];
			GPIOC->ODR = pixel[465];

			GPIOC->ODR = pixel[466];
			GPIOC->ODR = pixel[466];

			GPIOC->ODR = pixel[467];
			GPIOC->ODR = pixel[467];

			GPIOC->ODR = pixel[468];
			GPIOC->ODR = pixel[468];

			GPIOC->ODR = pixel[469];
			GPIOC->ODR = pixel[469];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[470];
			GPIOC->ODR = pixel[470];

			GPIOC->ODR = pixel[471];
			GPIOC->ODR = pixel[471];

			GPIOC->ODR = pixel[472];
			GPIOC->ODR = pixel[472];

			GPIOC->ODR = pixel[473];
			GPIOC->ODR = pixel[473];

			GPIOC->ODR = pixel[474];
			GPIOC->ODR = pixel[474];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[475];
			GPIOC->ODR = pixel[475];

			GPIOC->ODR = pixel[476];
			GPIOC->ODR = pixel[476];

			GPIOC->ODR = pixel[477];
			GPIOC->ODR = pixel[477];

			GPIOC->ODR = pixel[478];
			GPIOC->ODR = pixel[478];

			GPIOC->ODR = pixel[479];
			GPIOC->ODR = pixel[479];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[480];
			GPIOC->ODR = pixel[480];

			GPIOC->ODR = pixel[481];
			GPIOC->ODR = pixel[481];

			GPIOC->ODR = pixel[482];
			GPIOC->ODR = pixel[482];

			GPIOC->ODR = pixel[483];
			GPIOC->ODR = pixel[483];

			GPIOC->ODR = pixel[484];
			GPIOC->ODR = pixel[484];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[485];
			GPIOC->ODR = pixel[485];

			GPIOC->ODR = pixel[486];
			GPIOC->ODR = pixel[486];

			GPIOC->ODR = pixel[487];
			GPIOC->ODR = pixel[487];

			GPIOC->ODR = pixel[488];
			GPIOC->ODR = pixel[488];

			GPIOC->ODR = pixel[489];
			GPIOC->ODR = pixel[489];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[490];
			GPIOC->ODR = pixel[490];

			GPIOC->ODR = pixel[491];
			GPIOC->ODR = pixel[491];

			GPIOC->ODR = pixel[492];
			GPIOC->ODR = pixel[492];

			GPIOC->ODR = pixel[493];
			GPIOC->ODR = pixel[493];

			GPIOC->ODR = pixel[494];
			GPIOC->ODR = pixel[494];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[495];
			GPIOC->ODR = pixel[495];

			GPIOC->ODR = pixel[496];
			GPIOC->ODR = pixel[496];

			GPIOC->ODR = pixel[497];
			GPIOC->ODR = pixel[497];

			GPIOC->ODR = pixel[498];
			GPIOC->ODR = pixel[498];

			GPIOC->ODR = pixel[499];
			GPIOC->ODR = pixel[499];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[81];
			GPIOC->ODR = Score_val[81];

			GPIOC->ODR = Score_val[82];
			GPIOC->ODR = Score_val[82];

			GPIOC->ODR = Score_val[83];
			GPIOC->ODR = Score_val[83];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[84];
			GPIOC->ODR = Score_val[84];

			GPIOC->ODR = Score_val[85];
			GPIOC->ODR = Score_val[85];

			GPIOC->ODR = Score_val[86];
			GPIOC->ODR = Score_val[86];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[87];
			GPIOC->ODR = Score_val[87];

			GPIOC->ODR = Score_val[88];
			GPIOC->ODR = Score_val[88];

			GPIOC->ODR = Score_val[89];
			GPIOC->ODR = Score_val[89];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 160 ... 164:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 165 ... 165:
			GPIOC->ODR = White_OFF;
			break;
			case 166 ... 169:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			}
		break;
		case 170 ... 204: //eighteens
			switch(Lines)
			{
			case 170 ... 174: //1818a

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[500];
			GPIOC->ODR = pixel[500];

			GPIOC->ODR = pixel[501];
			GPIOC->ODR = pixel[501];

			GPIOC->ODR = pixel[502];
			GPIOC->ODR = pixel[502];

			GPIOC->ODR = pixel[503];
			GPIOC->ODR = pixel[503];

			GPIOC->ODR = pixel[504];
			GPIOC->ODR = pixel[504];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[505];
			GPIOC->ODR = pixel[505];

			GPIOC->ODR = pixel[506];
			GPIOC->ODR = pixel[506];

			GPIOC->ODR = pixel[507];
			GPIOC->ODR = pixel[507];

			GPIOC->ODR = pixel[508];
			GPIOC->ODR = pixel[508];

			GPIOC->ODR = pixel[509];
			GPIOC->ODR = pixel[509];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[510];
			GPIOC->ODR = pixel[510];

			GPIOC->ODR = pixel[511];
			GPIOC->ODR = pixel[511];

			GPIOC->ODR = pixel[512];
			GPIOC->ODR = pixel[512];

			GPIOC->ODR = pixel[513];
			GPIOC->ODR = pixel[513];

			GPIOC->ODR = pixel[514];
			GPIOC->ODR = pixel[514];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[515];
			GPIOC->ODR = pixel[515];

			GPIOC->ODR = pixel[516];
			GPIOC->ODR = pixel[516];

			GPIOC->ODR = pixel[517];
			GPIOC->ODR = pixel[517];

			GPIOC->ODR = pixel[518];
			GPIOC->ODR = pixel[518];

			GPIOC->ODR = pixel[519];
			GPIOC->ODR = pixel[519];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[520];
			GPIOC->ODR = pixel[520];

			GPIOC->ODR = pixel[521];
			GPIOC->ODR = pixel[521];

			GPIOC->ODR = pixel[522];
			GPIOC->ODR = pixel[522];

			GPIOC->ODR = pixel[523];
			GPIOC->ODR = pixel[523];

			GPIOC->ODR = pixel[524];
			GPIOC->ODR = pixel[524];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[525];
			GPIOC->ODR = pixel[525];

			GPIOC->ODR = pixel[526];
			GPIOC->ODR = pixel[526];

			GPIOC->ODR = pixel[527];
			GPIOC->ODR = pixel[527];

			GPIOC->ODR = pixel[528];
			GPIOC->ODR = pixel[528];

			GPIOC->ODR = pixel[529];
			GPIOC->ODR = pixel[529];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[530];
			GPIOC->ODR = pixel[530];

			GPIOC->ODR = pixel[531];
			GPIOC->ODR = pixel[531];

			GPIOC->ODR = pixel[532];
			GPIOC->ODR = pixel[532];

			GPIOC->ODR = pixel[533];
			GPIOC->ODR = pixel[533];

			GPIOC->ODR = pixel[534];
			GPIOC->ODR = pixel[534];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[535];
			GPIOC->ODR = pixel[535];

			GPIOC->ODR = pixel[536];
			GPIOC->ODR = pixel[536];

			GPIOC->ODR = pixel[537];
			GPIOC->ODR = pixel[537];

			GPIOC->ODR = pixel[538];
			GPIOC->ODR = pixel[538];

			GPIOC->ODR = pixel[539];
			GPIOC->ODR = pixel[539];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[540];
			GPIOC->ODR = pixel[540];

			GPIOC->ODR = pixel[541];
			GPIOC->ODR = pixel[541];

			GPIOC->ODR = pixel[542];
			GPIOC->ODR = pixel[542];

			GPIOC->ODR = pixel[543];
			GPIOC->ODR = pixel[543];

			GPIOC->ODR = pixel[544];
			GPIOC->ODR = pixel[544];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[545];
			GPIOC->ODR = pixel[545];

			GPIOC->ODR = pixel[546];
			GPIOC->ODR = pixel[546];

			GPIOC->ODR = pixel[547];
			GPIOC->ODR = pixel[547];

			GPIOC->ODR = pixel[548];
			GPIOC->ODR = pixel[548];

			GPIOC->ODR = pixel[549];
			GPIOC->ODR = pixel[549];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[90];
			GPIOC->ODR = Score_val[90];

			GPIOC->ODR = Score_val[91];
			GPIOC->ODR = Score_val[91];

			GPIOC->ODR = Score_val[92];
			GPIOC->ODR = Score_val[92];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[93];
			GPIOC->ODR = Score_val[93];

			GPIOC->ODR = Score_val[94];
			GPIOC->ODR = Score_val[94];

			GPIOC->ODR = Score_val[95];
			GPIOC->ODR = Score_val[95];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[96];
			GPIOC->ODR = Score_val[96];

			GPIOC->ODR = Score_val[97];
			GPIOC->ODR = Score_val[97];

			GPIOC->ODR = Score_val[98];
			GPIOC->ODR = Score_val[98];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 175 ... 179: //1818b


			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[550];
			GPIOC->ODR = pixel[550];

			GPIOC->ODR = pixel[551];
			GPIOC->ODR = pixel[551];

			GPIOC->ODR = pixel[552];
			GPIOC->ODR = pixel[552];

			GPIOC->ODR = pixel[553];
			GPIOC->ODR = pixel[553];

			GPIOC->ODR = pixel[554];
			GPIOC->ODR = pixel[554];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[555];
			GPIOC->ODR = pixel[555];

			GPIOC->ODR = pixel[556];
			GPIOC->ODR = pixel[556];

			GPIOC->ODR = pixel[557];
			GPIOC->ODR = pixel[557];

			GPIOC->ODR = pixel[558];
			GPIOC->ODR = pixel[558];

			GPIOC->ODR = pixel[559];
			GPIOC->ODR = pixel[559];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[560];
			GPIOC->ODR = pixel[560];

			GPIOC->ODR = pixel[561];
			GPIOC->ODR = pixel[561];

			GPIOC->ODR = pixel[562];
			GPIOC->ODR = pixel[562];

			GPIOC->ODR = pixel[563];
			GPIOC->ODR = pixel[563];

			GPIOC->ODR = pixel[564];
			GPIOC->ODR = pixel[564];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[565];
			GPIOC->ODR = pixel[565];

			GPIOC->ODR = pixel[566];
			GPIOC->ODR = pixel[566];

			GPIOC->ODR = pixel[567];
			GPIOC->ODR = pixel[567];

			GPIOC->ODR = pixel[568];
			GPIOC->ODR = pixel[568];

			GPIOC->ODR = pixel[569];
			GPIOC->ODR = pixel[569];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[570];
			GPIOC->ODR = pixel[570];

			GPIOC->ODR = pixel[571];
			GPIOC->ODR = pixel[571];

			GPIOC->ODR = pixel[572];
			GPIOC->ODR = pixel[572];

			GPIOC->ODR = pixel[573];
			GPIOC->ODR = pixel[573];

			GPIOC->ODR = pixel[574];
			GPIOC->ODR = pixel[574];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[575];
			GPIOC->ODR = pixel[575];

			GPIOC->ODR = pixel[576];
			GPIOC->ODR = pixel[576];

			GPIOC->ODR = pixel[577];
			GPIOC->ODR = pixel[577];

			GPIOC->ODR = pixel[578];
			GPIOC->ODR = pixel[578];

			GPIOC->ODR = pixel[579];
			GPIOC->ODR = pixel[579];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[580];
			GPIOC->ODR = pixel[580];

			GPIOC->ODR = pixel[581];
			GPIOC->ODR = pixel[581];

			GPIOC->ODR = pixel[582];
			GPIOC->ODR = pixel[582];

			GPIOC->ODR = pixel[583];
			GPIOC->ODR = pixel[583];

			GPIOC->ODR = pixel[584];
			GPIOC->ODR = pixel[584];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[585];
			GPIOC->ODR = pixel[585];

			GPIOC->ODR = pixel[586];
			GPIOC->ODR = pixel[586];

			GPIOC->ODR = pixel[587];
			GPIOC->ODR = pixel[587];

			GPIOC->ODR = pixel[588];
			GPIOC->ODR = pixel[588];

			GPIOC->ODR = pixel[589];
			GPIOC->ODR = pixel[589];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[590];
			GPIOC->ODR = pixel[590];

			GPIOC->ODR = pixel[591];
			GPIOC->ODR = pixel[591];

			GPIOC->ODR = pixel[592];
			GPIOC->ODR = pixel[592];

			GPIOC->ODR = pixel[593];
			GPIOC->ODR = pixel[593];

			GPIOC->ODR = pixel[594];
			GPIOC->ODR = pixel[594];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[595];
			GPIOC->ODR = pixel[595];

			GPIOC->ODR = pixel[596];
			GPIOC->ODR = pixel[596];

			GPIOC->ODR = pixel[597];
			GPIOC->ODR = pixel[597];

			GPIOC->ODR = pixel[598];
			GPIOC->ODR = pixel[598];

			GPIOC->ODR = pixel[599];
			GPIOC->ODR = pixel[599];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[99];
			GPIOC->ODR = Score_val[99];

			GPIOC->ODR = Score_val[100];
			GPIOC->ODR = Score_val[100];

			GPIOC->ODR = Score_val[101];
			GPIOC->ODR = Score_val[101];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[102];
			GPIOC->ODR = Score_val[102];

			GPIOC->ODR = Score_val[103];
			GPIOC->ODR = Score_val[103];

			GPIOC->ODR = Score_val[104];
			GPIOC->ODR = Score_val[104];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[105];
			GPIOC->ODR = Score_val[105];

			GPIOC->ODR = Score_val[106];
			GPIOC->ODR = Score_val[106];

			GPIOC->ODR = Score_val[107];
			GPIOC->ODR = Score_val[107];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 180 ... 184: //1818c


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[600];
			GPIOC->ODR = pixel[600];

			GPIOC->ODR = pixel[601];
			GPIOC->ODR = pixel[601];

			GPIOC->ODR = pixel[602];
			GPIOC->ODR = pixel[602];

			GPIOC->ODR = pixel[603];
			GPIOC->ODR = pixel[603];

			GPIOC->ODR = pixel[604];
			GPIOC->ODR = pixel[604];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[605];
			GPIOC->ODR = pixel[605];

			GPIOC->ODR = pixel[606];
			GPIOC->ODR = pixel[606];

			GPIOC->ODR = pixel[607];
			GPIOC->ODR = pixel[607];

			GPIOC->ODR = pixel[608];
			GPIOC->ODR = pixel[608];

			GPIOC->ODR = pixel[609];
			GPIOC->ODR = pixel[609];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[610];
			GPIOC->ODR = pixel[610];

			GPIOC->ODR = pixel[611];
			GPIOC->ODR = pixel[611];

			GPIOC->ODR = pixel[612];
			GPIOC->ODR = pixel[612];

			GPIOC->ODR = pixel[613];
			GPIOC->ODR = pixel[613];

			GPIOC->ODR = pixel[614];
			GPIOC->ODR = pixel[614];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[615];
			GPIOC->ODR = pixel[615];

			GPIOC->ODR = pixel[616];
			GPIOC->ODR = pixel[616];

			GPIOC->ODR = pixel[617];
			GPIOC->ODR = pixel[617];

			GPIOC->ODR = pixel[618];
			GPIOC->ODR = pixel[618];

			GPIOC->ODR = pixel[619];
			GPIOC->ODR = pixel[619];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[620];
			GPIOC->ODR = pixel[620];

			GPIOC->ODR = pixel[621];
			GPIOC->ODR = pixel[621];

			GPIOC->ODR = pixel[622];
			GPIOC->ODR = pixel[622];

			GPIOC->ODR = pixel[623];
			GPIOC->ODR = pixel[623];

			GPIOC->ODR = pixel[624];
			GPIOC->ODR = pixel[624];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[625];
			GPIOC->ODR = pixel[625];

			GPIOC->ODR = pixel[626];
			GPIOC->ODR = pixel[626];

			GPIOC->ODR = pixel[627];
			GPIOC->ODR = pixel[627];

			GPIOC->ODR = pixel[628];
			GPIOC->ODR = pixel[628];

			GPIOC->ODR = pixel[629];
			GPIOC->ODR = pixel[629];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[630];
			GPIOC->ODR = pixel[630];

			GPIOC->ODR = pixel[631];
			GPIOC->ODR = pixel[631];

			GPIOC->ODR = pixel[632];
			GPIOC->ODR = pixel[632];

			GPIOC->ODR = pixel[633];
			GPIOC->ODR = pixel[633];

			GPIOC->ODR = pixel[634];
			GPIOC->ODR = pixel[634];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[635];
			GPIOC->ODR = pixel[635];

			GPIOC->ODR = pixel[636];
			GPIOC->ODR = pixel[636];

			GPIOC->ODR = pixel[637];
			GPIOC->ODR = pixel[637];

			GPIOC->ODR = pixel[638];
			GPIOC->ODR = pixel[638];

			GPIOC->ODR = pixel[639];
			GPIOC->ODR = pixel[639];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[640];
			GPIOC->ODR = pixel[640];

			GPIOC->ODR = pixel[641];
			GPIOC->ODR = pixel[641];

			GPIOC->ODR = pixel[642];
			GPIOC->ODR = pixel[642];

			GPIOC->ODR = pixel[643];
			GPIOC->ODR = pixel[643];

			GPIOC->ODR = pixel[644];
			GPIOC->ODR = pixel[644];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[645];
			GPIOC->ODR = pixel[645];

			GPIOC->ODR = pixel[646];
			GPIOC->ODR = pixel[646];

			GPIOC->ODR = pixel[647];
			GPIOC->ODR = pixel[647];

			GPIOC->ODR = pixel[648];
			GPIOC->ODR = pixel[648];

			GPIOC->ODR = pixel[649];
			GPIOC->ODR = pixel[649];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[108];
			GPIOC->ODR = Score_val[108];

			GPIOC->ODR = Score_val[109];
			GPIOC->ODR = Score_val[109];

			GPIOC->ODR = Score_val[110];
			GPIOC->ODR = Score_val[110];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[111];
			GPIOC->ODR = Score_val[111];

			GPIOC->ODR = Score_val[112];
			GPIOC->ODR = Score_val[112];

			GPIOC->ODR = Score_val[113];
			GPIOC->ODR = Score_val[113];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[114];
			GPIOC->ODR = Score_val[114];

			GPIOC->ODR = Score_val[115];
			GPIOC->ODR = Score_val[115];

			GPIOC->ODR = Score_val[116];
			GPIOC->ODR = Score_val[116];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 185 ... 189: // 1818d


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; // dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[650];
			GPIOC->ODR = pixel[650];

			GPIOC->ODR = pixel[651];
			GPIOC->ODR = pixel[651];

			GPIOC->ODR = pixel[652];
			GPIOC->ODR = pixel[652];

			GPIOC->ODR = pixel[653];
			GPIOC->ODR = pixel[653];

			GPIOC->ODR = pixel[654];
			GPIOC->ODR = pixel[654];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[655];
			GPIOC->ODR = pixel[655];

			GPIOC->ODR = pixel[656];
			GPIOC->ODR = pixel[656];

			GPIOC->ODR = pixel[657];
			GPIOC->ODR = pixel[657];

			GPIOC->ODR = pixel[658];
			GPIOC->ODR = pixel[658];

			GPIOC->ODR = pixel[659];
			GPIOC->ODR = pixel[659];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[660];
			GPIOC->ODR = pixel[660];

			GPIOC->ODR = pixel[661];
			GPIOC->ODR = pixel[661];

			GPIOC->ODR = pixel[662];
			GPIOC->ODR = pixel[662];

			GPIOC->ODR = pixel[663];
			GPIOC->ODR = pixel[663];

			GPIOC->ODR = pixel[664];
			GPIOC->ODR = pixel[664];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[665];
			GPIOC->ODR = pixel[665];

			GPIOC->ODR = pixel[666];
			GPIOC->ODR = pixel[666];

			GPIOC->ODR = pixel[667];
			GPIOC->ODR = pixel[667];

			GPIOC->ODR = pixel[668];
			GPIOC->ODR = pixel[668];

			GPIOC->ODR = pixel[669];
			GPIOC->ODR = pixel[669];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[670];
			GPIOC->ODR = pixel[670];

			GPIOC->ODR = pixel[671];
			GPIOC->ODR = pixel[671];

			GPIOC->ODR = pixel[672];
			GPIOC->ODR = pixel[672];

			GPIOC->ODR = pixel[673];
			GPIOC->ODR = pixel[673];

			GPIOC->ODR = pixel[674];
			GPIOC->ODR = pixel[674];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[675];
			GPIOC->ODR = pixel[675];

			GPIOC->ODR = pixel[676];
			GPIOC->ODR = pixel[676];

			GPIOC->ODR = pixel[677];
			GPIOC->ODR = pixel[677];

			GPIOC->ODR = pixel[678];
			GPIOC->ODR = pixel[678];

			GPIOC->ODR = pixel[679];
			GPIOC->ODR = pixel[679];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[680];
			GPIOC->ODR = pixel[680];

			GPIOC->ODR = pixel[681];
			GPIOC->ODR = pixel[681];

			GPIOC->ODR = pixel[682];
			GPIOC->ODR = pixel[682];

			GPIOC->ODR = pixel[683];
			GPIOC->ODR = pixel[683];

			GPIOC->ODR = pixel[684];
			GPIOC->ODR = pixel[684];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[685];
			GPIOC->ODR = pixel[685];

			GPIOC->ODR = pixel[686];
			GPIOC->ODR = pixel[686];

			GPIOC->ODR = pixel[687];
			GPIOC->ODR = pixel[687];

			GPIOC->ODR = pixel[688];
			GPIOC->ODR = pixel[688];

			GPIOC->ODR = pixel[689];
			GPIOC->ODR = pixel[689];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[690];
			GPIOC->ODR = pixel[690];

			GPIOC->ODR = pixel[691];
			GPIOC->ODR = pixel[691];

			GPIOC->ODR = pixel[692];
			GPIOC->ODR = pixel[692];

			GPIOC->ODR = pixel[693];
			GPIOC->ODR = pixel[693];

			GPIOC->ODR = pixel[694];
			GPIOC->ODR = pixel[694];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[695];
			GPIOC->ODR = pixel[695];

			GPIOC->ODR = pixel[696];
			GPIOC->ODR = pixel[696];

			GPIOC->ODR = pixel[697];
			GPIOC->ODR = pixel[697];

			GPIOC->ODR = pixel[698];
			GPIOC->ODR = pixel[698];

			GPIOC->ODR = pixel[699];
			GPIOC->ODR = pixel[699];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[117];
			GPIOC->ODR = Score_val[117];

			GPIOC->ODR = Score_val[118];
			GPIOC->ODR = Score_val[118];

			GPIOC->ODR = Score_val[119];
			GPIOC->ODR = Score_val[119];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[120];
			GPIOC->ODR = Score_val[120];

			GPIOC->ODR = Score_val[121];
			GPIOC->ODR = Score_val[121];

			GPIOC->ODR = Score_val[122];
			GPIOC->ODR = Score_val[122];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[123];
			GPIOC->ODR = Score_val[123];

			GPIOC->ODR = Score_val[124];
			GPIOC->ODR = Score_val[124];

			GPIOC->ODR = Score_val[125];
			GPIOC->ODR = Score_val[125];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 190 ... 194: //1818e


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green; // dot
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[700];
			GPIOC->ODR = pixel[700];

			GPIOC->ODR = pixel[701];
			GPIOC->ODR = pixel[701];

			GPIOC->ODR = pixel[702];
			GPIOC->ODR = pixel[702];

			GPIOC->ODR = pixel[703];
			GPIOC->ODR = pixel[703];

			GPIOC->ODR = pixel[704];
			GPIOC->ODR = pixel[704];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[705];
			GPIOC->ODR = pixel[705];

			GPIOC->ODR = pixel[706];
			GPIOC->ODR = pixel[706];

			GPIOC->ODR = pixel[707];
			GPIOC->ODR = pixel[707];

			GPIOC->ODR = pixel[708];
			GPIOC->ODR = pixel[708];

			GPIOC->ODR = pixel[709];
			GPIOC->ODR = pixel[709];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[710];
			GPIOC->ODR = pixel[710];

			GPIOC->ODR = pixel[711];
			GPIOC->ODR = pixel[711];

			GPIOC->ODR = pixel[712];
			GPIOC->ODR = pixel[712];

			GPIOC->ODR = pixel[713];
			GPIOC->ODR = pixel[713];

			GPIOC->ODR = pixel[714];
			GPIOC->ODR = pixel[714];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[715];
			GPIOC->ODR = pixel[715];

			GPIOC->ODR = pixel[716];
			GPIOC->ODR = pixel[716];

			GPIOC->ODR = pixel[717];
			GPIOC->ODR = pixel[717];

			GPIOC->ODR = pixel[718];
			GPIOC->ODR = pixel[718];

			GPIOC->ODR = pixel[719];
			GPIOC->ODR = pixel[719];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[720];
			GPIOC->ODR = pixel[720];

			GPIOC->ODR = pixel[721];
			GPIOC->ODR = pixel[721];

			GPIOC->ODR = pixel[722];
			GPIOC->ODR = pixel[722];

			GPIOC->ODR = pixel[723];
			GPIOC->ODR = pixel[723];

			GPIOC->ODR = pixel[724];
			GPIOC->ODR = pixel[724];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[725];
			GPIOC->ODR = pixel[725];

			GPIOC->ODR = pixel[726];
			GPIOC->ODR = pixel[726];

			GPIOC->ODR = pixel[727];
			GPIOC->ODR = pixel[727];

			GPIOC->ODR = pixel[728];
			GPIOC->ODR = pixel[728];

			GPIOC->ODR = pixel[729];
			GPIOC->ODR = pixel[729];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[730];
			GPIOC->ODR = pixel[730];

			GPIOC->ODR = pixel[731];
			GPIOC->ODR = pixel[731];

			GPIOC->ODR = pixel[732];
			GPIOC->ODR = pixel[732];

			GPIOC->ODR = pixel[733];
			GPIOC->ODR = pixel[733];

			GPIOC->ODR = pixel[734];
			GPIOC->ODR = pixel[734];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[735];
			GPIOC->ODR = pixel[735];

			GPIOC->ODR = pixel[736];
			GPIOC->ODR = pixel[736];

			GPIOC->ODR = pixel[737];
			GPIOC->ODR = pixel[737];

			GPIOC->ODR = pixel[738];
			GPIOC->ODR = pixel[738];

			GPIOC->ODR = pixel[739];
			GPIOC->ODR = pixel[739];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[740];
			GPIOC->ODR = pixel[740];

			GPIOC->ODR = pixel[741];
			GPIOC->ODR = pixel[741];

			GPIOC->ODR = pixel[742];
			GPIOC->ODR = pixel[742];

			GPIOC->ODR = pixel[743];
			GPIOC->ODR = pixel[743];

			GPIOC->ODR = pixel[744];
			GPIOC->ODR = pixel[744];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[745];
			GPIOC->ODR = pixel[745];

			GPIOC->ODR = pixel[746];
			GPIOC->ODR = pixel[746];

			GPIOC->ODR = pixel[747];
			GPIOC->ODR = pixel[747];

			GPIOC->ODR = pixel[748];
			GPIOC->ODR = pixel[748];

			GPIOC->ODR = pixel[749];
			GPIOC->ODR = pixel[749];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[126];
			GPIOC->ODR = Score_val[126];

			GPIOC->ODR = Score_val[127];
			GPIOC->ODR = Score_val[127];

			GPIOC->ODR = Score_val[128];
			GPIOC->ODR = Score_val[128];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[129];
			GPIOC->ODR = Score_val[129];

			GPIOC->ODR = Score_val[130];
			GPIOC->ODR = Score_val[130];

			GPIOC->ODR = Score_val[131];
			GPIOC->ODR = Score_val[131];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[132];
			GPIOC->ODR = Score_val[132];

			GPIOC->ODR = Score_val[133];
			GPIOC->ODR = Score_val[133];

			GPIOC->ODR = Score_val[134];
			GPIOC->ODR = Score_val[134];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 195 ... 199:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 200 ... 200:
			GPIOC->ODR = White_OFF;
			break;
			case 201 ... 204:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			}
		break;
		case 205 ... 239:  //fours
			switch(Lines)
			{
			case 205 ... 209: //1919a


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[750];
			GPIOC->ODR = pixel[750];

			GPIOC->ODR = pixel[751];
			GPIOC->ODR = pixel[751];

			GPIOC->ODR = pixel[752];
			GPIOC->ODR = pixel[752];

			GPIOC->ODR = pixel[753];
			GPIOC->ODR = pixel[753];

			GPIOC->ODR = pixel[754];
			GPIOC->ODR = pixel[754];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[755];
			GPIOC->ODR = pixel[755];

			GPIOC->ODR = pixel[756];
			GPIOC->ODR = pixel[756];

			GPIOC->ODR = pixel[757];
			GPIOC->ODR = pixel[757];

			GPIOC->ODR = pixel[758];
			GPIOC->ODR = pixel[758];

			GPIOC->ODR = pixel[759];
			GPIOC->ODR = pixel[759];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[760];
			GPIOC->ODR = pixel[760];

			GPIOC->ODR = pixel[761];
			GPIOC->ODR = pixel[761];

			GPIOC->ODR = pixel[762];
			GPIOC->ODR = pixel[762];

			GPIOC->ODR = pixel[763];
			GPIOC->ODR = pixel[763];

			GPIOC->ODR = pixel[764];
			GPIOC->ODR = pixel[764];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[765];
			GPIOC->ODR = pixel[765];

			GPIOC->ODR = pixel[766];
			GPIOC->ODR = pixel[766];

			GPIOC->ODR = pixel[767];
			GPIOC->ODR = pixel[767];

			GPIOC->ODR = pixel[768];
			GPIOC->ODR = pixel[768];

			GPIOC->ODR = pixel[769];
			GPIOC->ODR = pixel[769];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[770];
			GPIOC->ODR = pixel[770];

			GPIOC->ODR = pixel[771];
			GPIOC->ODR = pixel[771];

			GPIOC->ODR = pixel[772];
			GPIOC->ODR = pixel[772];

			GPIOC->ODR = pixel[773];
			GPIOC->ODR = pixel[773];

			GPIOC->ODR = pixel[774];
			GPIOC->ODR = pixel[774];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[775];
			GPIOC->ODR = pixel[775];

			GPIOC->ODR = pixel[776];
			GPIOC->ODR = pixel[776];

			GPIOC->ODR = pixel[777];
			GPIOC->ODR = pixel[777];

			GPIOC->ODR = pixel[778];
			GPIOC->ODR = pixel[778];

			GPIOC->ODR = pixel[779];
			GPIOC->ODR = pixel[779];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[780];
			GPIOC->ODR = pixel[780];

			GPIOC->ODR = pixel[781];
			GPIOC->ODR = pixel[781];

			GPIOC->ODR = pixel[782];
			GPIOC->ODR = pixel[782];

			GPIOC->ODR = pixel[783];
			GPIOC->ODR = pixel[783];

			GPIOC->ODR = pixel[784];
			GPIOC->ODR = pixel[784];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[785];
			GPIOC->ODR = pixel[785];

			GPIOC->ODR = pixel[786];
			GPIOC->ODR = pixel[786];

			GPIOC->ODR = pixel[787];
			GPIOC->ODR = pixel[787];

			GPIOC->ODR = pixel[788];
			GPIOC->ODR = pixel[788];

			GPIOC->ODR = pixel[789];
			GPIOC->ODR = pixel[789];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[790];
			GPIOC->ODR = pixel[790];

			GPIOC->ODR = pixel[791];
			GPIOC->ODR = pixel[791];

			GPIOC->ODR = pixel[792];
			GPIOC->ODR = pixel[792];

			GPIOC->ODR = pixel[793];
			GPIOC->ODR = pixel[793];

			GPIOC->ODR = pixel[794];
			GPIOC->ODR = pixel[794];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[795];
			GPIOC->ODR = pixel[795];

			GPIOC->ODR = pixel[796];
			GPIOC->ODR = pixel[796];

			GPIOC->ODR = pixel[797];
			GPIOC->ODR = pixel[797];

			GPIOC->ODR = pixel[798];
			GPIOC->ODR = pixel[798];

			GPIOC->ODR = pixel[799];
			GPIOC->ODR = pixel[799];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[135];
			GPIOC->ODR = Score_val[135];

			GPIOC->ODR = Score_val[136];
			GPIOC->ODR = Score_val[136];

			GPIOC->ODR = Score_val[137];
			GPIOC->ODR = Score_val[137];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[138];
			GPIOC->ODR = Score_val[138];

			GPIOC->ODR = Score_val[139];
			GPIOC->ODR = Score_val[139];

			GPIOC->ODR = Score_val[140];
			GPIOC->ODR = Score_val[140];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[141];
			GPIOC->ODR = Score_val[141];

			GPIOC->ODR = Score_val[142];
			GPIOC->ODR = Score_val[142];

			GPIOC->ODR = Score_val[143];
			GPIOC->ODR = Score_val[143];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 210 ... 214: //1919b


			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[800];
			GPIOC->ODR = pixel[800];

			GPIOC->ODR = pixel[801];
			GPIOC->ODR = pixel[801];

			GPIOC->ODR = pixel[802];
			GPIOC->ODR = pixel[802];

			GPIOC->ODR = pixel[803];
			GPIOC->ODR = pixel[803];

			GPIOC->ODR = pixel[804];
			GPIOC->ODR = pixel[804];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[805];
			GPIOC->ODR = pixel[805];

			GPIOC->ODR = pixel[806];
			GPIOC->ODR = pixel[806];

			GPIOC->ODR = pixel[807];
			GPIOC->ODR = pixel[807];

			GPIOC->ODR = pixel[808];
			GPIOC->ODR = pixel[808];

			GPIOC->ODR = pixel[809];
			GPIOC->ODR = pixel[809];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[810];
			GPIOC->ODR = pixel[810];

			GPIOC->ODR = pixel[811];
			GPIOC->ODR = pixel[811];

			GPIOC->ODR = pixel[812];
			GPIOC->ODR = pixel[812];

			GPIOC->ODR = pixel[813];
			GPIOC->ODR = pixel[813];

			GPIOC->ODR = pixel[814];
			GPIOC->ODR = pixel[814];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[815];
			GPIOC->ODR = pixel[815];

			GPIOC->ODR = pixel[816];
			GPIOC->ODR = pixel[816];

			GPIOC->ODR = pixel[817];
			GPIOC->ODR = pixel[817];

			GPIOC->ODR = pixel[818];
			GPIOC->ODR = pixel[818];

			GPIOC->ODR = pixel[819];
			GPIOC->ODR = pixel[819];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[820];
			GPIOC->ODR = pixel[820];

			GPIOC->ODR = pixel[821];
			GPIOC->ODR = pixel[821];

			GPIOC->ODR = pixel[822];
			GPIOC->ODR = pixel[822];

			GPIOC->ODR = pixel[823];
			GPIOC->ODR = pixel[823];

			GPIOC->ODR = pixel[824];
			GPIOC->ODR = pixel[824];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[825];
			GPIOC->ODR = pixel[825];

			GPIOC->ODR = pixel[826];
			GPIOC->ODR = pixel[826];

			GPIOC->ODR = pixel[827];
			GPIOC->ODR = pixel[827];

			GPIOC->ODR = pixel[828];
			GPIOC->ODR = pixel[828];

			GPIOC->ODR = pixel[829];
			GPIOC->ODR = pixel[829];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[830];
			GPIOC->ODR = pixel[830];

			GPIOC->ODR = pixel[831];
			GPIOC->ODR = pixel[831];

			GPIOC->ODR = pixel[832];
			GPIOC->ODR = pixel[832];

			GPIOC->ODR = pixel[833];
			GPIOC->ODR = pixel[833];

			GPIOC->ODR = pixel[834];
			GPIOC->ODR = pixel[834];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[835];
			GPIOC->ODR = pixel[835];

			GPIOC->ODR = pixel[836];
			GPIOC->ODR = pixel[836];

			GPIOC->ODR = pixel[837];
			GPIOC->ODR = pixel[837];

			GPIOC->ODR = pixel[838];
			GPIOC->ODR = pixel[838];

			GPIOC->ODR = pixel[839];
			GPIOC->ODR = pixel[839];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[840];
			GPIOC->ODR = pixel[840];

			GPIOC->ODR = pixel[841];
			GPIOC->ODR = pixel[841];

			GPIOC->ODR = pixel[842];
			GPIOC->ODR = pixel[842];

			GPIOC->ODR = pixel[843];
			GPIOC->ODR = pixel[843];

			GPIOC->ODR = pixel[844];
			GPIOC->ODR = pixel[844];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[845];
			GPIOC->ODR = pixel[845];

			GPIOC->ODR = pixel[846];
			GPIOC->ODR = pixel[846];

			GPIOC->ODR = pixel[847];
			GPIOC->ODR = pixel[847];

			GPIOC->ODR = pixel[848];
			GPIOC->ODR = pixel[848];

			GPIOC->ODR = pixel[849];
			GPIOC->ODR = pixel[849];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[144];
			GPIOC->ODR = Score_val[144];

			GPIOC->ODR = Score_val[145];
			GPIOC->ODR = Score_val[145];

			GPIOC->ODR = Score_val[146];
			GPIOC->ODR = Score_val[146];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[147];
			GPIOC->ODR = Score_val[147];

			GPIOC->ODR = Score_val[148];
			GPIOC->ODR = Score_val[148];

			GPIOC->ODR = Score_val[149];
			GPIOC->ODR = Score_val[149];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[150];
			GPIOC->ODR = Score_val[150];

			GPIOC->ODR = Score_val[151];
			GPIOC->ODR = Score_val[151];

			GPIOC->ODR = Score_val[152];
			GPIOC->ODR = Score_val[152];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 215 ... 219: //1919c


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF; //dot
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[850];
			GPIOC->ODR = pixel[850];

			GPIOC->ODR = pixel[851];
			GPIOC->ODR = pixel[851];

			GPIOC->ODR = pixel[852];
			GPIOC->ODR = pixel[852];

			GPIOC->ODR = pixel[853];
			GPIOC->ODR = pixel[853];

			GPIOC->ODR = pixel[854];
			GPIOC->ODR = pixel[854];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[855];
			GPIOC->ODR = pixel[855];

			GPIOC->ODR = pixel[856];
			GPIOC->ODR = pixel[856];

			GPIOC->ODR = pixel[857];
			GPIOC->ODR = pixel[857];

			GPIOC->ODR = pixel[858];
			GPIOC->ODR = pixel[858];

			GPIOC->ODR = pixel[859];
			GPIOC->ODR = pixel[859];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[860];
			GPIOC->ODR = pixel[860];

			GPIOC->ODR = pixel[861];
			GPIOC->ODR = pixel[861];

			GPIOC->ODR = pixel[862];
			GPIOC->ODR = pixel[862];

			GPIOC->ODR = pixel[863];
			GPIOC->ODR = pixel[863];

			GPIOC->ODR = pixel[864];
			GPIOC->ODR = pixel[864];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[865];
			GPIOC->ODR = pixel[865];

			GPIOC->ODR = pixel[866];
			GPIOC->ODR = pixel[866];

			GPIOC->ODR = pixel[867];
			GPIOC->ODR = pixel[867];

			GPIOC->ODR = pixel[868];
			GPIOC->ODR = pixel[868];

			GPIOC->ODR = pixel[869];
			GPIOC->ODR = pixel[869];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[870];
			GPIOC->ODR = pixel[870];

			GPIOC->ODR = pixel[871];
			GPIOC->ODR = pixel[871];

			GPIOC->ODR = pixel[872];
			GPIOC->ODR = pixel[872];

			GPIOC->ODR = pixel[873];
			GPIOC->ODR = pixel[873];

			GPIOC->ODR = pixel[874];
			GPIOC->ODR = pixel[874];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[875];
			GPIOC->ODR = pixel[875];

			GPIOC->ODR = pixel[876];
			GPIOC->ODR = pixel[876];

			GPIOC->ODR = pixel[877];
			GPIOC->ODR = pixel[877];

			GPIOC->ODR = pixel[878];
			GPIOC->ODR = pixel[878];

			GPIOC->ODR = pixel[879];
			GPIOC->ODR = pixel[879];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[880];
			GPIOC->ODR = pixel[880];

			GPIOC->ODR = pixel[881];
			GPIOC->ODR = pixel[881];

			GPIOC->ODR = pixel[882];
			GPIOC->ODR = pixel[882];

			GPIOC->ODR = pixel[883];
			GPIOC->ODR = pixel[883];

			GPIOC->ODR = pixel[884];
			GPIOC->ODR = pixel[884];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[885];
			GPIOC->ODR = pixel[885];

			GPIOC->ODR = pixel[886];
			GPIOC->ODR = pixel[886];

			GPIOC->ODR = pixel[887];
			GPIOC->ODR = pixel[887];

			GPIOC->ODR = pixel[888];
			GPIOC->ODR = pixel[888];

			GPIOC->ODR = pixel[889];
			GPIOC->ODR = pixel[889];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[890];
			GPIOC->ODR = pixel[890];

			GPIOC->ODR = pixel[891];
			GPIOC->ODR = pixel[891];

			GPIOC->ODR = pixel[892];
			GPIOC->ODR = pixel[892];

			GPIOC->ODR = pixel[893];
			GPIOC->ODR = pixel[893];

			GPIOC->ODR = pixel[894];
			GPIOC->ODR = pixel[894];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[895];
			GPIOC->ODR = pixel[895];

			GPIOC->ODR = pixel[896];
			GPIOC->ODR = pixel[896];

			GPIOC->ODR = pixel[897];
			GPIOC->ODR = pixel[897];

			GPIOC->ODR = pixel[898];
			GPIOC->ODR = pixel[898];

			GPIOC->ODR = pixel[899];
			GPIOC->ODR = pixel[899];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[153];
			GPIOC->ODR = Score_val[153];

			GPIOC->ODR = Score_val[154];
			GPIOC->ODR = Score_val[154];

			GPIOC->ODR = Score_val[155];
			GPIOC->ODR = Score_val[155];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[156];
			GPIOC->ODR = Score_val[156];

			GPIOC->ODR = Score_val[157];
			GPIOC->ODR = Score_val[157];

			GPIOC->ODR = Score_val[158];
			GPIOC->ODR = Score_val[158];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[159];
			GPIOC->ODR = Score_val[159];

			GPIOC->ODR = Score_val[160];
			GPIOC->ODR = Score_val[160];

			GPIOC->ODR = Score_val[161];
			GPIOC->ODR = Score_val[161];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 220 ... 224: // 1919d


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[900];
			GPIOC->ODR = pixel[900];

			GPIOC->ODR = pixel[901];
			GPIOC->ODR = pixel[901];

			GPIOC->ODR = pixel[902];
			GPIOC->ODR = pixel[902];

			GPIOC->ODR = pixel[903];
			GPIOC->ODR = pixel[903];

			GPIOC->ODR = pixel[904];
			GPIOC->ODR = pixel[904];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[905];
			GPIOC->ODR = pixel[905];

			GPIOC->ODR = pixel[906];
			GPIOC->ODR = pixel[906];

			GPIOC->ODR = pixel[907];
			GPIOC->ODR = pixel[907];

			GPIOC->ODR = pixel[908];
			GPIOC->ODR = pixel[908];

			GPIOC->ODR = pixel[909];
			GPIOC->ODR = pixel[909];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[910];
			GPIOC->ODR = pixel[910];

			GPIOC->ODR = pixel[911];
			GPIOC->ODR = pixel[911];

			GPIOC->ODR = pixel[912];
			GPIOC->ODR = pixel[912];

			GPIOC->ODR = pixel[913];
			GPIOC->ODR = pixel[913];

			GPIOC->ODR = pixel[914];
			GPIOC->ODR = pixel[914];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[915];
			GPIOC->ODR = pixel[915];

			GPIOC->ODR = pixel[916];
			GPIOC->ODR = pixel[916];

			GPIOC->ODR = pixel[917];
			GPIOC->ODR = pixel[917];

			GPIOC->ODR = pixel[918];
			GPIOC->ODR = pixel[918];

			GPIOC->ODR = pixel[919];
			GPIOC->ODR = pixel[919];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[920];
			GPIOC->ODR = pixel[920];

			GPIOC->ODR = pixel[921];
			GPIOC->ODR = pixel[921];

			GPIOC->ODR = pixel[922];
			GPIOC->ODR = pixel[922];

			GPIOC->ODR = pixel[923];
			GPIOC->ODR = pixel[923];

			GPIOC->ODR = pixel[924];
			GPIOC->ODR = pixel[924];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[925];
			GPIOC->ODR = pixel[925];

			GPIOC->ODR = pixel[926];
			GPIOC->ODR = pixel[926];

			GPIOC->ODR = pixel[927];
			GPIOC->ODR = pixel[927];

			GPIOC->ODR = pixel[928];
			GPIOC->ODR = pixel[928];

			GPIOC->ODR = pixel[929];
			GPIOC->ODR = pixel[929];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[930];
			GPIOC->ODR = pixel[930];

			GPIOC->ODR = pixel[931];
			GPIOC->ODR = pixel[931];

			GPIOC->ODR = pixel[932];
			GPIOC->ODR = pixel[932];

			GPIOC->ODR = pixel[933];
			GPIOC->ODR = pixel[933];

			GPIOC->ODR = pixel[934];
			GPIOC->ODR = pixel[934];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[935];
			GPIOC->ODR = pixel[935];

			GPIOC->ODR = pixel[936];
			GPIOC->ODR = pixel[936];

			GPIOC->ODR = pixel[937];
			GPIOC->ODR = pixel[937];

			GPIOC->ODR = pixel[938];
			GPIOC->ODR = pixel[938];

			GPIOC->ODR = pixel[939];
			GPIOC->ODR = pixel[939];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[940];
			GPIOC->ODR = pixel[940];

			GPIOC->ODR = pixel[941];
			GPIOC->ODR = pixel[941];

			GPIOC->ODR = pixel[942];
			GPIOC->ODR = pixel[942];

			GPIOC->ODR = pixel[943];
			GPIOC->ODR = pixel[943];

			GPIOC->ODR = pixel[944];
			GPIOC->ODR = pixel[944];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[945];
			GPIOC->ODR = pixel[945];

			GPIOC->ODR = pixel[946];
			GPIOC->ODR = pixel[946];

			GPIOC->ODR = pixel[947];
			GPIOC->ODR = pixel[947];

			GPIOC->ODR = pixel[948];
			GPIOC->ODR = pixel[948];

			GPIOC->ODR = pixel[949];
			GPIOC->ODR = pixel[949];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[162];
			GPIOC->ODR = Score_val[162];

			GPIOC->ODR = Score_val[163];
			GPIOC->ODR = Score_val[163];

			GPIOC->ODR = Score_val[164];
			GPIOC->ODR = Score_val[164];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[165];
			GPIOC->ODR = Score_val[165];

			GPIOC->ODR = Score_val[166];
			GPIOC->ODR = Score_val[166];

			GPIOC->ODR = Score_val[167];
			GPIOC->ODR = Score_val[167];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[168];
			GPIOC->ODR = Score_val[168];

			GPIOC->ODR = Score_val[169];
			GPIOC->ODR = Score_val[169];

			GPIOC->ODR = Score_val[170];
			GPIOC->ODR = Score_val[170];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 225 ... 229: //1919e


			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[950];
			GPIOC->ODR = pixel[950];

			GPIOC->ODR = pixel[951];
			GPIOC->ODR = pixel[951];

			GPIOC->ODR = pixel[952];
			GPIOC->ODR = pixel[952];

			GPIOC->ODR = pixel[953];
			GPIOC->ODR = pixel[953];

			GPIOC->ODR = pixel[954];
			GPIOC->ODR = pixel[954];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[955];
			GPIOC->ODR = pixel[955];

			GPIOC->ODR = pixel[956];
			GPIOC->ODR = pixel[956];

			GPIOC->ODR = pixel[957];
			GPIOC->ODR = pixel[957];

			GPIOC->ODR = pixel[958];
			GPIOC->ODR = pixel[958];

			GPIOC->ODR = pixel[959];
			GPIOC->ODR = pixel[959];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[960];
			GPIOC->ODR = pixel[960];

			GPIOC->ODR = pixel[961];
			GPIOC->ODR = pixel[961];

			GPIOC->ODR = pixel[962];
			GPIOC->ODR = pixel[962];

			GPIOC->ODR = pixel[963];
			GPIOC->ODR = pixel[963];

			GPIOC->ODR = pixel[964];
			GPIOC->ODR = pixel[964];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[965];
			GPIOC->ODR = pixel[965];

			GPIOC->ODR = pixel[966];
			GPIOC->ODR = pixel[966];

			GPIOC->ODR = pixel[967];
			GPIOC->ODR = pixel[967];

			GPIOC->ODR = pixel[968];
			GPIOC->ODR = pixel[968];

			GPIOC->ODR = pixel[969];
			GPIOC->ODR = pixel[969];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[970];
			GPIOC->ODR = pixel[970];

			GPIOC->ODR = pixel[971];
			GPIOC->ODR = pixel[971];

			GPIOC->ODR = pixel[972];
			GPIOC->ODR = pixel[972];

			GPIOC->ODR = pixel[973];
			GPIOC->ODR = pixel[973];

			GPIOC->ODR = pixel[974];
			GPIOC->ODR = pixel[974];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[975];
			GPIOC->ODR = pixel[975];

			GPIOC->ODR = pixel[976];
			GPIOC->ODR = pixel[976];

			GPIOC->ODR = pixel[977];
			GPIOC->ODR = pixel[977];

			GPIOC->ODR = pixel[978];
			GPIOC->ODR = pixel[978];

			GPIOC->ODR = pixel[979];
			GPIOC->ODR = pixel[979];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[980];
			GPIOC->ODR = pixel[980];

			GPIOC->ODR = pixel[981];
			GPIOC->ODR = pixel[981];

			GPIOC->ODR = pixel[982];
			GPIOC->ODR = pixel[982];

			GPIOC->ODR = pixel[983];
			GPIOC->ODR = pixel[983];

			GPIOC->ODR = pixel[984];
			GPIOC->ODR = pixel[984];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[985];
			GPIOC->ODR = pixel[985];

			GPIOC->ODR = pixel[986];
			GPIOC->ODR = pixel[986];

			GPIOC->ODR = pixel[987];
			GPIOC->ODR = pixel[987];

			GPIOC->ODR = pixel[988];
			GPIOC->ODR = pixel[988];

			GPIOC->ODR = pixel[989];
			GPIOC->ODR = pixel[989];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[990];
			GPIOC->ODR = pixel[990];

			GPIOC->ODR = pixel[991];
			GPIOC->ODR = pixel[991];

			GPIOC->ODR = pixel[992];
			GPIOC->ODR = pixel[992];

			GPIOC->ODR = pixel[993];
			GPIOC->ODR = pixel[993];

			GPIOC->ODR = pixel[994];
			GPIOC->ODR = pixel[994];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = pixel[995];
			GPIOC->ODR = pixel[995];

			GPIOC->ODR = pixel[996];
			GPIOC->ODR = pixel[996];

			GPIOC->ODR = pixel[997];
			GPIOC->ODR = pixel[997];

			GPIOC->ODR = pixel[998];
			GPIOC->ODR = pixel[998];

			GPIOC->ODR = pixel[999];
			GPIOC->ODR = pixel[999];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[171];
			GPIOC->ODR = Score_val[171];

			GPIOC->ODR = Score_val[172];
			GPIOC->ODR = Score_val[172];

			GPIOC->ODR = Score_val[173];
			GPIOC->ODR = Score_val[173];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[174];
			GPIOC->ODR = Score_val[174];

			GPIOC->ODR = Score_val[175];
			GPIOC->ODR = Score_val[175];

			GPIOC->ODR = Score_val[176];
			GPIOC->ODR = Score_val[176];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Score_val[177];
			GPIOC->ODR = Score_val[177];

			GPIOC->ODR = Score_val[178];
			GPIOC->ODR = Score_val[178];

			GPIOC->ODR = Score_val[179];
			GPIOC->ODR = Score_val[179];

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = Deep_Green;
			GPIOC->ODR = Deep_Green;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			break;
			case 230 ... 234:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			case 235 ... 235:
			GPIOC->ODR = White_OFF;
			break;
			case 236 ... 239:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;
			GPIOC->ODR &= White_OFF;

			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;

			while(waste_of_time<50)
			{
				GPIOC->ODR = Deep_Green;
				waste_of_time++;
			}
			waste_of_time = 0;
			GPIOC->ODR = White_OFF;
			break;
			}
		break;


		case 240 ... 274: //twenties 2020a
		switch(Lines)
		{
		case 240 ... 244:


		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[0];
		GPIOC->ODR = ppixel[0];

		GPIOC->ODR = ppixel[1];
		GPIOC->ODR = ppixel[1];

		GPIOC->ODR = ppixel[2];
		GPIOC->ODR = ppixel[2];

		GPIOC->ODR = ppixel[3];
		GPIOC->ODR = ppixel[3];

		GPIOC->ODR = ppixel[4];
		GPIOC->ODR = ppixel[4];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[5];
		GPIOC->ODR = ppixel[5];

		GPIOC->ODR = ppixel[6];
		GPIOC->ODR = ppixel[6];

		GPIOC->ODR = ppixel[7];
		GPIOC->ODR = ppixel[7];

		GPIOC->ODR = ppixel[8];
		GPIOC->ODR = ppixel[8];

		GPIOC->ODR = ppixel[9];
		GPIOC->ODR = ppixel[9];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[10];
		GPIOC->ODR = ppixel[10];

		GPIOC->ODR = ppixel[11];
		GPIOC->ODR = ppixel[11];

		GPIOC->ODR = ppixel[12];
		GPIOC->ODR = ppixel[12];

		GPIOC->ODR = ppixel[13];
		GPIOC->ODR = ppixel[13];

		GPIOC->ODR = ppixel[14];
		GPIOC->ODR = ppixel[14];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[15];
		GPIOC->ODR = ppixel[15];

		GPIOC->ODR = ppixel[16];
		GPIOC->ODR = ppixel[16];

		GPIOC->ODR = ppixel[17];
		GPIOC->ODR = ppixel[17];

		GPIOC->ODR = ppixel[18];
		GPIOC->ODR = ppixel[18];

		GPIOC->ODR = ppixel[19];
		GPIOC->ODR = ppixel[19];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[20];
		GPIOC->ODR = ppixel[20];

		GPIOC->ODR = ppixel[21];
		GPIOC->ODR = ppixel[21];

		GPIOC->ODR = ppixel[22];
		GPIOC->ODR = ppixel[22];

		GPIOC->ODR = ppixel[23];
		GPIOC->ODR = ppixel[23];

		GPIOC->ODR = ppixel[24];
		GPIOC->ODR = ppixel[24];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[25];
		GPIOC->ODR = ppixel[25];

		GPIOC->ODR = ppixel[26];
		GPIOC->ODR = ppixel[26];

		GPIOC->ODR = ppixel[27];
		GPIOC->ODR = ppixel[27];

		GPIOC->ODR = ppixel[28];
		GPIOC->ODR = ppixel[28];

		GPIOC->ODR = ppixel[29];
		GPIOC->ODR = ppixel[29];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[30];
		GPIOC->ODR = ppixel[30];

		GPIOC->ODR = ppixel[31];
		GPIOC->ODR = ppixel[31];

		GPIOC->ODR = ppixel[32];
		GPIOC->ODR = ppixel[32];

		GPIOC->ODR = ppixel[33];
		GPIOC->ODR = ppixel[33];

		GPIOC->ODR = ppixel[34];
		GPIOC->ODR = ppixel[34];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[35];
		GPIOC->ODR = ppixel[35];

		GPIOC->ODR = ppixel[36];
		GPIOC->ODR = ppixel[36];

		GPIOC->ODR = ppixel[37];
		GPIOC->ODR = ppixel[37];

		GPIOC->ODR = ppixel[38];
		GPIOC->ODR = ppixel[38];

		GPIOC->ODR = ppixel[39];
		GPIOC->ODR = ppixel[39];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[40];
		GPIOC->ODR = ppixel[40];

		GPIOC->ODR = ppixel[41];
		GPIOC->ODR = ppixel[41];

		GPIOC->ODR = ppixel[42];
		GPIOC->ODR = ppixel[42];

		GPIOC->ODR = ppixel[43];
		GPIOC->ODR = ppixel[43];

		GPIOC->ODR = ppixel[44];
		GPIOC->ODR = ppixel[44];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[45];
		GPIOC->ODR = ppixel[45];

		GPIOC->ODR = ppixel[46];
		GPIOC->ODR = ppixel[46];

		GPIOC->ODR = ppixel[47];
		GPIOC->ODR = ppixel[47];

		GPIOC->ODR = ppixel[48];
		GPIOC->ODR = ppixel[48];

		GPIOC->ODR = ppixel[49];
		GPIOC->ODR = ppixel[49];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[180];
		GPIOC->ODR = Score_val[180];

		GPIOC->ODR = Score_val[181];
		GPIOC->ODR = Score_val[181];

		GPIOC->ODR = Score_val[182];
		GPIOC->ODR = Score_val[182];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[183];
		GPIOC->ODR = Score_val[183];

		GPIOC->ODR = Score_val[184];
		GPIOC->ODR = Score_val[184];

		GPIOC->ODR = Score_val[185];
		GPIOC->ODR = Score_val[185];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[186];
		GPIOC->ODR = Score_val[186];

		GPIOC->ODR = Score_val[187];
		GPIOC->ODR = Score_val[187];

		GPIOC->ODR = Score_val[188];
		GPIOC->ODR = Score_val[188];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 245 ... 249: //2020b


		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[50];
		GPIOC->ODR = ppixel[50];

		GPIOC->ODR = ppixel[51];
		GPIOC->ODR = ppixel[51];

		GPIOC->ODR = ppixel[52];
		GPIOC->ODR = ppixel[52];

		GPIOC->ODR = ppixel[53];
		GPIOC->ODR = ppixel[53];

		GPIOC->ODR = ppixel[54];
		GPIOC->ODR = ppixel[54];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[55];
		GPIOC->ODR = ppixel[55];

		GPIOC->ODR = ppixel[56];
		GPIOC->ODR = ppixel[56];

		GPIOC->ODR = ppixel[57];
		GPIOC->ODR = ppixel[57];

		GPIOC->ODR = ppixel[58];
		GPIOC->ODR = ppixel[58];

		GPIOC->ODR = ppixel[59];
		GPIOC->ODR = ppixel[59];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[60];
		GPIOC->ODR = ppixel[60];

		GPIOC->ODR = ppixel[61];
		GPIOC->ODR = ppixel[61];

		GPIOC->ODR = ppixel[62];
		GPIOC->ODR = ppixel[62];

		GPIOC->ODR = ppixel[63];
		GPIOC->ODR = ppixel[63];

		GPIOC->ODR = ppixel[64];
		GPIOC->ODR = ppixel[64];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[65];
		GPIOC->ODR = ppixel[65];

		GPIOC->ODR = ppixel[66];
		GPIOC->ODR = ppixel[66];

		GPIOC->ODR = ppixel[67];
		GPIOC->ODR = ppixel[67];

		GPIOC->ODR = ppixel[68];
		GPIOC->ODR = ppixel[68];

		GPIOC->ODR = ppixel[69];
		GPIOC->ODR = ppixel[69];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[70];
		GPIOC->ODR = ppixel[70];

		GPIOC->ODR = ppixel[71];
		GPIOC->ODR = ppixel[71];

		GPIOC->ODR = ppixel[72];
		GPIOC->ODR = ppixel[72];

		GPIOC->ODR = ppixel[73];
		GPIOC->ODR = ppixel[73];

		GPIOC->ODR = ppixel[74];
		GPIOC->ODR = ppixel[74];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[75];
		GPIOC->ODR = ppixel[75];

		GPIOC->ODR = ppixel[76];
		GPIOC->ODR = ppixel[76];

		GPIOC->ODR = ppixel[77];
		GPIOC->ODR = ppixel[77];

		GPIOC->ODR = ppixel[78];
		GPIOC->ODR = ppixel[78];

		GPIOC->ODR = ppixel[79];
		GPIOC->ODR = ppixel[79];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[80];
		GPIOC->ODR = ppixel[80];

		GPIOC->ODR = ppixel[81];
		GPIOC->ODR = ppixel[81];

		GPIOC->ODR = ppixel[82];
		GPIOC->ODR = ppixel[82];

		GPIOC->ODR = ppixel[83];
		GPIOC->ODR = ppixel[83];

		GPIOC->ODR = ppixel[84];
		GPIOC->ODR = ppixel[84];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[85];
		GPIOC->ODR = ppixel[85];

		GPIOC->ODR = ppixel[86];
		GPIOC->ODR = ppixel[86];

		GPIOC->ODR = ppixel[87];
		GPIOC->ODR = ppixel[87];

		GPIOC->ODR = ppixel[88];
		GPIOC->ODR = ppixel[88];

		GPIOC->ODR = ppixel[89];
		GPIOC->ODR = ppixel[89];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[90];
		GPIOC->ODR = ppixel[90];

		GPIOC->ODR = ppixel[91];
		GPIOC->ODR = ppixel[91];

		GPIOC->ODR = ppixel[92];
		GPIOC->ODR = ppixel[92];

		GPIOC->ODR = ppixel[93];
		GPIOC->ODR = ppixel[93];

		GPIOC->ODR = ppixel[94];
		GPIOC->ODR = ppixel[94];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[95];
		GPIOC->ODR = ppixel[95];

		GPIOC->ODR = ppixel[96];
		GPIOC->ODR = ppixel[96];

		GPIOC->ODR = ppixel[97];
		GPIOC->ODR = ppixel[97];

		GPIOC->ODR = ppixel[98];
		GPIOC->ODR = ppixel[98];

		GPIOC->ODR = ppixel[99];
		GPIOC->ODR = ppixel[99];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[189];
		GPIOC->ODR = Score_val[189];

		GPIOC->ODR = Score_val[190];
		GPIOC->ODR = Score_val[190];

		GPIOC->ODR = Score_val[191];
		GPIOC->ODR = Score_val[191];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[192];
		GPIOC->ODR = Score_val[192];

		GPIOC->ODR = Score_val[193];
		GPIOC->ODR = Score_val[193];

		GPIOC->ODR = Score_val[194];
		GPIOC->ODR = Score_val[194];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[195];
		GPIOC->ODR = Score_val[195];

		GPIOC->ODR = Score_val[196];
		GPIOC->ODR = Score_val[196];

		GPIOC->ODR = Score_val[197];
		GPIOC->ODR = Score_val[197];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 250 ... 254: //2020c


		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[100];
		GPIOC->ODR = ppixel[100];

		GPIOC->ODR = ppixel[101];
		GPIOC->ODR = ppixel[101];

		GPIOC->ODR = ppixel[102];
		GPIOC->ODR = ppixel[102];

		GPIOC->ODR = ppixel[103];
		GPIOC->ODR = ppixel[103];

		GPIOC->ODR = ppixel[104];
		GPIOC->ODR = ppixel[104];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[105];
		GPIOC->ODR = ppixel[105];

		GPIOC->ODR = ppixel[106];
		GPIOC->ODR = ppixel[106];

		GPIOC->ODR = ppixel[107];
		GPIOC->ODR = ppixel[107];

		GPIOC->ODR = ppixel[108];
		GPIOC->ODR = ppixel[108];

		GPIOC->ODR = ppixel[109];
		GPIOC->ODR = ppixel[109];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[110];
		GPIOC->ODR = ppixel[110];

		GPIOC->ODR = ppixel[111];
		GPIOC->ODR = ppixel[111];

		GPIOC->ODR = ppixel[112];
		GPIOC->ODR = ppixel[112];

		GPIOC->ODR = ppixel[113];
		GPIOC->ODR = ppixel[113];

		GPIOC->ODR = ppixel[114];
		GPIOC->ODR = ppixel[114];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[115];
		GPIOC->ODR = ppixel[115];

		GPIOC->ODR = ppixel[116];
		GPIOC->ODR = ppixel[116];

		GPIOC->ODR = ppixel[117];
		GPIOC->ODR = ppixel[117];

		GPIOC->ODR = ppixel[118];
		GPIOC->ODR = ppixel[118];

		GPIOC->ODR = ppixel[119];
		GPIOC->ODR = ppixel[119];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[120];
		GPIOC->ODR = ppixel[120];

		GPIOC->ODR = ppixel[121];
		GPIOC->ODR = ppixel[121];

		GPIOC->ODR = ppixel[122];
		GPIOC->ODR = ppixel[122];

		GPIOC->ODR = ppixel[123];
		GPIOC->ODR = ppixel[123];

		GPIOC->ODR = ppixel[124];
		GPIOC->ODR = ppixel[124];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[125];
		GPIOC->ODR = ppixel[125];

		GPIOC->ODR = ppixel[126];
		GPIOC->ODR = ppixel[126];

		GPIOC->ODR = ppixel[127];
		GPIOC->ODR = ppixel[127];

		GPIOC->ODR = ppixel[128];
		GPIOC->ODR = ppixel[128];

		GPIOC->ODR = ppixel[129];
		GPIOC->ODR = ppixel[129];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[130];
		GPIOC->ODR = ppixel[130];

		GPIOC->ODR = ppixel[131];
		GPIOC->ODR = ppixel[131];

		GPIOC->ODR = ppixel[132];
		GPIOC->ODR = ppixel[132];

		GPIOC->ODR = ppixel[133];
		GPIOC->ODR = ppixel[133];

		GPIOC->ODR = ppixel[134];
		GPIOC->ODR = ppixel[134];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[135];
		GPIOC->ODR = ppixel[135];

		GPIOC->ODR = ppixel[136];
		GPIOC->ODR = ppixel[136];

		GPIOC->ODR = ppixel[137];
		GPIOC->ODR = ppixel[137];

		GPIOC->ODR = ppixel[138];
		GPIOC->ODR = ppixel[138];

		GPIOC->ODR = ppixel[139];
		GPIOC->ODR = ppixel[139];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[140];
		GPIOC->ODR = ppixel[140];

		GPIOC->ODR = ppixel[141];
		GPIOC->ODR = ppixel[141];

		GPIOC->ODR = ppixel[142];
		GPIOC->ODR = ppixel[142];

		GPIOC->ODR = ppixel[143];
		GPIOC->ODR = ppixel[143];

		GPIOC->ODR = ppixel[144];
		GPIOC->ODR = ppixel[144];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[145];
		GPIOC->ODR = ppixel[145];

		GPIOC->ODR = ppixel[146];
		GPIOC->ODR = ppixel[146];

		GPIOC->ODR = ppixel[147];
		GPIOC->ODR = ppixel[147];

		GPIOC->ODR = ppixel[148];
		GPIOC->ODR = ppixel[148];

		GPIOC->ODR = ppixel[149];
		GPIOC->ODR = ppixel[149];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[198];
		GPIOC->ODR = Score_val[198];

		GPIOC->ODR = Score_val[199];
		GPIOC->ODR = Score_val[199];

		GPIOC->ODR = Score_val[200];
		GPIOC->ODR = Score_val[200];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[201];
		GPIOC->ODR = Score_val[201];

		GPIOC->ODR = Score_val[202];
		GPIOC->ODR = Score_val[202];

		GPIOC->ODR = Score_val[203];
		GPIOC->ODR = Score_val[203];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[204];
		GPIOC->ODR = Score_val[204];

		GPIOC->ODR = Score_val[205];
		GPIOC->ODR = Score_val[205];

		GPIOC->ODR = Score_val[206];
		GPIOC->ODR = Score_val[206];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 255 ... 259: //2020d


		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF; // dot
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[150];
		GPIOC->ODR = ppixel[150];

		GPIOC->ODR = ppixel[151];
		GPIOC->ODR = ppixel[151];

		GPIOC->ODR = ppixel[152];
		GPIOC->ODR = ppixel[152];

		GPIOC->ODR = ppixel[153];
		GPIOC->ODR = ppixel[153];

		GPIOC->ODR = ppixel[154];
		GPIOC->ODR = ppixel[154];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[155];
		GPIOC->ODR = ppixel[155];

		GPIOC->ODR = ppixel[156];
		GPIOC->ODR = ppixel[156];

		GPIOC->ODR = ppixel[157];
		GPIOC->ODR = ppixel[157];

		GPIOC->ODR = ppixel[158];
		GPIOC->ODR = ppixel[158];

		GPIOC->ODR = ppixel[159];
		GPIOC->ODR = ppixel[159];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[160];
		GPIOC->ODR = ppixel[160];

		GPIOC->ODR = ppixel[161];
		GPIOC->ODR = ppixel[161];

		GPIOC->ODR = ppixel[162];
		GPIOC->ODR = ppixel[162];

		GPIOC->ODR = ppixel[163];
		GPIOC->ODR = ppixel[163];

		GPIOC->ODR = ppixel[164];
		GPIOC->ODR = ppixel[164];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[165];
		GPIOC->ODR = ppixel[165];

		GPIOC->ODR = ppixel[166];
		GPIOC->ODR = ppixel[166];

		GPIOC->ODR = ppixel[167];
		GPIOC->ODR = ppixel[167];

		GPIOC->ODR = ppixel[168];
		GPIOC->ODR = ppixel[168];

		GPIOC->ODR = ppixel[169];
		GPIOC->ODR = ppixel[169];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[170];
		GPIOC->ODR = ppixel[170];

		GPIOC->ODR = ppixel[171];
		GPIOC->ODR = ppixel[171];

		GPIOC->ODR = ppixel[172];
		GPIOC->ODR = ppixel[172];

		GPIOC->ODR = ppixel[173];
		GPIOC->ODR = ppixel[173];

		GPIOC->ODR = ppixel[174];
		GPIOC->ODR = ppixel[174];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[175];
		GPIOC->ODR = ppixel[175];

		GPIOC->ODR = ppixel[176];
		GPIOC->ODR = ppixel[176];

		GPIOC->ODR = ppixel[177];
		GPIOC->ODR = ppixel[177];

		GPIOC->ODR = ppixel[178];
		GPIOC->ODR = ppixel[178];

		GPIOC->ODR = ppixel[179];
		GPIOC->ODR = ppixel[179];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[180];
		GPIOC->ODR = ppixel[180];

		GPIOC->ODR = ppixel[181];
		GPIOC->ODR = ppixel[181];

		GPIOC->ODR = ppixel[182];
		GPIOC->ODR = ppixel[182];

		GPIOC->ODR = ppixel[183];
		GPIOC->ODR = ppixel[183];

		GPIOC->ODR = ppixel[184];
		GPIOC->ODR = ppixel[184];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[185];
		GPIOC->ODR = ppixel[185];

		GPIOC->ODR = ppixel[186];
		GPIOC->ODR = ppixel[186];

		GPIOC->ODR = ppixel[187];
		GPIOC->ODR = ppixel[187];

		GPIOC->ODR = ppixel[188];
		GPIOC->ODR = ppixel[188];

		GPIOC->ODR = ppixel[189];
		GPIOC->ODR = ppixel[189];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[190];
		GPIOC->ODR = ppixel[190];

		GPIOC->ODR = ppixel[191];
		GPIOC->ODR = ppixel[191];

		GPIOC->ODR = ppixel[192];
		GPIOC->ODR = ppixel[192];

		GPIOC->ODR = ppixel[193];
		GPIOC->ODR = ppixel[193];

		GPIOC->ODR = ppixel[194];
		GPIOC->ODR = ppixel[194];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[195];
		GPIOC->ODR = ppixel[195];

		GPIOC->ODR = ppixel[196];
		GPIOC->ODR = ppixel[196];

		GPIOC->ODR = ppixel[197];
		GPIOC->ODR = ppixel[197];

		GPIOC->ODR = ppixel[198];
		GPIOC->ODR = ppixel[198];

		GPIOC->ODR = ppixel[199];
		GPIOC->ODR = ppixel[199];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[207];
		GPIOC->ODR = Score_val[207];

		GPIOC->ODR = Score_val[208];
		GPIOC->ODR = Score_val[208];

		GPIOC->ODR = Score_val[209];
		GPIOC->ODR = Score_val[209];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[210];
		GPIOC->ODR = Score_val[210];

		GPIOC->ODR = Score_val[211];
		GPIOC->ODR = Score_val[211];

		GPIOC->ODR = Score_val[212];
		GPIOC->ODR = Score_val[212];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[213];
		GPIOC->ODR = Score_val[213];

		GPIOC->ODR = Score_val[214];
		GPIOC->ODR = Score_val[214];

		GPIOC->ODR = Score_val[215];
		GPIOC->ODR = Score_val[215];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 260 ... 264: //2020e

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green; // dot
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[200];
		GPIOC->ODR = ppixel[200];

		GPIOC->ODR = ppixel[201];
		GPIOC->ODR = ppixel[201];

		GPIOC->ODR = ppixel[202];
		GPIOC->ODR = ppixel[202];

		GPIOC->ODR = ppixel[203];
		GPIOC->ODR = ppixel[203];

		GPIOC->ODR = ppixel[204];
		GPIOC->ODR = ppixel[204];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[205];
		GPIOC->ODR = ppixel[205];

		GPIOC->ODR = ppixel[206];
		GPIOC->ODR = ppixel[206];

		GPIOC->ODR = ppixel[207];
		GPIOC->ODR = ppixel[207];

		GPIOC->ODR = ppixel[208];
		GPIOC->ODR = ppixel[208];

		GPIOC->ODR = ppixel[209];
		GPIOC->ODR = ppixel[209];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[210];
		GPIOC->ODR = ppixel[210];

		GPIOC->ODR = ppixel[211];
		GPIOC->ODR = ppixel[211];

		GPIOC->ODR = ppixel[212];
		GPIOC->ODR = ppixel[212];

		GPIOC->ODR = ppixel[213];
		GPIOC->ODR = ppixel[213];

		GPIOC->ODR = ppixel[214];
		GPIOC->ODR = ppixel[214];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[215];
		GPIOC->ODR = ppixel[215];

		GPIOC->ODR = ppixel[216];
		GPIOC->ODR = ppixel[216];

		GPIOC->ODR = ppixel[217];
		GPIOC->ODR = ppixel[217];

		GPIOC->ODR = ppixel[218];
		GPIOC->ODR = ppixel[218];

		GPIOC->ODR = ppixel[219];
		GPIOC->ODR = ppixel[219];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[220];
		GPIOC->ODR = ppixel[220];

		GPIOC->ODR = ppixel[221];
		GPIOC->ODR = ppixel[221];

		GPIOC->ODR = ppixel[222];
		GPIOC->ODR = ppixel[222];

		GPIOC->ODR = ppixel[223];
		GPIOC->ODR = ppixel[223];

		GPIOC->ODR = ppixel[224];
		GPIOC->ODR = ppixel[224];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[225];
		GPIOC->ODR = ppixel[225];

		GPIOC->ODR = ppixel[226];
		GPIOC->ODR = ppixel[226];

		GPIOC->ODR = ppixel[227];
		GPIOC->ODR = ppixel[227];

		GPIOC->ODR = ppixel[228];
		GPIOC->ODR = ppixel[228];

		GPIOC->ODR = ppixel[229];
		GPIOC->ODR = ppixel[229];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[230];
		GPIOC->ODR = ppixel[230];

		GPIOC->ODR = ppixel[231];
		GPIOC->ODR = ppixel[231];

		GPIOC->ODR = ppixel[232];
		GPIOC->ODR = ppixel[232];

		GPIOC->ODR = ppixel[233];
		GPIOC->ODR = ppixel[233];

		GPIOC->ODR = ppixel[234];
		GPIOC->ODR = ppixel[234];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[235];
		GPIOC->ODR = ppixel[235];

		GPIOC->ODR = ppixel[236];
		GPIOC->ODR = ppixel[236];

		GPIOC->ODR = ppixel[237];
		GPIOC->ODR = ppixel[237];

		GPIOC->ODR = ppixel[238];
		GPIOC->ODR = ppixel[238];

		GPIOC->ODR = ppixel[239];
		GPIOC->ODR = ppixel[239];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[240];
		GPIOC->ODR = ppixel[240];

		GPIOC->ODR = ppixel[241];
		GPIOC->ODR = ppixel[241];

		GPIOC->ODR = ppixel[242];
		GPIOC->ODR = ppixel[242];

		GPIOC->ODR = ppixel[243];
		GPIOC->ODR = ppixel[243];

		GPIOC->ODR = ppixel[244];
		GPIOC->ODR = ppixel[244];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = ppixel[245];
		GPIOC->ODR = ppixel[245];

		GPIOC->ODR = ppixel[246];
		GPIOC->ODR = ppixel[246];

		GPIOC->ODR = ppixel[247];
		GPIOC->ODR = ppixel[247];

		GPIOC->ODR = ppixel[248];
		GPIOC->ODR = ppixel[248];

		GPIOC->ODR = ppixel[249];
		GPIOC->ODR = ppixel[249];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[216];
		GPIOC->ODR = Score_val[216];

		GPIOC->ODR = Score_val[217];
		GPIOC->ODR = Score_val[217];

		GPIOC->ODR = Score_val[218];
		GPIOC->ODR = Score_val[218];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[219];
		GPIOC->ODR = Score_val[219];

		GPIOC->ODR = Score_val[220];
		GPIOC->ODR = Score_val[220];

		GPIOC->ODR = Score_val[221];
		GPIOC->ODR = Score_val[221];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Score_val[222];
		GPIOC->ODR = Score_val[222];

		GPIOC->ODR = Score_val[223];
		GPIOC->ODR = Score_val[223];

		GPIOC->ODR = Score_val[224];
		GPIOC->ODR = Score_val[224];

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = Deep_Green;
		GPIOC->ODR = Deep_Green;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		break;
		case 265 ... 269:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		while(waste_of_time<50)
		{
			GPIOC->ODR = Deep_Green;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = White_OFF;
		break;
		case 270 ... 270:
		GPIOC->ODR = White_OFF;
		break;
		case 271 ... 274:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		while(waste_of_time<50)
		{
			GPIOC->ODR = Deep_Green;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = White_OFF;
		break;
		}
		break;
		break;
	}//2020a switch
		} // visko piesimo switch
	break; // trecio page break;
	} // uzdaro switch(page)
} // void uzdaro


//	case 275 ... 309: //sixes
//	switch(Lines)
//	{
//	case 275 ... 279: //66a
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[250];
//	GPIOC->ODR = ppixel[250];
//
//	GPIOC->ODR = ppixel[251];
//	GPIOC->ODR = ppixel[251];
//
//	GPIOC->ODR = ppixel[252];
//	GPIOC->ODR = ppixel[252];
//
//	GPIOC->ODR = ppixel[253];
//	GPIOC->ODR = ppixel[253];
//
//	GPIOC->ODR = ppixel[254];
//	GPIOC->ODR = ppixel[254];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[255];
//	GPIOC->ODR = ppixel[255];
//
//	GPIOC->ODR = ppixel[256];
//	GPIOC->ODR = ppixel[256];
//
//	GPIOC->ODR = ppixel[257];
//	GPIOC->ODR = ppixel[257];
//
//	GPIOC->ODR = ppixel[258];
//	GPIOC->ODR = ppixel[258];
//
//	GPIOC->ODR = ppixel[259];
//	GPIOC->ODR = ppixel[259];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[260];
//	GPIOC->ODR = ppixel[260];
//
//	GPIOC->ODR = ppixel[261];
//	GPIOC->ODR = ppixel[261];
//
//	GPIOC->ODR = ppixel[262];
//	GPIOC->ODR = ppixel[262];
//
//	GPIOC->ODR = ppixel[263];
//	GPIOC->ODR = ppixel[263];
//
//	GPIOC->ODR = ppixel[264];
//	GPIOC->ODR = ppixel[264];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[265];
//	GPIOC->ODR = ppixel[265];
//
//	GPIOC->ODR = ppixel[266];
//	GPIOC->ODR = ppixel[266];
//
//	GPIOC->ODR = ppixel[267];
//	GPIOC->ODR = ppixel[267];
//
//	GPIOC->ODR = ppixel[268];
//	GPIOC->ODR = ppixel[268];
//
//	GPIOC->ODR = ppixel[269];
//	GPIOC->ODR = ppixel[269];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[270];
//	GPIOC->ODR = ppixel[270];
//
//	GPIOC->ODR = ppixel[271];
//	GPIOC->ODR = ppixel[271];
//
//	GPIOC->ODR = ppixel[272];
//	GPIOC->ODR = ppixel[272];
//
//	GPIOC->ODR = ppixel[273];
//	GPIOC->ODR = ppixel[273];
//
//	GPIOC->ODR = ppixel[274];
//	GPIOC->ODR = ppixel[274];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[275];
//	GPIOC->ODR = ppixel[275];
//
//	GPIOC->ODR = ppixel[276];
//	GPIOC->ODR = ppixel[276];
//
//	GPIOC->ODR = ppixel[277];
//	GPIOC->ODR = ppixel[277];
//
//	GPIOC->ODR = ppixel[278];
//	GPIOC->ODR = ppixel[278];
//
//	GPIOC->ODR = ppixel[279];
//	GPIOC->ODR = ppixel[279];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[280];
//	GPIOC->ODR = ppixel[280];
//
//	GPIOC->ODR = ppixel[281];
//	GPIOC->ODR = ppixel[281];
//
//	GPIOC->ODR = ppixel[282];
//	GPIOC->ODR = ppixel[282];
//
//	GPIOC->ODR = ppixel[283];
//	GPIOC->ODR = ppixel[283];
//
//	GPIOC->ODR = ppixel[284];
//	GPIOC->ODR = ppixel[284];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[285];
//	GPIOC->ODR = ppixel[285];
//
//	GPIOC->ODR = ppixel[286];
//	GPIOC->ODR = ppixel[286];
//
//	GPIOC->ODR = ppixel[287];
//	GPIOC->ODR = ppixel[287];
//
//	GPIOC->ODR = ppixel[288];
//	GPIOC->ODR = ppixel[288];
//
//	GPIOC->ODR = ppixel[289];
//	GPIOC->ODR = ppixel[289];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[290];
//	GPIOC->ODR = ppixel[290];
//
//	GPIOC->ODR = ppixel[291];
//	GPIOC->ODR = ppixel[291];
//
//	GPIOC->ODR = ppixel[292];
//	GPIOC->ODR = ppixel[292];
//
//	GPIOC->ODR = ppixel[293];
//	GPIOC->ODR = ppixel[293];
//
//	GPIOC->ODR = ppixel[294];
//	GPIOC->ODR = ppixel[294];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[295];
//	GPIOC->ODR = ppixel[295];
//
//	GPIOC->ODR = ppixel[296];
//	GPIOC->ODR = ppixel[296];
//
//	GPIOC->ODR = ppixel[297];
//	GPIOC->ODR = ppixel[297];
//
//	GPIOC->ODR = ppixel[298];
//	GPIOC->ODR = ppixel[298];
//
//	GPIOC->ODR = ppixel[299];
//	GPIOC->ODR = ppixel[299];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 280 ... 284: //44b
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[300];
//	GPIOC->ODR = ppixel[300];
//
//	GPIOC->ODR = ppixel[301];
//	GPIOC->ODR = ppixel[301];
//
//	GPIOC->ODR = ppixel[302];
//	GPIOC->ODR = ppixel[302];
//
//	GPIOC->ODR = ppixel[303];
//	GPIOC->ODR = ppixel[303];
//
//	GPIOC->ODR = ppixel[304];
//	GPIOC->ODR = ppixel[304];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[305];
//	GPIOC->ODR = ppixel[305];
//
//	GPIOC->ODR = ppixel[306];
//	GPIOC->ODR = ppixel[306];
//
//	GPIOC->ODR = ppixel[307];
//	GPIOC->ODR = ppixel[307];
//
//	GPIOC->ODR = ppixel[308];
//	GPIOC->ODR = ppixel[308];
//
//	GPIOC->ODR = ppixel[309];
//	GPIOC->ODR = ppixel[309];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[310];
//	GPIOC->ODR = ppixel[310];
//
//	GPIOC->ODR = ppixel[311];
//	GPIOC->ODR = ppixel[311];
//
//	GPIOC->ODR = ppixel[312];
//	GPIOC->ODR = ppixel[312];
//
//	GPIOC->ODR = ppixel[313];
//	GPIOC->ODR = ppixel[313];
//
//	GPIOC->ODR = ppixel[314];
//	GPIOC->ODR = ppixel[314];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[315];
//	GPIOC->ODR = ppixel[315];
//
//	GPIOC->ODR = ppixel[316];
//	GPIOC->ODR = ppixel[316];
//
//	GPIOC->ODR = ppixel[317];
//	GPIOC->ODR = ppixel[317];
//
//	GPIOC->ODR = ppixel[318];
//	GPIOC->ODR = ppixel[318];
//
//	GPIOC->ODR = ppixel[319];
//	GPIOC->ODR = ppixel[319];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[320];
//	GPIOC->ODR = ppixel[320];
//
//	GPIOC->ODR = ppixel[321];
//	GPIOC->ODR = ppixel[321];
//
//	GPIOC->ODR = ppixel[322];
//	GPIOC->ODR = ppixel[322];
//
//	GPIOC->ODR = ppixel[323];
//	GPIOC->ODR = ppixel[323];
//
//	GPIOC->ODR = ppixel[324];
//	GPIOC->ODR = ppixel[324];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[325];
//	GPIOC->ODR = ppixel[325];
//
//	GPIOC->ODR = ppixel[326];
//	GPIOC->ODR = ppixel[326];
//
//	GPIOC->ODR = ppixel[327];
//	GPIOC->ODR = ppixel[327];
//
//	GPIOC->ODR = ppixel[328];
//	GPIOC->ODR = ppixel[328];
//
//	GPIOC->ODR = ppixel[329];
//	GPIOC->ODR = ppixel[329];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[330];
//	GPIOC->ODR = ppixel[330];
//
//	GPIOC->ODR = ppixel[331];
//	GPIOC->ODR = ppixel[331];
//
//	GPIOC->ODR = ppixel[332];
//	GPIOC->ODR = ppixel[332];
//
//	GPIOC->ODR = ppixel[333];
//	GPIOC->ODR = ppixel[333];
//
//	GPIOC->ODR = ppixel[334];
//	GPIOC->ODR = ppixel[334];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[335];
//	GPIOC->ODR = ppixel[335];
//
//	GPIOC->ODR = ppixel[336];
//	GPIOC->ODR = ppixel[336];
//
//	GPIOC->ODR = ppixel[337];
//	GPIOC->ODR = ppixel[337];
//
//	GPIOC->ODR = ppixel[338];
//	GPIOC->ODR = ppixel[338];
//
//	GPIOC->ODR = ppixel[339];
//	GPIOC->ODR = ppixel[339];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[340];
//	GPIOC->ODR = ppixel[340];
//
//	GPIOC->ODR = ppixel[341];
//	GPIOC->ODR = ppixel[341];
//
//	GPIOC->ODR = ppixel[342];
//	GPIOC->ODR = ppixel[342];
//
//	GPIOC->ODR = ppixel[343];
//	GPIOC->ODR = ppixel[343];
//
//	GPIOC->ODR = ppixel[344];
//	GPIOC->ODR = ppixel[344];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[345];
//	GPIOC->ODR = ppixel[345];
//
//	GPIOC->ODR = ppixel[346];
//	GPIOC->ODR = ppixel[346];
//
//	GPIOC->ODR = ppixel[347];
//	GPIOC->ODR = ppixel[347];
//
//	GPIOC->ODR = ppixel[348];
//	GPIOC->ODR = ppixel[348];
//
//	GPIOC->ODR = ppixel[349];
//	GPIOC->ODR = ppixel[349];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 285 ... 289: //66c
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[350];
//	GPIOC->ODR = ppixel[350];
//
//	GPIOC->ODR = ppixel[351];
//	GPIOC->ODR = ppixel[351];
//
//	GPIOC->ODR = ppixel[352];
//	GPIOC->ODR = ppixel[352];
//
//	GPIOC->ODR = ppixel[353];
//	GPIOC->ODR = ppixel[353];
//
//	GPIOC->ODR = ppixel[354];
//	GPIOC->ODR = ppixel[354];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[355];
//	GPIOC->ODR = ppixel[355];
//
//	GPIOC->ODR = ppixel[356];
//	GPIOC->ODR = ppixel[356];
//
//	GPIOC->ODR = ppixel[357];
//	GPIOC->ODR = ppixel[357];
//
//	GPIOC->ODR = ppixel[358];
//	GPIOC->ODR = ppixel[358];
//
//	GPIOC->ODR = ppixel[359];
//	GPIOC->ODR = ppixel[359];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[360];
//	GPIOC->ODR = ppixel[360];
//
//	GPIOC->ODR = ppixel[361];
//	GPIOC->ODR = ppixel[361];
//
//	GPIOC->ODR = ppixel[362];
//	GPIOC->ODR = ppixel[362];
//
//	GPIOC->ODR = ppixel[363];
//	GPIOC->ODR = ppixel[363];
//
//	GPIOC->ODR = ppixel[364];
//	GPIOC->ODR = ppixel[364];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[365];
//	GPIOC->ODR = ppixel[365];
//
//	GPIOC->ODR = ppixel[366];
//	GPIOC->ODR = ppixel[366];
//
//	GPIOC->ODR = ppixel[367];
//	GPIOC->ODR = ppixel[367];
//
//	GPIOC->ODR = ppixel[368];
//	GPIOC->ODR = ppixel[368];
//
//	GPIOC->ODR = ppixel[369];
//	GPIOC->ODR = ppixel[369];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[370];
//	GPIOC->ODR = ppixel[370];
//
//	GPIOC->ODR = ppixel[371];
//	GPIOC->ODR = ppixel[371];
//
//	GPIOC->ODR = ppixel[372];
//	GPIOC->ODR = ppixel[372];
//
//	GPIOC->ODR = ppixel[373];
//	GPIOC->ODR = ppixel[373];
//
//	GPIOC->ODR = ppixel[374];
//	GPIOC->ODR = ppixel[374];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[375];
//	GPIOC->ODR = ppixel[375];
//
//	GPIOC->ODR = ppixel[376];
//	GPIOC->ODR = ppixel[376];
//
//	GPIOC->ODR = ppixel[377];
//	GPIOC->ODR = ppixel[377];
//
//	GPIOC->ODR = ppixel[378];
//	GPIOC->ODR = ppixel[378];
//
//	GPIOC->ODR = ppixel[379];
//	GPIOC->ODR = ppixel[379];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[380];
//	GPIOC->ODR = ppixel[380];
//
//	GPIOC->ODR = ppixel[381];
//	GPIOC->ODR = ppixel[381];
//
//	GPIOC->ODR = ppixel[382];
//	GPIOC->ODR = ppixel[382];
//
//	GPIOC->ODR = ppixel[383];
//	GPIOC->ODR = ppixel[383];
//
//	GPIOC->ODR = ppixel[384];
//	GPIOC->ODR = ppixel[384];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[385];
//	GPIOC->ODR = ppixel[385];
//
//	GPIOC->ODR = ppixel[386];
//	GPIOC->ODR = ppixel[386];
//
//	GPIOC->ODR = ppixel[387];
//	GPIOC->ODR = ppixel[387];
//
//	GPIOC->ODR = ppixel[388];
//	GPIOC->ODR = ppixel[388];
//
//	GPIOC->ODR = ppixel[389];
//	GPIOC->ODR = ppixel[389];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[390];
//	GPIOC->ODR = ppixel[390];
//
//	GPIOC->ODR = ppixel[391];
//	GPIOC->ODR = ppixel[391];
//
//	GPIOC->ODR = ppixel[392];
//	GPIOC->ODR = ppixel[392];
//
//	GPIOC->ODR = ppixel[393];
//	GPIOC->ODR = ppixel[393];
//
//	GPIOC->ODR = ppixel[394];
//	GPIOC->ODR = ppixel[394];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[395];
//	GPIOC->ODR = ppixel[395];
//
//	GPIOC->ODR = ppixel[396];
//	GPIOC->ODR = ppixel[396];
//
//	GPIOC->ODR = ppixel[397];
//	GPIOC->ODR = ppixel[397];
//
//	GPIOC->ODR = ppixel[398];
//	GPIOC->ODR = ppixel[398];
//
//	GPIOC->ODR = ppixel[399];
//	GPIOC->ODR = ppixel[399];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 290 ... 294: // 66d
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[400];
//	GPIOC->ODR = ppixel[400];
//
//	GPIOC->ODR = ppixel[401];
//	GPIOC->ODR = ppixel[401];
//
//	GPIOC->ODR = ppixel[402];
//	GPIOC->ODR = ppixel[402];
//
//	GPIOC->ODR = ppixel[403];
//	GPIOC->ODR = ppixel[403];
//
//	GPIOC->ODR = ppixel[404];
//	GPIOC->ODR = ppixel[404];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[405];
//	GPIOC->ODR = ppixel[405];
//
//	GPIOC->ODR = ppixel[406];
//	GPIOC->ODR = ppixel[406];
//
//	GPIOC->ODR = ppixel[407];
//	GPIOC->ODR = ppixel[407];
//
//	GPIOC->ODR = ppixel[408];
//	GPIOC->ODR = ppixel[408];
//
//	GPIOC->ODR = ppixel[409];
//	GPIOC->ODR = ppixel[409];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[410];
//	GPIOC->ODR = ppixel[410];
//
//	GPIOC->ODR = ppixel[411];
//	GPIOC->ODR = ppixel[411];
//
//	GPIOC->ODR = ppixel[412];
//	GPIOC->ODR = ppixel[412];
//
//	GPIOC->ODR = ppixel[413];
//	GPIOC->ODR = ppixel[413];
//
//	GPIOC->ODR = ppixel[414];
//	GPIOC->ODR = ppixel[414];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[415];
//	GPIOC->ODR = ppixel[415];
//
//	GPIOC->ODR = ppixel[416];
//	GPIOC->ODR = ppixel[416];
//
//	GPIOC->ODR = ppixel[417];
//	GPIOC->ODR = ppixel[417];
//
//	GPIOC->ODR = ppixel[418];
//	GPIOC->ODR = ppixel[418];
//
//	GPIOC->ODR = ppixel[419];
//	GPIOC->ODR = ppixel[419];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[420];
//	GPIOC->ODR = ppixel[420];
//
//	GPIOC->ODR = ppixel[421];
//	GPIOC->ODR = ppixel[421];
//
//	GPIOC->ODR = ppixel[422];
//	GPIOC->ODR = ppixel[422];
//
//	GPIOC->ODR = ppixel[423];
//	GPIOC->ODR = ppixel[423];
//
//	GPIOC->ODR = ppixel[424];
//	GPIOC->ODR = ppixel[424];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[425];
//	GPIOC->ODR = ppixel[425];
//
//	GPIOC->ODR = ppixel[426];
//	GPIOC->ODR = ppixel[426];
//
//	GPIOC->ODR = ppixel[427];
//	GPIOC->ODR = ppixel[427];
//
//	GPIOC->ODR = ppixel[428];
//	GPIOC->ODR = ppixel[428];
//
//	GPIOC->ODR = ppixel[429];
//	GPIOC->ODR = ppixel[429];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[430];
//	GPIOC->ODR = ppixel[430];
//
//	GPIOC->ODR = ppixel[431];
//	GPIOC->ODR = ppixel[431];
//
//	GPIOC->ODR = ppixel[432];
//	GPIOC->ODR = ppixel[432];
//
//	GPIOC->ODR = ppixel[433];
//	GPIOC->ODR = ppixel[433];
//
//	GPIOC->ODR = ppixel[434];
//	GPIOC->ODR = ppixel[434];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[435];
//	GPIOC->ODR = ppixel[435];
//
//	GPIOC->ODR = ppixel[436];
//	GPIOC->ODR = ppixel[436];
//
//	GPIOC->ODR = ppixel[437];
//	GPIOC->ODR = ppixel[437];
//
//	GPIOC->ODR = ppixel[438];
//	GPIOC->ODR = ppixel[438];
//
//	GPIOC->ODR = ppixel[439];
//	GPIOC->ODR = ppixel[439];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[440];
//	GPIOC->ODR = ppixel[440];
//
//	GPIOC->ODR = ppixel[441];
//	GPIOC->ODR = ppixel[441];
//
//	GPIOC->ODR = ppixel[442];
//	GPIOC->ODR = ppixel[442];
//
//	GPIOC->ODR = ppixel[443];
//	GPIOC->ODR = ppixel[443];
//
//	GPIOC->ODR = ppixel[444];
//	GPIOC->ODR = ppixel[444];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[445];
//	GPIOC->ODR = ppixel[445];
//
//	GPIOC->ODR = ppixel[446];
//	GPIOC->ODR = ppixel[446];
//
//	GPIOC->ODR = ppixel[447];
//	GPIOC->ODR = ppixel[447];
//
//	GPIOC->ODR = ppixel[448];
//	GPIOC->ODR = ppixel[448];
//
//	GPIOC->ODR = ppixel[449];
//	GPIOC->ODR = ppixel[449];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 295 ... 299: //66e
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[450];
//	GPIOC->ODR = ppixel[450];
//
//	GPIOC->ODR = ppixel[451];
//	GPIOC->ODR = ppixel[451];
//
//	GPIOC->ODR = ppixel[452];
//	GPIOC->ODR = ppixel[452];
//
//	GPIOC->ODR = ppixel[453];
//	GPIOC->ODR = ppixel[453];
//
//	GPIOC->ODR = ppixel[454];
//	GPIOC->ODR = ppixel[454];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[455];
//	GPIOC->ODR = ppixel[455];
//
//	GPIOC->ODR = ppixel[456];
//	GPIOC->ODR = ppixel[456];
//
//	GPIOC->ODR = ppixel[457];
//	GPIOC->ODR = ppixel[457];
//
//	GPIOC->ODR = ppixel[458];
//	GPIOC->ODR = ppixel[458];
//
//	GPIOC->ODR = ppixel[459];
//	GPIOC->ODR = ppixel[459];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[460];
//	GPIOC->ODR = ppixel[460];
//
//	GPIOC->ODR = ppixel[461];
//	GPIOC->ODR = ppixel[461];
//
//	GPIOC->ODR = ppixel[462];
//	GPIOC->ODR = ppixel[462];
//
//	GPIOC->ODR = ppixel[463];
//	GPIOC->ODR = ppixel[463];
//
//	GPIOC->ODR = ppixel[464];
//	GPIOC->ODR = ppixel[464];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[465];
//	GPIOC->ODR = ppixel[465];
//
//	GPIOC->ODR = ppixel[466];
//	GPIOC->ODR = ppixel[466];
//
//	GPIOC->ODR = ppixel[467];
//	GPIOC->ODR = ppixel[467];
//
//	GPIOC->ODR = ppixel[468];
//	GPIOC->ODR = ppixel[468];
//
//	GPIOC->ODR = ppixel[469];
//	GPIOC->ODR = ppixel[469];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[470];
//	GPIOC->ODR = ppixel[470];
//
//	GPIOC->ODR = ppixel[471];
//	GPIOC->ODR = ppixel[471];
//
//	GPIOC->ODR = ppixel[472];
//	GPIOC->ODR = ppixel[472];
//
//	GPIOC->ODR = ppixel[473];
//	GPIOC->ODR = ppixel[473];
//
//	GPIOC->ODR = ppixel[474];
//	GPIOC->ODR = ppixel[474];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[475];
//	GPIOC->ODR = ppixel[475];
//
//	GPIOC->ODR = ppixel[476];
//	GPIOC->ODR = ppixel[476];
//
//	GPIOC->ODR = ppixel[477];
//	GPIOC->ODR = ppixel[477];
//
//	GPIOC->ODR = ppixel[478];
//	GPIOC->ODR = ppixel[478];
//
//	GPIOC->ODR = ppixel[479];
//	GPIOC->ODR = ppixel[479];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[480];
//	GPIOC->ODR = ppixel[480];
//
//	GPIOC->ODR = ppixel[481];
//	GPIOC->ODR = ppixel[481];
//
//	GPIOC->ODR = ppixel[482];
//	GPIOC->ODR = ppixel[482];
//
//	GPIOC->ODR = ppixel[483];
//	GPIOC->ODR = ppixel[483];
//
//	GPIOC->ODR = ppixel[484];
//	GPIOC->ODR = ppixel[484];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[485];
//	GPIOC->ODR = ppixel[485];
//
//	GPIOC->ODR = ppixel[486];
//	GPIOC->ODR = ppixel[486];
//
//	GPIOC->ODR = ppixel[487];
//	GPIOC->ODR = ppixel[487];
//
//	GPIOC->ODR = ppixel[488];
//	GPIOC->ODR = ppixel[488];
//
//	GPIOC->ODR = ppixel[489];
//	GPIOC->ODR = ppixel[489];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[490];
//	GPIOC->ODR = ppixel[490];
//
//	GPIOC->ODR = ppixel[491];
//	GPIOC->ODR = ppixel[491];
//
//	GPIOC->ODR = ppixel[492];
//	GPIOC->ODR = ppixel[492];
//
//	GPIOC->ODR = ppixel[493];
//	GPIOC->ODR = ppixel[493];
//
//	GPIOC->ODR = ppixel[494];
//	GPIOC->ODR = ppixel[494];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[495];
//	GPIOC->ODR = ppixel[495];
//
//	GPIOC->ODR = ppixel[496];
//	GPIOC->ODR = ppixel[496];
//
//	GPIOC->ODR = ppixel[497];
//	GPIOC->ODR = ppixel[497];
//
//	GPIOC->ODR = ppixel[498];
//	GPIOC->ODR = ppixel[498];
//
//	GPIOC->ODR = ppixel[499];
//	GPIOC->ODR = ppixel[499];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 300 ... 304:
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	while(waste_of_time<50)
//	{
//		GPIOC->ODR = White_ON;
//		waste_of_time++;
//	}
//	waste_of_time = 0;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 305 ... 305:
//	GPIOC->ODR = White_OFF;
//	break;
//	case 306 ... 309:
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	while(waste_of_time<50)
//	{
//		GPIOC->ODR = White_ON;
//		waste_of_time++;
//	}
//	waste_of_time = 0;
//	GPIOC->ODR = White_OFF;
//	break;
//	}
//break;
//
//	case 310 ... 344: //sevens
//	switch(Lines)
//	{
//	case 310 ... 314:
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF; // dot
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[500];
//	GPIOC->ODR = ppixel[500];
//
//	GPIOC->ODR = ppixel[501];
//	GPIOC->ODR = ppixel[501];
//
//	GPIOC->ODR = ppixel[502];
//	GPIOC->ODR = ppixel[502];
//
//	GPIOC->ODR = ppixel[503];
//	GPIOC->ODR = ppixel[503];
//
//	GPIOC->ODR = ppixel[504];
//	GPIOC->ODR = ppixel[504];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[505];
//	GPIOC->ODR = ppixel[505];
//
//	GPIOC->ODR = ppixel[506];
//	GPIOC->ODR = ppixel[506];
//
//	GPIOC->ODR = ppixel[507];
//	GPIOC->ODR = ppixel[507];
//
//	GPIOC->ODR = ppixel[508];
//	GPIOC->ODR = ppixel[508];
//
//	GPIOC->ODR = ppixel[509];
//	GPIOC->ODR = ppixel[509];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[510];
//	GPIOC->ODR = ppixel[510];
//
//	GPIOC->ODR = ppixel[511];
//	GPIOC->ODR = ppixel[511];
//
//	GPIOC->ODR = ppixel[512];
//	GPIOC->ODR = ppixel[512];
//
//	GPIOC->ODR = ppixel[513];
//	GPIOC->ODR = ppixel[513];
//
//	GPIOC->ODR = ppixel[514];
//	GPIOC->ODR = ppixel[514];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[515];
//	GPIOC->ODR = ppixel[515];
//
//	GPIOC->ODR = ppixel[516];
//	GPIOC->ODR = ppixel[516];
//
//	GPIOC->ODR = ppixel[517];
//	GPIOC->ODR = ppixel[517];
//
//	GPIOC->ODR = ppixel[518];
//	GPIOC->ODR = ppixel[518];
//
//	GPIOC->ODR = ppixel[519];
//	GPIOC->ODR = ppixel[519];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[520];
//	GPIOC->ODR = ppixel[520];
//
//	GPIOC->ODR = ppixel[521];
//	GPIOC->ODR = ppixel[521];
//
//	GPIOC->ODR = ppixel[522];
//	GPIOC->ODR = ppixel[522];
//
//	GPIOC->ODR = ppixel[523];
//	GPIOC->ODR = ppixel[523];
//
//	GPIOC->ODR = ppixel[524];
//	GPIOC->ODR = ppixel[524];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[525];
//	GPIOC->ODR = ppixel[525];
//
//	GPIOC->ODR = ppixel[526];
//	GPIOC->ODR = ppixel[526];
//
//	GPIOC->ODR = ppixel[527];
//	GPIOC->ODR = ppixel[527];
//
//	GPIOC->ODR = ppixel[528];
//	GPIOC->ODR = ppixel[528];
//
//	GPIOC->ODR = ppixel[529];
//	GPIOC->ODR = ppixel[529];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[530];
//	GPIOC->ODR = ppixel[530];
//
//	GPIOC->ODR = ppixel[531];
//	GPIOC->ODR = ppixel[531];
//
//	GPIOC->ODR = ppixel[532];
//	GPIOC->ODR = ppixel[532];
//
//	GPIOC->ODR = ppixel[533];
//	GPIOC->ODR = ppixel[533];
//
//	GPIOC->ODR = ppixel[534];
//	GPIOC->ODR = ppixel[534];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[535];
//	GPIOC->ODR = ppixel[535];
//
//	GPIOC->ODR = ppixel[536];
//	GPIOC->ODR = ppixel[536];
//
//	GPIOC->ODR = ppixel[537];
//	GPIOC->ODR = ppixel[537];
//
//	GPIOC->ODR = ppixel[538];
//	GPIOC->ODR = ppixel[538];
//
//	GPIOC->ODR = ppixel[539];
//	GPIOC->ODR = ppixel[539];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[540];
//	GPIOC->ODR = ppixel[540];
//
//	GPIOC->ODR = ppixel[541];
//	GPIOC->ODR = ppixel[541];
//
//	GPIOC->ODR = ppixel[542];
//	GPIOC->ODR = ppixel[542];
//
//	GPIOC->ODR = ppixel[543];
//	GPIOC->ODR = ppixel[543];
//
//	GPIOC->ODR = ppixel[544];
//	GPIOC->ODR = ppixel[544];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[545];
//	GPIOC->ODR = ppixel[545];
//
//	GPIOC->ODR = ppixel[546];
//	GPIOC->ODR = ppixel[546];
//
//	GPIOC->ODR = ppixel[547];
//	GPIOC->ODR = ppixel[547];
//
//	GPIOC->ODR = ppixel[548];
//	GPIOC->ODR = ppixel[548];
//
//	GPIOC->ODR = ppixel[549];
//	GPIOC->ODR = ppixel[549];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 315 ... 319: //77b
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF; // dot
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[550];
//	GPIOC->ODR = ppixel[550];
//
//	GPIOC->ODR = ppixel[551];
//	GPIOC->ODR = ppixel[551];
//
//	GPIOC->ODR = ppixel[552];
//	GPIOC->ODR = ppixel[552];
//
//	GPIOC->ODR = ppixel[553];
//	GPIOC->ODR = ppixel[553];
//
//	GPIOC->ODR = ppixel[554];
//	GPIOC->ODR = ppixel[554];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[555];
//	GPIOC->ODR = ppixel[555];
//
//	GPIOC->ODR = ppixel[556];
//	GPIOC->ODR = ppixel[556];
//
//	GPIOC->ODR = ppixel[557];
//	GPIOC->ODR = ppixel[557];
//
//	GPIOC->ODR = ppixel[558];
//	GPIOC->ODR = ppixel[558];
//
//	GPIOC->ODR = ppixel[559];
//	GPIOC->ODR = ppixel[559];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[560];
//	GPIOC->ODR = ppixel[560];
//
//	GPIOC->ODR = ppixel[561];
//	GPIOC->ODR = ppixel[561];
//
//	GPIOC->ODR = ppixel[562];
//	GPIOC->ODR = ppixel[562];
//
//	GPIOC->ODR = ppixel[563];
//	GPIOC->ODR = ppixel[563];
//
//	GPIOC->ODR = ppixel[564];
//	GPIOC->ODR = ppixel[564];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[565];
//	GPIOC->ODR = ppixel[565];
//
//	GPIOC->ODR = ppixel[566];
//	GPIOC->ODR = ppixel[566];
//
//	GPIOC->ODR = ppixel[567];
//	GPIOC->ODR = ppixel[567];
//
//	GPIOC->ODR = ppixel[568];
//	GPIOC->ODR = ppixel[568];
//
//	GPIOC->ODR = ppixel[569];
//	GPIOC->ODR = ppixel[569];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[570];
//	GPIOC->ODR = ppixel[570];
//
//	GPIOC->ODR = ppixel[571];
//	GPIOC->ODR = ppixel[571];
//
//	GPIOC->ODR = ppixel[572];
//	GPIOC->ODR = ppixel[572];
//
//	GPIOC->ODR = ppixel[573];
//	GPIOC->ODR = ppixel[573];
//
//	GPIOC->ODR = ppixel[574];
//	GPIOC->ODR = ppixel[574];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[575];
//	GPIOC->ODR = ppixel[575];
//
//	GPIOC->ODR = ppixel[576];
//	GPIOC->ODR = ppixel[576];
//
//	GPIOC->ODR = ppixel[577];
//	GPIOC->ODR = ppixel[577];
//
//	GPIOC->ODR = ppixel[578];
//	GPIOC->ODR = ppixel[578];
//
//	GPIOC->ODR = ppixel[579];
//	GPIOC->ODR = ppixel[579];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[580];
//	GPIOC->ODR = ppixel[580];
//
//	GPIOC->ODR = ppixel[581];
//	GPIOC->ODR = ppixel[581];
//
//	GPIOC->ODR = ppixel[582];
//	GPIOC->ODR = ppixel[582];
//
//	GPIOC->ODR = ppixel[583];
//	GPIOC->ODR = ppixel[583];
//
//	GPIOC->ODR = ppixel[584];
//	GPIOC->ODR = ppixel[584];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[585];
//	GPIOC->ODR = ppixel[585];
//
//	GPIOC->ODR = ppixel[586];
//	GPIOC->ODR = ppixel[586];
//
//	GPIOC->ODR = ppixel[587];
//	GPIOC->ODR = ppixel[587];
//
//	GPIOC->ODR = ppixel[588];
//	GPIOC->ODR = ppixel[588];
//
//	GPIOC->ODR = ppixel[589];
//	GPIOC->ODR = ppixel[589];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[590];
//	GPIOC->ODR = ppixel[590];
//
//	GPIOC->ODR = ppixel[591];
//	GPIOC->ODR = ppixel[591];
//
//	GPIOC->ODR = ppixel[592];
//	GPIOC->ODR = ppixel[592];
//
//	GPIOC->ODR = ppixel[593];
//	GPIOC->ODR = ppixel[593];
//
//	GPIOC->ODR = ppixel[594];
//	GPIOC->ODR = ppixel[594];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[595];
//	GPIOC->ODR = ppixel[595];
//
//	GPIOC->ODR = ppixel[596];
//	GPIOC->ODR = ppixel[596];
//
//	GPIOC->ODR = ppixel[597];
//	GPIOC->ODR = ppixel[597];
//
//	GPIOC->ODR = ppixel[598];
//	GPIOC->ODR = ppixel[598];
//
//	GPIOC->ODR = ppixel[599];
//	GPIOC->ODR = ppixel[599];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 320 ... 324: //77c
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF; // dot
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[600];
//	GPIOC->ODR = ppixel[600];
//
//	GPIOC->ODR = ppixel[601];
//	GPIOC->ODR = ppixel[601];
//
//	GPIOC->ODR = ppixel[602];
//	GPIOC->ODR = ppixel[602];
//
//	GPIOC->ODR = ppixel[603];
//	GPIOC->ODR = ppixel[603];
//
//	GPIOC->ODR = ppixel[604];
//	GPIOC->ODR = ppixel[604];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[605];
//	GPIOC->ODR = ppixel[605];
//
//	GPIOC->ODR = ppixel[606];
//	GPIOC->ODR = ppixel[606];
//
//	GPIOC->ODR = ppixel[607];
//	GPIOC->ODR = ppixel[607];
//
//	GPIOC->ODR = ppixel[608];
//	GPIOC->ODR = ppixel[608];
//
//	GPIOC->ODR = ppixel[609];
//	GPIOC->ODR = ppixel[609];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[610];
//	GPIOC->ODR = ppixel[610];
//
//	GPIOC->ODR = ppixel[611];
//	GPIOC->ODR = ppixel[611];
//
//	GPIOC->ODR = ppixel[612];
//	GPIOC->ODR = ppixel[612];
//
//	GPIOC->ODR = ppixel[613];
//	GPIOC->ODR = ppixel[613];
//
//	GPIOC->ODR = ppixel[614];
//	GPIOC->ODR = ppixel[614];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[615];
//	GPIOC->ODR = ppixel[615];
//
//	GPIOC->ODR = ppixel[616];
//	GPIOC->ODR = ppixel[616];
//
//	GPIOC->ODR = ppixel[617];
//	GPIOC->ODR = ppixel[617];
//
//	GPIOC->ODR = ppixel[618];
//	GPIOC->ODR = ppixel[618];
//
//	GPIOC->ODR = ppixel[619];
//	GPIOC->ODR = ppixel[619];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[620];
//	GPIOC->ODR = ppixel[620];
//
//	GPIOC->ODR = ppixel[621];
//	GPIOC->ODR = ppixel[621];
//
//	GPIOC->ODR = ppixel[622];
//	GPIOC->ODR = ppixel[622];
//
//	GPIOC->ODR = ppixel[623];
//	GPIOC->ODR = ppixel[623];
//
//	GPIOC->ODR = ppixel[624];
//	GPIOC->ODR = ppixel[624];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[625];
//	GPIOC->ODR = ppixel[625];
//
//	GPIOC->ODR = ppixel[626];
//	GPIOC->ODR = ppixel[626];
//
//	GPIOC->ODR = ppixel[627];
//	GPIOC->ODR = ppixel[627];
//
//	GPIOC->ODR = ppixel[628];
//	GPIOC->ODR = ppixel[628];
//
//	GPIOC->ODR = ppixel[629];
//	GPIOC->ODR = ppixel[629];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[630];
//	GPIOC->ODR = ppixel[630];
//
//	GPIOC->ODR = ppixel[631];
//	GPIOC->ODR = ppixel[631];
//
//	GPIOC->ODR = ppixel[632];
//	GPIOC->ODR = ppixel[632];
//
//	GPIOC->ODR = ppixel[633];
//	GPIOC->ODR = ppixel[633];
//
//	GPIOC->ODR = ppixel[634];
//	GPIOC->ODR = ppixel[634];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[635];
//	GPIOC->ODR = ppixel[635];
//
//	GPIOC->ODR = ppixel[636];
//	GPIOC->ODR = ppixel[636];
//
//	GPIOC->ODR = ppixel[637];
//	GPIOC->ODR = ppixel[637];
//
//	GPIOC->ODR = ppixel[638];
//	GPIOC->ODR = ppixel[638];
//
//	GPIOC->ODR = ppixel[639];
//	GPIOC->ODR = ppixel[639];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[640];
//	GPIOC->ODR = ppixel[640];
//
//	GPIOC->ODR = ppixel[641];
//	GPIOC->ODR = ppixel[641];
//
//	GPIOC->ODR = ppixel[642];
//	GPIOC->ODR = ppixel[642];
//
//	GPIOC->ODR = ppixel[643];
//	GPIOC->ODR = ppixel[643];
//
//	GPIOC->ODR = ppixel[644];
//	GPIOC->ODR = ppixel[644];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[645];
//	GPIOC->ODR = ppixel[645];
//
//	GPIOC->ODR = ppixel[646];
//	GPIOC->ODR = ppixel[646];
//
//	GPIOC->ODR = ppixel[647];
//	GPIOC->ODR = ppixel[647];
//
//	GPIOC->ODR = ppixel[648];
//	GPIOC->ODR = ppixel[648];
//
//	GPIOC->ODR = ppixel[649];
//	GPIOC->ODR = ppixel[649];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 325 ... 329://77d
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF; // dot
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[650];
//	GPIOC->ODR = ppixel[650];
//
//	GPIOC->ODR = ppixel[651];
//	GPIOC->ODR = ppixel[651];
//
//	GPIOC->ODR = ppixel[652];
//	GPIOC->ODR = ppixel[652];
//
//	GPIOC->ODR = ppixel[653];
//	GPIOC->ODR = ppixel[653];
//
//	GPIOC->ODR = ppixel[654];
//	GPIOC->ODR = ppixel[654];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[655];
//	GPIOC->ODR = ppixel[655];
//
//	GPIOC->ODR = ppixel[656];
//	GPIOC->ODR = ppixel[656];
//
//	GPIOC->ODR = ppixel[657];
//	GPIOC->ODR = ppixel[657];
//
//	GPIOC->ODR = ppixel[658];
//	GPIOC->ODR = ppixel[658];
//
//	GPIOC->ODR = ppixel[659];
//	GPIOC->ODR = ppixel[659];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[660];
//	GPIOC->ODR = ppixel[660];
//
//	GPIOC->ODR = ppixel[661];
//	GPIOC->ODR = ppixel[661];
//
//	GPIOC->ODR = ppixel[662];
//	GPIOC->ODR = ppixel[662];
//
//	GPIOC->ODR = ppixel[663];
//	GPIOC->ODR = ppixel[663];
//
//	GPIOC->ODR = ppixel[664];
//	GPIOC->ODR = ppixel[664];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[665];
//	GPIOC->ODR = ppixel[665];
//
//	GPIOC->ODR = ppixel[666];
//	GPIOC->ODR = ppixel[666];
//
//	GPIOC->ODR = ppixel[667];
//	GPIOC->ODR = ppixel[667];
//
//	GPIOC->ODR = ppixel[668];
//	GPIOC->ODR = ppixel[668];
//
//	GPIOC->ODR = ppixel[669];
//	GPIOC->ODR = ppixel[669];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[670];
//	GPIOC->ODR = ppixel[670];
//
//	GPIOC->ODR = ppixel[671];
//	GPIOC->ODR = ppixel[671];
//
//	GPIOC->ODR = ppixel[672];
//	GPIOC->ODR = ppixel[672];
//
//	GPIOC->ODR = ppixel[673];
//	GPIOC->ODR = ppixel[673];
//
//	GPIOC->ODR = ppixel[674];
//	GPIOC->ODR = ppixel[674];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[675];
//	GPIOC->ODR = ppixel[675];
//
//	GPIOC->ODR = ppixel[676];
//	GPIOC->ODR = ppixel[676];
//
//	GPIOC->ODR = ppixel[677];
//	GPIOC->ODR = ppixel[677];
//
//	GPIOC->ODR = ppixel[678];
//	GPIOC->ODR = ppixel[678];
//
//	GPIOC->ODR = ppixel[679];
//	GPIOC->ODR = ppixel[679];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[680];
//	GPIOC->ODR = ppixel[680];
//
//	GPIOC->ODR = ppixel[681];
//	GPIOC->ODR = ppixel[681];
//
//	GPIOC->ODR = ppixel[682];
//	GPIOC->ODR = ppixel[682];
//
//	GPIOC->ODR = ppixel[683];
//	GPIOC->ODR = ppixel[683];
//
//	GPIOC->ODR = ppixel[684];
//	GPIOC->ODR = ppixel[684];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[685];
//	GPIOC->ODR = ppixel[685];
//
//	GPIOC->ODR = ppixel[686];
//	GPIOC->ODR = ppixel[686];
//
//	GPIOC->ODR = ppixel[687];
//	GPIOC->ODR = ppixel[687];
//
//	GPIOC->ODR = ppixel[688];
//	GPIOC->ODR = ppixel[688];
//
//	GPIOC->ODR = ppixel[689];
//	GPIOC->ODR = ppixel[689];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[690];
//	GPIOC->ODR = ppixel[690];
//
//	GPIOC->ODR = ppixel[691];
//	GPIOC->ODR = ppixel[691];
//
//	GPIOC->ODR = ppixel[692];
//	GPIOC->ODR = ppixel[692];
//
//	GPIOC->ODR = ppixel[693];
//	GPIOC->ODR = ppixel[693];
//
//	GPIOC->ODR = ppixel[694];
//	GPIOC->ODR = ppixel[694];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[695];
//	GPIOC->ODR = ppixel[695];
//
//	GPIOC->ODR = ppixel[696];
//	GPIOC->ODR = ppixel[696];
//
//	GPIOC->ODR = ppixel[697];
//	GPIOC->ODR = ppixel[697];
//
//	GPIOC->ODR = ppixel[698];
//	GPIOC->ODR = ppixel[698];
//
//	GPIOC->ODR = ppixel[699];
//	GPIOC->ODR = ppixel[699];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 330 ... 334: //77e
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON; // dot
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[700];
//	GPIOC->ODR = ppixel[700];
//
//	GPIOC->ODR = ppixel[701];
//	GPIOC->ODR = ppixel[701];
//
//	GPIOC->ODR = ppixel[702];
//	GPIOC->ODR = ppixel[702];
//
//	GPIOC->ODR = ppixel[703];
//	GPIOC->ODR = ppixel[703];
//
//	GPIOC->ODR = ppixel[704];
//	GPIOC->ODR = ppixel[704];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[705];
//	GPIOC->ODR = ppixel[705];
//
//	GPIOC->ODR = ppixel[706];
//	GPIOC->ODR = ppixel[706];
//
//	GPIOC->ODR = ppixel[707];
//	GPIOC->ODR = ppixel[707];
//
//	GPIOC->ODR = ppixel[708];
//	GPIOC->ODR = ppixel[708];
//
//	GPIOC->ODR = ppixel[709];
//	GPIOC->ODR = ppixel[709];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[710];
//	GPIOC->ODR = ppixel[710];
//
//	GPIOC->ODR = ppixel[711];
//	GPIOC->ODR = ppixel[711];
//
//	GPIOC->ODR = ppixel[712];
//	GPIOC->ODR = ppixel[712];
//
//	GPIOC->ODR = ppixel[713];
//	GPIOC->ODR = ppixel[713];
//
//	GPIOC->ODR = ppixel[714];
//	GPIOC->ODR = ppixel[714];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[715];
//	GPIOC->ODR = ppixel[715];
//
//	GPIOC->ODR = ppixel[716];
//	GPIOC->ODR = ppixel[716];
//
//	GPIOC->ODR = ppixel[717];
//	GPIOC->ODR = ppixel[717];
//
//	GPIOC->ODR = ppixel[718];
//	GPIOC->ODR = ppixel[718];
//
//	GPIOC->ODR = ppixel[719];
//	GPIOC->ODR = ppixel[719];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[720];
//	GPIOC->ODR = ppixel[720];
//
//	GPIOC->ODR = ppixel[721];
//	GPIOC->ODR = ppixel[721];
//
//	GPIOC->ODR = ppixel[722];
//	GPIOC->ODR = ppixel[722];
//
//	GPIOC->ODR = ppixel[723];
//	GPIOC->ODR = ppixel[723];
//
//	GPIOC->ODR = ppixel[724];
//	GPIOC->ODR = ppixel[724];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[725];
//	GPIOC->ODR = ppixel[725];
//
//	GPIOC->ODR = ppixel[726];
//	GPIOC->ODR = ppixel[726];
//
//	GPIOC->ODR = ppixel[727];
//	GPIOC->ODR = ppixel[727];
//
//	GPIOC->ODR = ppixel[728];
//	GPIOC->ODR = ppixel[728];
//
//	GPIOC->ODR = ppixel[729];
//	GPIOC->ODR = ppixel[729];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[730];
//	GPIOC->ODR = ppixel[730];
//
//	GPIOC->ODR = ppixel[731];
//	GPIOC->ODR = ppixel[731];
//
//	GPIOC->ODR = ppixel[732];
//	GPIOC->ODR = ppixel[732];
//
//	GPIOC->ODR = ppixel[733];
//	GPIOC->ODR = ppixel[733];
//
//	GPIOC->ODR = ppixel[734];
//	GPIOC->ODR = ppixel[734];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[735];
//	GPIOC->ODR = ppixel[735];
//
//	GPIOC->ODR = ppixel[736];
//	GPIOC->ODR = ppixel[736];
//
//	GPIOC->ODR = ppixel[737];
//	GPIOC->ODR = ppixel[737];
//
//	GPIOC->ODR = ppixel[738];
//	GPIOC->ODR = ppixel[738];
//
//	GPIOC->ODR = ppixel[739];
//	GPIOC->ODR = ppixel[739];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[740];
//	GPIOC->ODR = ppixel[740];
//
//	GPIOC->ODR = ppixel[741];
//	GPIOC->ODR = ppixel[741];
//
//	GPIOC->ODR = ppixel[742];
//	GPIOC->ODR = ppixel[742];
//
//	GPIOC->ODR = ppixel[743];
//	GPIOC->ODR = ppixel[743];
//
//	GPIOC->ODR = ppixel[744];
//	GPIOC->ODR = ppixel[744];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[745];
//	GPIOC->ODR = ppixel[745];
//
//	GPIOC->ODR = ppixel[746];
//	GPIOC->ODR = ppixel[746];
//
//	GPIOC->ODR = ppixel[747];
//	GPIOC->ODR = ppixel[747];
//
//	GPIOC->ODR = ppixel[748];
//	GPIOC->ODR = ppixel[748];
//
//	GPIOC->ODR = ppixel[749];
//	GPIOC->ODR = ppixel[749];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 335 ... 339:
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	while(waste_of_time<50)
//	{
//		GPIOC->ODR = White_ON;
//		waste_of_time++;
//	}
//	waste_of_time = 0;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 340 ... 340:
//	GPIOC->ODR = White_OFF;
//	break;
//	case 341 ... 344:
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	while(waste_of_time<50)
//	{
//		GPIOC->ODR = White_ON;
//		waste_of_time++;
//	}
//	waste_of_time = 0;
//	GPIOC->ODR = White_OFF;
//	break;
//	}
//	break;
//
//	case 345 ... 379://eights
//	switch(Lines)
//	{
//	case 345 ... 349: //66a
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[750];
//	GPIOC->ODR = ppixel[750];
//
//	GPIOC->ODR = ppixel[751];
//	GPIOC->ODR = ppixel[751];
//
//	GPIOC->ODR = ppixel[752];
//	GPIOC->ODR = ppixel[752];
//
//	GPIOC->ODR = ppixel[753];
//	GPIOC->ODR = ppixel[753];
//
//	GPIOC->ODR = ppixel[754];
//	GPIOC->ODR = ppixel[754];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[755];
//	GPIOC->ODR = ppixel[755];
//
//	GPIOC->ODR = ppixel[756];
//	GPIOC->ODR = ppixel[756];
//
//	GPIOC->ODR = ppixel[757];
//	GPIOC->ODR = ppixel[757];
//
//	GPIOC->ODR = ppixel[758];
//	GPIOC->ODR = ppixel[758];
//
//	GPIOC->ODR = ppixel[759];
//	GPIOC->ODR = ppixel[759];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[760];
//	GPIOC->ODR = ppixel[760];
//
//	GPIOC->ODR = ppixel[761];
//	GPIOC->ODR = ppixel[761];
//
//	GPIOC->ODR = ppixel[762];
//	GPIOC->ODR = ppixel[762];
//
//	GPIOC->ODR = ppixel[763];
//	GPIOC->ODR = ppixel[763];
//
//	GPIOC->ODR = ppixel[764];
//	GPIOC->ODR = ppixel[764];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[765];
//	GPIOC->ODR = ppixel[765];
//
//	GPIOC->ODR = ppixel[766];
//	GPIOC->ODR = ppixel[766];
//
//	GPIOC->ODR = ppixel[767];
//	GPIOC->ODR = ppixel[767];
//
//	GPIOC->ODR = ppixel[768];
//	GPIOC->ODR = ppixel[768];
//
//	GPIOC->ODR = ppixel[769];
//	GPIOC->ODR = ppixel[769];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[770];
//	GPIOC->ODR = ppixel[770];
//
//	GPIOC->ODR = ppixel[771];
//	GPIOC->ODR = ppixel[771];
//
//	GPIOC->ODR = ppixel[772];
//	GPIOC->ODR = ppixel[772];
//
//	GPIOC->ODR = ppixel[773];
//	GPIOC->ODR = ppixel[773];
//
//	GPIOC->ODR = ppixel[774];
//	GPIOC->ODR = ppixel[774];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[775];
//	GPIOC->ODR = ppixel[775];
//
//	GPIOC->ODR = ppixel[776];
//	GPIOC->ODR = ppixel[776];
//
//	GPIOC->ODR = ppixel[777];
//	GPIOC->ODR = ppixel[777];
//
//	GPIOC->ODR = ppixel[778];
//	GPIOC->ODR = ppixel[778];
//
//	GPIOC->ODR = ppixel[779];
//	GPIOC->ODR = ppixel[779];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[780];
//	GPIOC->ODR = ppixel[780];
//
//	GPIOC->ODR = ppixel[781];
//	GPIOC->ODR = ppixel[781];
//
//	GPIOC->ODR = ppixel[782];
//	GPIOC->ODR = ppixel[782];
//
//	GPIOC->ODR = ppixel[783];
//	GPIOC->ODR = ppixel[783];
//
//	GPIOC->ODR = ppixel[784];
//	GPIOC->ODR = ppixel[784];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[785];
//	GPIOC->ODR = ppixel[785];
//
//	GPIOC->ODR = ppixel[786];
//	GPIOC->ODR = ppixel[786];
//
//	GPIOC->ODR = ppixel[787];
//	GPIOC->ODR = ppixel[787];
//
//	GPIOC->ODR = ppixel[788];
//	GPIOC->ODR = ppixel[788];
//
//	GPIOC->ODR = ppixel[789];
//	GPIOC->ODR = ppixel[789];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[790];
//	GPIOC->ODR = ppixel[790];
//
//	GPIOC->ODR = ppixel[791];
//	GPIOC->ODR = ppixel[791];
//
//	GPIOC->ODR = ppixel[792];
//	GPIOC->ODR = ppixel[792];
//
//	GPIOC->ODR = ppixel[793];
//	GPIOC->ODR = ppixel[793];
//
//	GPIOC->ODR = ppixel[794];
//	GPIOC->ODR = ppixel[794];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[795];
//	GPIOC->ODR = ppixel[795];
//
//	GPIOC->ODR = ppixel[796];
//	GPIOC->ODR = ppixel[796];
//
//	GPIOC->ODR = ppixel[797];
//	GPIOC->ODR = ppixel[797];
//
//	GPIOC->ODR = ppixel[798];
//	GPIOC->ODR = ppixel[798];
//
//	GPIOC->ODR = ppixel[799];
//	GPIOC->ODR = ppixel[799];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 350 ... 354: //88b
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[800];
//	GPIOC->ODR = ppixel[800];
//
//	GPIOC->ODR = ppixel[801];
//	GPIOC->ODR = ppixel[801];
//
//	GPIOC->ODR = ppixel[802];
//	GPIOC->ODR = ppixel[802];
//
//	GPIOC->ODR = ppixel[803];
//	GPIOC->ODR = ppixel[803];
//
//	GPIOC->ODR = ppixel[804];
//	GPIOC->ODR = ppixel[804];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[805];
//	GPIOC->ODR = ppixel[805];
//
//	GPIOC->ODR = ppixel[806];
//	GPIOC->ODR = ppixel[806];
//
//	GPIOC->ODR = ppixel[807];
//	GPIOC->ODR = ppixel[807];
//
//	GPIOC->ODR = ppixel[808];
//	GPIOC->ODR = ppixel[808];
//
//	GPIOC->ODR = ppixel[809];
//	GPIOC->ODR = ppixel[809];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[810];
//	GPIOC->ODR = ppixel[810];
//
//	GPIOC->ODR = ppixel[811];
//	GPIOC->ODR = ppixel[811];
//
//	GPIOC->ODR = ppixel[812];
//	GPIOC->ODR = ppixel[812];
//
//	GPIOC->ODR = ppixel[813];
//	GPIOC->ODR = ppixel[813];
//
//	GPIOC->ODR = ppixel[814];
//	GPIOC->ODR = ppixel[814];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[815];
//	GPIOC->ODR = ppixel[815];
//
//	GPIOC->ODR = ppixel[816];
//	GPIOC->ODR = ppixel[816];
//
//	GPIOC->ODR = ppixel[817];
//	GPIOC->ODR = ppixel[817];
//
//	GPIOC->ODR = ppixel[818];
//	GPIOC->ODR = ppixel[818];
//
//	GPIOC->ODR = ppixel[819];
//	GPIOC->ODR = ppixel[819];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[820];
//	GPIOC->ODR = ppixel[820];
//
//	GPIOC->ODR = ppixel[821];
//	GPIOC->ODR = ppixel[821];
//
//	GPIOC->ODR = ppixel[822];
//	GPIOC->ODR = ppixel[822];
//
//	GPIOC->ODR = ppixel[823];
//	GPIOC->ODR = ppixel[823];
//
//	GPIOC->ODR = ppixel[824];
//	GPIOC->ODR = ppixel[824];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[825];
//	GPIOC->ODR = ppixel[825];
//
//	GPIOC->ODR = ppixel[826];
//	GPIOC->ODR = ppixel[826];
//
//	GPIOC->ODR = ppixel[827];
//	GPIOC->ODR = ppixel[827];
//
//	GPIOC->ODR = ppixel[828];
//	GPIOC->ODR = ppixel[828];
//
//	GPIOC->ODR = ppixel[829];
//	GPIOC->ODR = ppixel[829];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[830];
//	GPIOC->ODR = ppixel[830];
//
//	GPIOC->ODR = ppixel[831];
//	GPIOC->ODR = ppixel[831];
//
//	GPIOC->ODR = ppixel[832];
//	GPIOC->ODR = ppixel[832];
//
//	GPIOC->ODR = ppixel[833];
//	GPIOC->ODR = ppixel[833];
//
//	GPIOC->ODR = ppixel[834];
//	GPIOC->ODR = ppixel[834];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[835];
//	GPIOC->ODR = ppixel[835];
//
//	GPIOC->ODR = ppixel[836];
//	GPIOC->ODR = ppixel[836];
//
//	GPIOC->ODR = ppixel[837];
//	GPIOC->ODR = ppixel[837];
//
//	GPIOC->ODR = ppixel[838];
//	GPIOC->ODR = ppixel[838];
//
//	GPIOC->ODR = ppixel[839];
//	GPIOC->ODR = ppixel[839];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[840];
//	GPIOC->ODR = ppixel[840];
//
//	GPIOC->ODR = ppixel[841];
//	GPIOC->ODR = ppixel[841];
//
//	GPIOC->ODR = ppixel[842];
//	GPIOC->ODR = ppixel[842];
//
//	GPIOC->ODR = ppixel[843];
//	GPIOC->ODR = ppixel[843];
//
//	GPIOC->ODR = ppixel[844];
//	GPIOC->ODR = ppixel[844];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[845];
//	GPIOC->ODR = ppixel[845];
//
//	GPIOC->ODR = ppixel[846];
//	GPIOC->ODR = ppixel[846];
//
//	GPIOC->ODR = ppixel[847];
//	GPIOC->ODR = ppixel[847];
//
//	GPIOC->ODR = ppixel[848];
//	GPIOC->ODR = ppixel[848];
//
//	GPIOC->ODR = ppixel[849];
//	GPIOC->ODR = ppixel[849];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 355 ... 359: //88c
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[850];
//	GPIOC->ODR = ppixel[850];
//
//	GPIOC->ODR = ppixel[851];
//	GPIOC->ODR = ppixel[851];
//
//	GPIOC->ODR = ppixel[852];
//	GPIOC->ODR = ppixel[852];
//
//	GPIOC->ODR = ppixel[853];
//	GPIOC->ODR = ppixel[853];
//
//	GPIOC->ODR = ppixel[854];
//	GPIOC->ODR = ppixel[854];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[855];
//	GPIOC->ODR = ppixel[855];
//
//	GPIOC->ODR = ppixel[856];
//	GPIOC->ODR = ppixel[856];
//
//	GPIOC->ODR = ppixel[857];
//	GPIOC->ODR = ppixel[857];
//
//	GPIOC->ODR = ppixel[858];
//	GPIOC->ODR = ppixel[858];
//
//	GPIOC->ODR = ppixel[859];
//	GPIOC->ODR = ppixel[859];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[860];
//	GPIOC->ODR = ppixel[860];
//
//	GPIOC->ODR = ppixel[861];
//	GPIOC->ODR = ppixel[861];
//
//	GPIOC->ODR = ppixel[862];
//	GPIOC->ODR = ppixel[862];
//
//	GPIOC->ODR = ppixel[863];
//	GPIOC->ODR = ppixel[863];
//
//	GPIOC->ODR = ppixel[864];
//	GPIOC->ODR = ppixel[864];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[865];
//	GPIOC->ODR = ppixel[865];
//
//	GPIOC->ODR = ppixel[866];
//	GPIOC->ODR = ppixel[866];
//
//	GPIOC->ODR = ppixel[867];
//	GPIOC->ODR = ppixel[867];
//
//	GPIOC->ODR = ppixel[868];
//	GPIOC->ODR = ppixel[868];
//
//	GPIOC->ODR = ppixel[869];
//	GPIOC->ODR = ppixel[869];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[870];
//	GPIOC->ODR = ppixel[870];
//
//	GPIOC->ODR = ppixel[871];
//	GPIOC->ODR = ppixel[871];
//
//	GPIOC->ODR = ppixel[872];
//	GPIOC->ODR = ppixel[872];
//
//	GPIOC->ODR = ppixel[873];
//	GPIOC->ODR = ppixel[873];
//
//	GPIOC->ODR = ppixel[874];
//	GPIOC->ODR = ppixel[874];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[875];
//	GPIOC->ODR = ppixel[875];
//
//	GPIOC->ODR = ppixel[876];
//	GPIOC->ODR = ppixel[876];
//
//	GPIOC->ODR = ppixel[877];
//	GPIOC->ODR = ppixel[877];
//
//	GPIOC->ODR = ppixel[878];
//	GPIOC->ODR = ppixel[878];
//
//	GPIOC->ODR = ppixel[879];
//	GPIOC->ODR = ppixel[879];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[880];
//	GPIOC->ODR = ppixel[880];
//
//	GPIOC->ODR = ppixel[881];
//	GPIOC->ODR = ppixel[881];
//
//	GPIOC->ODR = ppixel[882];
//	GPIOC->ODR = ppixel[882];
//
//	GPIOC->ODR = ppixel[883];
//	GPIOC->ODR = ppixel[883];
//
//	GPIOC->ODR = ppixel[884];
//	GPIOC->ODR = ppixel[884];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[885];
//	GPIOC->ODR = ppixel[885];
//
//	GPIOC->ODR = ppixel[886];
//	GPIOC->ODR = ppixel[886];
//
//	GPIOC->ODR = ppixel[887];
//	GPIOC->ODR = ppixel[887];
//
//	GPIOC->ODR = ppixel[888];
//	GPIOC->ODR = ppixel[888];
//
//	GPIOC->ODR = ppixel[889];
//	GPIOC->ODR = ppixel[889];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[890];
//	GPIOC->ODR = ppixel[890];
//
//	GPIOC->ODR = ppixel[891];
//	GPIOC->ODR = ppixel[891];
//
//	GPIOC->ODR = ppixel[892];
//	GPIOC->ODR = ppixel[892];
//
//	GPIOC->ODR = ppixel[893];
//	GPIOC->ODR = ppixel[893];
//
//	GPIOC->ODR = ppixel[894];
//	GPIOC->ODR = ppixel[894];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[895];
//	GPIOC->ODR = ppixel[895];
//
//	GPIOC->ODR = ppixel[896];
//	GPIOC->ODR = ppixel[896];
//
//	GPIOC->ODR = ppixel[897];
//	GPIOC->ODR = ppixel[897];
//
//	GPIOC->ODR = ppixel[898];
//	GPIOC->ODR = ppixel[898];
//
//	GPIOC->ODR = ppixel[899];
//	GPIOC->ODR = ppixel[899];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 360 ... 364: // 88d
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[900];
//	GPIOC->ODR = ppixel[900];
//
//	GPIOC->ODR = ppixel[901];
//	GPIOC->ODR = ppixel[901];
//
//	GPIOC->ODR = ppixel[902];
//	GPIOC->ODR = ppixel[902];
//
//	GPIOC->ODR = ppixel[903];
//	GPIOC->ODR = ppixel[903];
//
//	GPIOC->ODR = ppixel[904];
//	GPIOC->ODR = ppixel[904];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[905];
//	GPIOC->ODR = ppixel[905];
//
//	GPIOC->ODR = ppixel[906];
//	GPIOC->ODR = ppixel[906];
//
//	GPIOC->ODR = ppixel[907];
//	GPIOC->ODR = ppixel[907];
//
//	GPIOC->ODR = ppixel[908];
//	GPIOC->ODR = ppixel[908];
//
//	GPIOC->ODR = ppixel[909];
//	GPIOC->ODR = ppixel[909];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[910];
//	GPIOC->ODR = ppixel[910];
//
//	GPIOC->ODR = ppixel[911];
//	GPIOC->ODR = ppixel[911];
//
//	GPIOC->ODR = ppixel[912];
//	GPIOC->ODR = ppixel[912];
//
//	GPIOC->ODR = ppixel[913];
//	GPIOC->ODR = ppixel[913];
//
//	GPIOC->ODR = ppixel[914];
//	GPIOC->ODR = ppixel[914];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[915];
//	GPIOC->ODR = ppixel[915];
//
//	GPIOC->ODR = ppixel[916];
//	GPIOC->ODR = ppixel[916];
//
//	GPIOC->ODR = ppixel[917];
//	GPIOC->ODR = ppixel[917];
//
//	GPIOC->ODR = ppixel[918];
//	GPIOC->ODR = ppixel[918];
//
//	GPIOC->ODR = ppixel[919];
//	GPIOC->ODR = ppixel[919];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[920];
//	GPIOC->ODR = ppixel[920];
//
//	GPIOC->ODR = ppixel[921];
//	GPIOC->ODR = ppixel[921];
//
//	GPIOC->ODR = ppixel[922];
//	GPIOC->ODR = ppixel[922];
//
//	GPIOC->ODR = ppixel[923];
//	GPIOC->ODR = ppixel[923];
//
//	GPIOC->ODR = ppixel[924];
//	GPIOC->ODR = ppixel[924];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[925];
//	GPIOC->ODR = ppixel[925];
//
//	GPIOC->ODR = ppixel[926];
//	GPIOC->ODR = ppixel[926];
//
//	GPIOC->ODR = ppixel[927];
//	GPIOC->ODR = ppixel[927];
//
//	GPIOC->ODR = ppixel[928];
//	GPIOC->ODR = ppixel[928];
//
//	GPIOC->ODR = ppixel[929];
//	GPIOC->ODR = ppixel[929];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[930];
//	GPIOC->ODR = ppixel[930];
//
//	GPIOC->ODR = ppixel[931];
//	GPIOC->ODR = ppixel[931];
//
//	GPIOC->ODR = ppixel[932];
//	GPIOC->ODR = ppixel[932];
//
//	GPIOC->ODR = ppixel[933];
//	GPIOC->ODR = ppixel[933];
//
//	GPIOC->ODR = ppixel[934];
//	GPIOC->ODR = ppixel[934];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[935];
//	GPIOC->ODR = ppixel[935];
//
//	GPIOC->ODR = ppixel[936];
//	GPIOC->ODR = ppixel[936];
//
//	GPIOC->ODR = ppixel[937];
//	GPIOC->ODR = ppixel[937];
//
//	GPIOC->ODR = ppixel[938];
//	GPIOC->ODR = ppixel[938];
//
//	GPIOC->ODR = ppixel[939];
//	GPIOC->ODR = ppixel[939];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[940];
//	GPIOC->ODR = ppixel[940];
//
//	GPIOC->ODR = ppixel[941];
//	GPIOC->ODR = ppixel[941];
//
//	GPIOC->ODR = ppixel[942];
//	GPIOC->ODR = ppixel[942];
//
//	GPIOC->ODR = ppixel[943];
//	GPIOC->ODR = ppixel[943];
//
//	GPIOC->ODR = ppixel[944];
//	GPIOC->ODR = ppixel[944];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[945];
//	GPIOC->ODR = ppixel[945];
//
//	GPIOC->ODR = ppixel[946];
//	GPIOC->ODR = ppixel[946];
//
//	GPIOC->ODR = ppixel[947];
//	GPIOC->ODR = ppixel[947];
//
//	GPIOC->ODR = ppixel[948];
//	GPIOC->ODR = ppixel[948];
//
//	GPIOC->ODR = ppixel[949];
//	GPIOC->ODR = ppixel[949];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 365 ... 369: //88e
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[950];
//	GPIOC->ODR = ppixel[950];
//
//	GPIOC->ODR = ppixel[951];
//	GPIOC->ODR = ppixel[951];
//
//	GPIOC->ODR = ppixel[952];
//	GPIOC->ODR = ppixel[952];
//
//	GPIOC->ODR = ppixel[953];
//	GPIOC->ODR = ppixel[953];
//
//	GPIOC->ODR = ppixel[954];
//	GPIOC->ODR = ppixel[954];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[955];
//	GPIOC->ODR = ppixel[955];
//
//	GPIOC->ODR = ppixel[956];
//	GPIOC->ODR = ppixel[956];
//
//	GPIOC->ODR = ppixel[957];
//	GPIOC->ODR = ppixel[957];
//
//	GPIOC->ODR = ppixel[958];
//	GPIOC->ODR = ppixel[958];
//
//	GPIOC->ODR = ppixel[959];
//	GPIOC->ODR = ppixel[959];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[960];
//	GPIOC->ODR = ppixel[960];
//
//	GPIOC->ODR = ppixel[961];
//	GPIOC->ODR = ppixel[961];
//
//	GPIOC->ODR = ppixel[962];
//	GPIOC->ODR = ppixel[962];
//
//	GPIOC->ODR = ppixel[963];
//	GPIOC->ODR = ppixel[963];
//
//	GPIOC->ODR = ppixel[964];
//	GPIOC->ODR = ppixel[964];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[965];
//	GPIOC->ODR = ppixel[965];
//
//	GPIOC->ODR = ppixel[966];
//	GPIOC->ODR = ppixel[966];
//
//	GPIOC->ODR = ppixel[967];
//	GPIOC->ODR = ppixel[967];
//
//	GPIOC->ODR = ppixel[968];
//	GPIOC->ODR = ppixel[968];
//
//	GPIOC->ODR = ppixel[969];
//	GPIOC->ODR = ppixel[969];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[970];
//	GPIOC->ODR = ppixel[970];
//
//	GPIOC->ODR = ppixel[971];
//	GPIOC->ODR = ppixel[971];
//
//	GPIOC->ODR = ppixel[972];
//	GPIOC->ODR = ppixel[972];
//
//	GPIOC->ODR = ppixel[973];
//	GPIOC->ODR = ppixel[973];
//
//	GPIOC->ODR = ppixel[974];
//	GPIOC->ODR = ppixel[974];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[975];
//	GPIOC->ODR = ppixel[975];
//
//	GPIOC->ODR = ppixel[976];
//	GPIOC->ODR = ppixel[976];
//
//	GPIOC->ODR = ppixel[977];
//	GPIOC->ODR = ppixel[977];
//
//	GPIOC->ODR = ppixel[978];
//	GPIOC->ODR = ppixel[978];
//
//	GPIOC->ODR = ppixel[979];
//	GPIOC->ODR = ppixel[979];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[980];
//	GPIOC->ODR = ppixel[980];
//
//	GPIOC->ODR = ppixel[981];
//	GPIOC->ODR = ppixel[981];
//
//	GPIOC->ODR = ppixel[982];
//	GPIOC->ODR = ppixel[982];
//
//	GPIOC->ODR = ppixel[983];
//	GPIOC->ODR = ppixel[983];
//
//	GPIOC->ODR = ppixel[984];
//	GPIOC->ODR = ppixel[984];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[985];
//	GPIOC->ODR = ppixel[985];
//
//	GPIOC->ODR = ppixel[986];
//	GPIOC->ODR = ppixel[986];
//
//	GPIOC->ODR = ppixel[987];
//	GPIOC->ODR = ppixel[987];
//
//	GPIOC->ODR = ppixel[988];
//	GPIOC->ODR = ppixel[988];
//
//	GPIOC->ODR = ppixel[989];
//	GPIOC->ODR = ppixel[989];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[990];
//	GPIOC->ODR = ppixel[990];
//
//	GPIOC->ODR = ppixel[991];
//	GPIOC->ODR = ppixel[991];
//
//	GPIOC->ODR = ppixel[992];
//	GPIOC->ODR = ppixel[992];
//
//	GPIOC->ODR = ppixel[993];
//	GPIOC->ODR = ppixel[993];
//
//	GPIOC->ODR = ppixel[994];
//	GPIOC->ODR = ppixel[994];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = ppixel[995];
//	GPIOC->ODR = ppixel[995];
//
//	GPIOC->ODR = ppixel[996];
//	GPIOC->ODR = ppixel[996];
//
//	GPIOC->ODR = ppixel[997];
//	GPIOC->ODR = ppixel[997];
//
//	GPIOC->ODR = ppixel[998];
//	GPIOC->ODR = ppixel[998];
//
//	GPIOC->ODR = ppixel[999];
//	GPIOC->ODR = ppixel[999];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 370 ... 374:
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	while(waste_of_time<50)
//	{
//		GPIOC->ODR = White_ON;
//		waste_of_time++;
//	}
//	waste_of_time = 0;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 375 ... 375:
//	GPIOC->ODR = White_OFF;
//	break;
//	case 376 ... 379:
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	while(waste_of_time<50)
//	{
//		GPIOC->ODR = White_ON;
//		waste_of_time++;
//	}
//	waste_of_time = 0;
//	GPIOC->ODR = White_OFF;
//	break;
//	}
//	break;

//	case 380 ... 414://nines
//	switch(Lines)
//	{
//	case 380 ... 384:
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF; // dot
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2000];
//	GPIOC->ODR = pixel[2000];
//
//	GPIOC->ODR = pixel[2001];
//	GPIOC->ODR = pixel[2001];
//
//	GPIOC->ODR = pixel[2002];
//	GPIOC->ODR = pixel[2002];
//
//	GPIOC->ODR = pixel[2003];
//	GPIOC->ODR = pixel[2003];
//
//	GPIOC->ODR = pixel[2004];
//	GPIOC->ODR = pixel[2004];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2005];
//	GPIOC->ODR = pixel[2005];
//
//	GPIOC->ODR = pixel[2006];
//	GPIOC->ODR = pixel[2006];
//
//	GPIOC->ODR = pixel[2007];
//	GPIOC->ODR = pixel[2007];
//
//	GPIOC->ODR = pixel[2008];
//	GPIOC->ODR = pixel[2008];
//
//	GPIOC->ODR = pixel[2009];
//	GPIOC->ODR = pixel[2009];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2010];
//	GPIOC->ODR = pixel[2010];
//
//	GPIOC->ODR = pixel[2011];
//	GPIOC->ODR = pixel[2011];
//
//	GPIOC->ODR = pixel[2012];
//	GPIOC->ODR = pixel[2012];
//
//	GPIOC->ODR = pixel[2013];
//	GPIOC->ODR = pixel[2013];
//
//	GPIOC->ODR = pixel[2014];
//	GPIOC->ODR = pixel[2014];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2015];
//	GPIOC->ODR = pixel[2015];
//
//	GPIOC->ODR = pixel[2016];
//	GPIOC->ODR = pixel[2016];
//
//	GPIOC->ODR = pixel[2017];
//	GPIOC->ODR = pixel[2017];
//
//	GPIOC->ODR = pixel[2018];
//	GPIOC->ODR = pixel[2018];
//
//	GPIOC->ODR = pixel[2019];
//	GPIOC->ODR = pixel[2019];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2020];
//	GPIOC->ODR = pixel[2020];
//
//	GPIOC->ODR = pixel[2021];
//	GPIOC->ODR = pixel[2021];
//
//	GPIOC->ODR = pixel[2022];
//	GPIOC->ODR = pixel[2022];
//
//	GPIOC->ODR = pixel[2023];
//	GPIOC->ODR = pixel[2023];
//
//	GPIOC->ODR = pixel[2024];
//	GPIOC->ODR = pixel[2024];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2025];
//	GPIOC->ODR = pixel[2025];
//
//	GPIOC->ODR = pixel[2026];
//	GPIOC->ODR = pixel[2026];
//
//	GPIOC->ODR = pixel[2027];
//	GPIOC->ODR = pixel[2027];
//
//	GPIOC->ODR = pixel[2028];
//	GPIOC->ODR = pixel[2028];
//
//	GPIOC->ODR = pixel[2029];
//	GPIOC->ODR = pixel[2029];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2030];
//	GPIOC->ODR = pixel[2030];
//
//	GPIOC->ODR = pixel[2031];
//	GPIOC->ODR = pixel[2031];
//
//	GPIOC->ODR = pixel[2032];
//	GPIOC->ODR = pixel[2032];
//
//	GPIOC->ODR = pixel[2033];
//	GPIOC->ODR = pixel[2033];
//
//	GPIOC->ODR = pixel[2034];
//	GPIOC->ODR = pixel[2034];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2035];
//	GPIOC->ODR = pixel[2035];
//
//	GPIOC->ODR = pixel[2036];
//	GPIOC->ODR = pixel[2036];
//
//	GPIOC->ODR = pixel[2037];
//	GPIOC->ODR = pixel[2037];
//
//	GPIOC->ODR = pixel[2038];
//	GPIOC->ODR = pixel[2038];
//
//	GPIOC->ODR = pixel[2039];
//	GPIOC->ODR = pixel[2039];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2040];
//	GPIOC->ODR = pixel[2040];
//
//	GPIOC->ODR = pixel[2041];
//	GPIOC->ODR = pixel[2041];
//
//	GPIOC->ODR = pixel[2042];
//	GPIOC->ODR = pixel[2042];
//
//	GPIOC->ODR = pixel[2043];
//	GPIOC->ODR = pixel[2043];
//
//	GPIOC->ODR = pixel[2044];
//	GPIOC->ODR = pixel[2044];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2045];
//	GPIOC->ODR = pixel[2045];
//
//	GPIOC->ODR = pixel[2046];
//	GPIOC->ODR = pixel[2046];
//
//	GPIOC->ODR = pixel[2047];
//	GPIOC->ODR = pixel[2047];
//
//	GPIOC->ODR = pixel[2048];
//	GPIOC->ODR = pixel[2048];
//
//	GPIOC->ODR = pixel[2049];
//	GPIOC->ODR = pixel[2049];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 385 ... 389: //99b
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF; // dot
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2050];
//	GPIOC->ODR = pixel[2050];
//
//	GPIOC->ODR = pixel[2051];
//	GPIOC->ODR = pixel[2051];
//
//	GPIOC->ODR = pixel[2052];
//	GPIOC->ODR = pixel[2052];
//
//	GPIOC->ODR = pixel[2053];
//	GPIOC->ODR = pixel[2053];
//
//	GPIOC->ODR = pixel[2054];
//	GPIOC->ODR = pixel[2054];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2055];
//	GPIOC->ODR = pixel[2055];
//
//	GPIOC->ODR = pixel[2056];
//	GPIOC->ODR = pixel[2056];
//
//	GPIOC->ODR = pixel[2057];
//	GPIOC->ODR = pixel[2057];
//
//	GPIOC->ODR = pixel[2058];
//	GPIOC->ODR = pixel[2058];
//
//	GPIOC->ODR = pixel[2059];
//	GPIOC->ODR = pixel[2059];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2060];
//	GPIOC->ODR = pixel[2060];
//
//	GPIOC->ODR = pixel[2061];
//	GPIOC->ODR = pixel[2061];
//
//	GPIOC->ODR = pixel[2062];
//	GPIOC->ODR = pixel[2062];
//
//	GPIOC->ODR = pixel[2063];
//	GPIOC->ODR = pixel[2063];
//
//	GPIOC->ODR = pixel[2064];
//	GPIOC->ODR = pixel[2064];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2065];
//	GPIOC->ODR = pixel[2065];
//
//	GPIOC->ODR = pixel[2066];
//	GPIOC->ODR = pixel[2066];
//
//	GPIOC->ODR = pixel[2067];
//	GPIOC->ODR = pixel[2067];
//
//	GPIOC->ODR = pixel[2068];
//	GPIOC->ODR = pixel[2068];
//
//	GPIOC->ODR = pixel[2069];
//	GPIOC->ODR = pixel[2069];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2070];
//	GPIOC->ODR = pixel[2070];
//
//	GPIOC->ODR = pixel[2071];
//	GPIOC->ODR = pixel[2071];
//
//	GPIOC->ODR = pixel[2072];
//	GPIOC->ODR = pixel[2072];
//
//	GPIOC->ODR = pixel[2073];
//	GPIOC->ODR = pixel[2073];
//
//	GPIOC->ODR = pixel[2074];
//	GPIOC->ODR = pixel[2074];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2075];
//	GPIOC->ODR = pixel[2075];
//
//	GPIOC->ODR = pixel[2076];
//	GPIOC->ODR = pixel[2076];
//
//	GPIOC->ODR = pixel[2077];
//	GPIOC->ODR = pixel[2077];
//
//	GPIOC->ODR = pixel[2078];
//	GPIOC->ODR = pixel[2078];
//
//	GPIOC->ODR = pixel[2079];
//	GPIOC->ODR = pixel[2079];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2080];
//	GPIOC->ODR = pixel[2080];
//
//	GPIOC->ODR = pixel[2081];
//	GPIOC->ODR = pixel[2081];
//
//	GPIOC->ODR = pixel[2082];
//	GPIOC->ODR = pixel[2082];
//
//	GPIOC->ODR = pixel[2083];
//	GPIOC->ODR = pixel[2083];
//
//	GPIOC->ODR = pixel[2084];
//	GPIOC->ODR = pixel[2084];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2085];
//	GPIOC->ODR = pixel[2085];
//
//	GPIOC->ODR = pixel[2086];
//	GPIOC->ODR = pixel[2086];
//
//	GPIOC->ODR = pixel[2087];
//	GPIOC->ODR = pixel[2087];
//
//	GPIOC->ODR = pixel[2088];
//	GPIOC->ODR = pixel[2088];
//
//	GPIOC->ODR = pixel[2089];
//	GPIOC->ODR = pixel[2089];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2090];
//	GPIOC->ODR = pixel[2090];
//
//	GPIOC->ODR = pixel[2091];
//	GPIOC->ODR = pixel[2091];
//
//	GPIOC->ODR = pixel[2092];
//	GPIOC->ODR = pixel[2092];
//
//	GPIOC->ODR = pixel[2093];
//	GPIOC->ODR = pixel[2093];
//
//	GPIOC->ODR = pixel[2094];
//	GPIOC->ODR = pixel[2094];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2095];
//	GPIOC->ODR = pixel[2095];
//
//	GPIOC->ODR = pixel[2096];
//	GPIOC->ODR = pixel[2096];
//
//	GPIOC->ODR = pixel[2097];
//	GPIOC->ODR = pixel[2097];
//
//	GPIOC->ODR = pixel[2098];
//	GPIOC->ODR = pixel[2098];
//
//	GPIOC->ODR = pixel[2099];
//	GPIOC->ODR = pixel[2099];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 390 ... 394: //99c
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF; // dot
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2100];
//	GPIOC->ODR = pixel[2100];
//
//	GPIOC->ODR = pixel[2101];
//	GPIOC->ODR = pixel[2101];
//
//	GPIOC->ODR = pixel[2102];
//	GPIOC->ODR = pixel[2102];
//
//	GPIOC->ODR = pixel[2103];
//	GPIOC->ODR = pixel[2103];
//
//	GPIOC->ODR = pixel[2104];
//	GPIOC->ODR = pixel[2104];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2105];
//	GPIOC->ODR = pixel[2105];
//
//	GPIOC->ODR = pixel[2106];
//	GPIOC->ODR = pixel[2106];
//
//	GPIOC->ODR = pixel[2107];
//	GPIOC->ODR = pixel[2107];
//
//	GPIOC->ODR = pixel[2108];
//	GPIOC->ODR = pixel[2108];
//
//	GPIOC->ODR = pixel[2109];
//	GPIOC->ODR = pixel[2109];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2110];
//	GPIOC->ODR = pixel[2110];
//
//	GPIOC->ODR = pixel[2111];
//	GPIOC->ODR = pixel[2111];
//
//	GPIOC->ODR = pixel[2112];
//	GPIOC->ODR = pixel[2112];
//
//	GPIOC->ODR = pixel[2113];
//	GPIOC->ODR = pixel[2113];
//
//	GPIOC->ODR = pixel[2114];
//	GPIOC->ODR = pixel[2114];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2115];
//	GPIOC->ODR = pixel[2115];
//
//	GPIOC->ODR = pixel[2116];
//	GPIOC->ODR = pixel[2116];
//
//	GPIOC->ODR = pixel[2117];
//	GPIOC->ODR = pixel[2117];
//
//	GPIOC->ODR = pixel[2118];
//	GPIOC->ODR = pixel[2118];
//
//	GPIOC->ODR = pixel[2119];
//	GPIOC->ODR = pixel[2119];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2120];
//	GPIOC->ODR = pixel[2120];
//
//	GPIOC->ODR = pixel[2121];
//	GPIOC->ODR = pixel[2121];
//
//	GPIOC->ODR = pixel[2122];
//	GPIOC->ODR = pixel[2122];
//
//	GPIOC->ODR = pixel[2123];
//	GPIOC->ODR = pixel[2123];
//
//	GPIOC->ODR = pixel[2124];
//	GPIOC->ODR = pixel[2124];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2125];
//	GPIOC->ODR = pixel[2125];
//
//	GPIOC->ODR = pixel[2126];
//	GPIOC->ODR = pixel[2126];
//
//	GPIOC->ODR = pixel[2127];
//	GPIOC->ODR = pixel[2127];
//
//	GPIOC->ODR = pixel[2128];
//	GPIOC->ODR = pixel[2128];
//
//	GPIOC->ODR = pixel[2129];
//	GPIOC->ODR = pixel[2129];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2130];
//	GPIOC->ODR = pixel[2130];
//
//	GPIOC->ODR = pixel[2131];
//	GPIOC->ODR = pixel[2131];
//
//	GPIOC->ODR = pixel[2132];
//	GPIOC->ODR = pixel[2132];
//
//	GPIOC->ODR = pixel[2133];
//	GPIOC->ODR = pixel[2133];
//
//	GPIOC->ODR = pixel[2134];
//	GPIOC->ODR = pixel[2134];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2135];
//	GPIOC->ODR = pixel[2135];
//
//	GPIOC->ODR = pixel[2136];
//	GPIOC->ODR = pixel[2136];
//
//	GPIOC->ODR = pixel[2137];
//	GPIOC->ODR = pixel[2137];
//
//	GPIOC->ODR = pixel[2138];
//	GPIOC->ODR = pixel[2138];
//
//	GPIOC->ODR = pixel[2139];
//	GPIOC->ODR = pixel[2139];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2140];
//	GPIOC->ODR = pixel[2140];
//
//	GPIOC->ODR = pixel[2141];
//	GPIOC->ODR = pixel[2141];
//
//	GPIOC->ODR = pixel[2142];
//	GPIOC->ODR = pixel[2142];
//
//	GPIOC->ODR = pixel[2143];
//	GPIOC->ODR = pixel[2143];
//
//	GPIOC->ODR = pixel[2144];
//	GPIOC->ODR = pixel[2144];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2145];
//	GPIOC->ODR = pixel[2145];
//
//	GPIOC->ODR = pixel[2146];
//	GPIOC->ODR = pixel[2146];
//
//	GPIOC->ODR = pixel[2147];
//	GPIOC->ODR = pixel[2147];
//
//	GPIOC->ODR = pixel[2148];
//	GPIOC->ODR = pixel[2148];
//
//	GPIOC->ODR = pixel[2149];
//	GPIOC->ODR = pixel[2149];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 395 ... 399://99d
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF; // dot
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2150];
//	GPIOC->ODR = pixel[2150];
//
//	GPIOC->ODR = pixel[2151];
//	GPIOC->ODR = pixel[2151];
//
//	GPIOC->ODR = pixel[2152];
//	GPIOC->ODR = pixel[2152];
//
//	GPIOC->ODR = pixel[2153];
//	GPIOC->ODR = pixel[2153];
//
//	GPIOC->ODR = pixel[2154];
//	GPIOC->ODR = pixel[2154];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2155];
//	GPIOC->ODR = pixel[2155];
//
//	GPIOC->ODR = pixel[2156];
//	GPIOC->ODR = pixel[2156];
//
//	GPIOC->ODR = pixel[2157];
//	GPIOC->ODR = pixel[2157];
//
//	GPIOC->ODR = pixel[2158];
//	GPIOC->ODR = pixel[2158];
//
//	GPIOC->ODR = pixel[2159];
//	GPIOC->ODR = pixel[2159];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2160];
//	GPIOC->ODR = pixel[2160];
//
//	GPIOC->ODR = pixel[2161];
//	GPIOC->ODR = pixel[2161];
//
//	GPIOC->ODR = pixel[2162];
//	GPIOC->ODR = pixel[2162];
//
//	GPIOC->ODR = pixel[2163];
//	GPIOC->ODR = pixel[2163];
//
//	GPIOC->ODR = pixel[2164];
//	GPIOC->ODR = pixel[2164];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2165];
//	GPIOC->ODR = pixel[2165];
//
//	GPIOC->ODR = pixel[2166];
//	GPIOC->ODR = pixel[2166];
//
//	GPIOC->ODR = pixel[2167];
//	GPIOC->ODR = pixel[2167];
//
//	GPIOC->ODR = pixel[2168];
//	GPIOC->ODR = pixel[2168];
//
//	GPIOC->ODR = pixel[2169];
//	GPIOC->ODR = pixel[2169];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2170];
//	GPIOC->ODR = pixel[2170];
//
//	GPIOC->ODR = pixel[2171];
//	GPIOC->ODR = pixel[2171];
//
//	GPIOC->ODR = pixel[2172];
//	GPIOC->ODR = pixel[2172];
//
//	GPIOC->ODR = pixel[2173];
//	GPIOC->ODR = pixel[2173];
//
//	GPIOC->ODR = pixel[2174];
//	GPIOC->ODR = pixel[2174];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2175];
//	GPIOC->ODR = pixel[2175];
//
//	GPIOC->ODR = pixel[2176];
//	GPIOC->ODR = pixel[2176];
//
//	GPIOC->ODR = pixel[2177];
//	GPIOC->ODR = pixel[2177];
//
//	GPIOC->ODR = pixel[2178];
//	GPIOC->ODR = pixel[2178];
//
//	GPIOC->ODR = pixel[2179];
//	GPIOC->ODR = pixel[2179];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2180];
//	GPIOC->ODR = pixel[2180];
//
//	GPIOC->ODR = pixel[2181];
//	GPIOC->ODR = pixel[2181];
//
//	GPIOC->ODR = pixel[2182];
//	GPIOC->ODR = pixel[2182];
//
//	GPIOC->ODR = pixel[2183];
//	GPIOC->ODR = pixel[2183];
//
//	GPIOC->ODR = pixel[2184];
//	GPIOC->ODR = pixel[2184];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2185];
//	GPIOC->ODR = pixel[2185];
//
//	GPIOC->ODR = pixel[2186];
//	GPIOC->ODR = pixel[2186];
//
//	GPIOC->ODR = pixel[2187];
//	GPIOC->ODR = pixel[2187];
//
//	GPIOC->ODR = pixel[2188];
//	GPIOC->ODR = pixel[2188];
//
//	GPIOC->ODR = pixel[2189];
//	GPIOC->ODR = pixel[2189];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2190];
//	GPIOC->ODR = pixel[2190];
//
//	GPIOC->ODR = pixel[2191];
//	GPIOC->ODR = pixel[2191];
//
//	GPIOC->ODR = pixel[2192];
//	GPIOC->ODR = pixel[2192];
//
//	GPIOC->ODR = pixel[2193];
//	GPIOC->ODR = pixel[2193];
//
//	GPIOC->ODR = pixel[2194];
//	GPIOC->ODR = pixel[2194];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2195];
//	GPIOC->ODR = pixel[2195];
//
//	GPIOC->ODR = pixel[2196];
//	GPIOC->ODR = pixel[2196];
//
//	GPIOC->ODR = pixel[2197];
//	GPIOC->ODR = pixel[2197];
//
//	GPIOC->ODR = pixel[2198];
//	GPIOC->ODR = pixel[2198];
//
//	GPIOC->ODR = pixel[2199];
//	GPIOC->ODR = pixel[2199];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 400 ... 404: //99e
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON; // dot
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2200];
//	GPIOC->ODR = pixel[2200];
//
//	GPIOC->ODR = pixel[2201];
//	GPIOC->ODR = pixel[2201];
//
//	GPIOC->ODR = pixel[2202];
//	GPIOC->ODR = pixel[2202];
//
//	GPIOC->ODR = pixel[2203];
//	GPIOC->ODR = pixel[2203];
//
//	GPIOC->ODR = pixel[2204];
//	GPIOC->ODR = pixel[2204];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2205];
//	GPIOC->ODR = pixel[2205];
//
//	GPIOC->ODR = pixel[2206];
//	GPIOC->ODR = pixel[2206];
//
//	GPIOC->ODR = pixel[2207];
//	GPIOC->ODR = pixel[2207];
//
//	GPIOC->ODR = pixel[2208];
//	GPIOC->ODR = pixel[2208];
//
//	GPIOC->ODR = pixel[2209];
//	GPIOC->ODR = pixel[2209];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2210];
//	GPIOC->ODR = pixel[2210];
//
//	GPIOC->ODR = pixel[2211];
//	GPIOC->ODR = pixel[2211];
//
//	GPIOC->ODR = pixel[2212];
//	GPIOC->ODR = pixel[2212];
//
//	GPIOC->ODR = pixel[2213];
//	GPIOC->ODR = pixel[2213];
//
//	GPIOC->ODR = pixel[2214];
//	GPIOC->ODR = pixel[2214];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2215];
//	GPIOC->ODR = pixel[2215];
//
//	GPIOC->ODR = pixel[2216];
//	GPIOC->ODR = pixel[2216];
//
//	GPIOC->ODR = pixel[2217];
//	GPIOC->ODR = pixel[2217];
//
//	GPIOC->ODR = pixel[2218];
//	GPIOC->ODR = pixel[2218];
//
//	GPIOC->ODR = pixel[2219];
//	GPIOC->ODR = pixel[2219];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2220];
//	GPIOC->ODR = pixel[2220];
//
//	GPIOC->ODR = pixel[2221];
//	GPIOC->ODR = pixel[2221];
//
//	GPIOC->ODR = pixel[2222];
//	GPIOC->ODR = pixel[2222];
//
//	GPIOC->ODR = pixel[2223];
//	GPIOC->ODR = pixel[2223];
//
//	GPIOC->ODR = pixel[2224];
//	GPIOC->ODR = pixel[2224];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2225];
//	GPIOC->ODR = pixel[2225];
//
//	GPIOC->ODR = pixel[2226];
//	GPIOC->ODR = pixel[2226];
//
//	GPIOC->ODR = pixel[2227];
//	GPIOC->ODR = pixel[2227];
//
//	GPIOC->ODR = pixel[2228];
//	GPIOC->ODR = pixel[2228];
//
//	GPIOC->ODR = pixel[2229];
//	GPIOC->ODR = pixel[2229];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2230];
//	GPIOC->ODR = pixel[2230];
//
//	GPIOC->ODR = pixel[2231];
//	GPIOC->ODR = pixel[2231];
//
//	GPIOC->ODR = pixel[2232];
//	GPIOC->ODR = pixel[2232];
//
//	GPIOC->ODR = pixel[2233];
//	GPIOC->ODR = pixel[2233];
//
//	GPIOC->ODR = pixel[2234];
//	GPIOC->ODR = pixel[2234];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2235];
//	GPIOC->ODR = pixel[2235];
//
//	GPIOC->ODR = pixel[2236];
//	GPIOC->ODR = pixel[2236];
//
//	GPIOC->ODR = pixel[2237];
//	GPIOC->ODR = pixel[2237];
//
//	GPIOC->ODR = pixel[2238];
//	GPIOC->ODR = pixel[2238];
//
//	GPIOC->ODR = pixel[2239];
//	GPIOC->ODR = pixel[2239];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2240];
//	GPIOC->ODR = pixel[2240];
//
//	GPIOC->ODR = pixel[2241];
//	GPIOC->ODR = pixel[2241];
//
//	GPIOC->ODR = pixel[2242];
//	GPIOC->ODR = pixel[2242];
//
//	GPIOC->ODR = pixel[2243];
//	GPIOC->ODR = pixel[2243];
//
//	GPIOC->ODR = pixel[2244];
//	GPIOC->ODR = pixel[2244];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = pixel[2245];
//	GPIOC->ODR = pixel[2245];
//
//	GPIOC->ODR = pixel[2246];
//	GPIOC->ODR = pixel[2246];
//
//	GPIOC->ODR = pixel[2247];
//	GPIOC->ODR = pixel[2247];
//
//	GPIOC->ODR = pixel[2248];
//	GPIOC->ODR = pixel[2248];
//
//	GPIOC->ODR = pixel[2249];
//	GPIOC->ODR = pixel[2249];
//
//	GPIOC->ODR = White_ON;
//	GPIOC->ODR = White_ON;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 405 ... 409:
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	while(waste_of_time<50)
//	{
//		GPIOC->ODR = White_ON;
//		waste_of_time++;
//	}
//	waste_of_time = 0;
//	GPIOC->ODR = White_OFF;
//	break;
//	case 410 ... 410:
//	GPIOC->ODR = White_OFF;
//	break;
//	case 411 ... 414:
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//
//	while(waste_of_time<50)
//	{
//		GPIOC->ODR = White_ON;
//		waste_of_time++;
//	}
//	waste_of_time = 0;
//	GPIOC->ODR = White_OFF;
//	break;
//	}
//	break;

//
//	case 415 ... 449://tens
//	break;
//
//	case 450 ... 600:
//	GPIOC->ODR = White_OFF;
//	break;


void Write_Name(void)
{
	int white[50];
	white[49] = 0xF00;
	white[0] = 0xF00;
	white[1] = 0xF00;
	white[2] = 0xF00;
	white[3] = 0xF00;
	white[4] = 0xF00;
	white[5] = 0xF00;
	white[6] = 0xF00;
	white[7] = 0xF00;
	white[8] = 0xF00;
	white[9] = 0xF00;
	white[10] = 0xF00;
	white[11] = 0xF00;
	white[12] = 0xF00;
	white[13] = 0xF00;
	white[14] = 0xF00;
	white[15] = 0xF00;
	white[16] = 0xF00;
	white[17] = 0xF00;
	white[18] = 0xF00;
	white[19] = 0xF00;
	white[20] = 0xF00;
	white[21] = 0xF00;
	white[22] = 0xF00;
	white[23] = 0xF00;
	white[24] = 0xF00;
	white[25] = 0xF00;
	white[26] = 0xF00;
	white[27] = 0xF00;
	white[28] = 0xF00;
	white[29] = 0xF00;

	switch(Lines)
	{
	case 0 ... 121: //acase = 1
	GPIOC->ODR &= White_OFF;
	break;
	case 122 ... 170: //acase = 2
	switch(Lines)
	{
		case 122 ... 128: //acase = 2.1
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 129 ... 135: // acase = 2.2
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = pixel[0];
		GPIOC->ODR = pixel[0];
		GPIOC->ODR = pixel[1];
		GPIOC->ODR = pixel[1];
		GPIOC->ODR = pixel[2];
		GPIOC->ODR = pixel[2];
		GPIOC->ODR = pixel[3];
		GPIOC->ODR = pixel[3];
		GPIOC->ODR = pixel[4];
		GPIOC->ODR = pixel[4];
		GPIOC->ODR |= white[49];
		waste_of_time = 0;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[5];
		GPIOC->ODR = pixel[5];
		GPIOC->ODR = pixel[6];
		GPIOC->ODR = pixel[6];
		GPIOC->ODR = pixel[7];
		GPIOC->ODR = pixel[7];
		GPIOC->ODR = pixel[8];
		GPIOC->ODR = pixel[8];
		GPIOC->ODR = pixel[9];
		GPIOC->ODR = pixel[9];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[10];
		GPIOC->ODR = pixel[10];
		GPIOC->ODR = pixel[11];
		GPIOC->ODR = pixel[11];
		GPIOC->ODR = pixel[12];
		GPIOC->ODR = pixel[12];
		GPIOC->ODR = pixel[13];
		GPIOC->ODR = pixel[13];
		GPIOC->ODR = pixel[14];
		GPIOC->ODR = pixel[14];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[15];
		GPIOC->ODR = pixel[15];
		GPIOC->ODR = pixel[16];
		GPIOC->ODR = pixel[16];
		GPIOC->ODR = pixel[17];
		GPIOC->ODR = pixel[17];
		GPIOC->ODR = pixel[18];
		GPIOC->ODR = pixel[18];
		GPIOC->ODR = pixel[19];
		GPIOC->ODR = pixel[19];
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = pixel[20];
		GPIOC->ODR = pixel[20];
		GPIOC->ODR = pixel[21];
		GPIOC->ODR = pixel[21];
		GPIOC->ODR = pixel[22];
		GPIOC->ODR = pixel[22];
		GPIOC->ODR = pixel[23];
		GPIOC->ODR = pixel[23];
		GPIOC->ODR = pixel[24];
		GPIOC->ODR = pixel[24];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[25];
		GPIOC->ODR = pixel[25];
		GPIOC->ODR = pixel[26];
		GPIOC->ODR = pixel[26];
		GPIOC->ODR = pixel[27];
		GPIOC->ODR = pixel[27];
		GPIOC->ODR = pixel[28];
		GPIOC->ODR = pixel[28];
		GPIOC->ODR = pixel[29];
		GPIOC->ODR = pixel[29];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[30];
		GPIOC->ODR = pixel[30];
		GPIOC->ODR = pixel[31];
		GPIOC->ODR = pixel[31];
		GPIOC->ODR = pixel[32];
		GPIOC->ODR = pixel[32];
		GPIOC->ODR = pixel[33];
		GPIOC->ODR = pixel[33];
		GPIOC->ODR = pixel[34];
		GPIOC->ODR = pixel[34];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[35];
		GPIOC->ODR = pixel[35];
		GPIOC->ODR = pixel[36];
		GPIOC->ODR = pixel[36];
		GPIOC->ODR = pixel[37];
		GPIOC->ODR = pixel[37];
		GPIOC->ODR = pixel[38];
		GPIOC->ODR = pixel[38];
		GPIOC->ODR = pixel[39];
		GPIOC->ODR = pixel[39];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		waste_of_time = 0;
		GPIOC->ODR = pixel[40];
		GPIOC->ODR = pixel[40];
		GPIOC->ODR = pixel[41];
		GPIOC->ODR = pixel[41];
		GPIOC->ODR = pixel[42];
		GPIOC->ODR = pixel[42];
		GPIOC->ODR = pixel[43];
		GPIOC->ODR = pixel[43];
		GPIOC->ODR = pixel[44];
		GPIOC->ODR = pixel[44];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[45];
		GPIOC->ODR = pixel[45];
		GPIOC->ODR = pixel[46];
		GPIOC->ODR = pixel[46];
		GPIOC->ODR = pixel[47];
		GPIOC->ODR = pixel[47];
		GPIOC->ODR = pixel[48];
		GPIOC->ODR = pixel[48];
		GPIOC->ODR = pixel[49];
		GPIOC->ODR = pixel[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 136 ... 142: // acase = 2.3
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = pixel[50];
		GPIOC->ODR = pixel[50];
		GPIOC->ODR = pixel[51];
		GPIOC->ODR = pixel[51];
		GPIOC->ODR = pixel[52];
		GPIOC->ODR = pixel[52];
		GPIOC->ODR = pixel[53];
		GPIOC->ODR = pixel[53];
		GPIOC->ODR = pixel[54];
		GPIOC->ODR = pixel[54];
		GPIOC->ODR |= white[49];
		waste_of_time = 0;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[55];
		GPIOC->ODR = pixel[55];
		GPIOC->ODR = pixel[56];
		GPIOC->ODR = pixel[56];
		GPIOC->ODR = pixel[57];
		GPIOC->ODR = pixel[57];
		GPIOC->ODR = pixel[58];
		GPIOC->ODR = pixel[58];
		GPIOC->ODR = pixel[59];
		GPIOC->ODR = pixel[59];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[60];
		GPIOC->ODR = pixel[60];
		GPIOC->ODR = pixel[61];
		GPIOC->ODR = pixel[61];
		GPIOC->ODR = pixel[62];
		GPIOC->ODR = pixel[62];
		GPIOC->ODR = pixel[63];
		GPIOC->ODR = pixel[63];
		GPIOC->ODR = pixel[64];
		GPIOC->ODR = pixel[64];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[65];
		GPIOC->ODR = pixel[65];
		GPIOC->ODR = pixel[66];
		GPIOC->ODR = pixel[66];
		GPIOC->ODR = pixel[67];
		GPIOC->ODR = pixel[67];
		GPIOC->ODR = pixel[68];
		GPIOC->ODR = pixel[68];
		GPIOC->ODR = pixel[69];
		GPIOC->ODR = pixel[69];
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = pixel[70];
		GPIOC->ODR = pixel[70];
		GPIOC->ODR = pixel[71];
		GPIOC->ODR = pixel[71];
		GPIOC->ODR = pixel[72];
		GPIOC->ODR = pixel[72];
		GPIOC->ODR = pixel[73];
		GPIOC->ODR = pixel[73];
		GPIOC->ODR = pixel[74];
		GPIOC->ODR = pixel[74];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[75];
		GPIOC->ODR = pixel[75];
		GPIOC->ODR = pixel[76];
		GPIOC->ODR = pixel[76];
		GPIOC->ODR = pixel[77];
		GPIOC->ODR = pixel[77];
		GPIOC->ODR = pixel[78];
		GPIOC->ODR = pixel[78];
		GPIOC->ODR = pixel[79];
		GPIOC->ODR = pixel[79];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[80];
		GPIOC->ODR = pixel[80];
		GPIOC->ODR = pixel[81];
		GPIOC->ODR = pixel[81];
		GPIOC->ODR = pixel[82];
		GPIOC->ODR = pixel[82];
		GPIOC->ODR = pixel[83];
		GPIOC->ODR = pixel[83];
		GPIOC->ODR = pixel[84];
		GPIOC->ODR = pixel[84];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[85];
		GPIOC->ODR = pixel[85];
		GPIOC->ODR = pixel[86];
		GPIOC->ODR = pixel[86];
		GPIOC->ODR = pixel[87];
		GPIOC->ODR = pixel[87];
		GPIOC->ODR = pixel[88];
		GPIOC->ODR = pixel[88];
		GPIOC->ODR = pixel[89];
		GPIOC->ODR = pixel[89];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		waste_of_time = 0;
		GPIOC->ODR = pixel[90];
		GPIOC->ODR = pixel[90];
		GPIOC->ODR = pixel[91];
		GPIOC->ODR = pixel[91];
		GPIOC->ODR = pixel[92];
		GPIOC->ODR = pixel[92];
		GPIOC->ODR = pixel[93];
		GPIOC->ODR = pixel[93];
		GPIOC->ODR = pixel[94];
		GPIOC->ODR = pixel[94];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[95];
		GPIOC->ODR = pixel[95];
		GPIOC->ODR = pixel[96];
		GPIOC->ODR = pixel[96];
		GPIOC->ODR = pixel[97];
		GPIOC->ODR = pixel[97];
		GPIOC->ODR = pixel[98];
		GPIOC->ODR = pixel[98];
		GPIOC->ODR = pixel[99];
		GPIOC->ODR = pixel[99];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 143 ... 149: // acase = 2.4
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = pixel[100];
		GPIOC->ODR = pixel[100];
		GPIOC->ODR = pixel[101];
		GPIOC->ODR = pixel[101];
		GPIOC->ODR = pixel[102];
		GPIOC->ODR = pixel[102];
		GPIOC->ODR = pixel[103];
		GPIOC->ODR = pixel[103];
		GPIOC->ODR = pixel[104];
		GPIOC->ODR = pixel[104];
		GPIOC->ODR |= white[49];
		waste_of_time = 0;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[105];
		GPIOC->ODR = pixel[105];
		GPIOC->ODR = pixel[106];
		GPIOC->ODR = pixel[106];
		GPIOC->ODR = pixel[107];
		GPIOC->ODR = pixel[107];
		GPIOC->ODR = pixel[108];
		GPIOC->ODR = pixel[108];
		GPIOC->ODR = pixel[109];
		GPIOC->ODR = pixel[109];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[110];
		GPIOC->ODR = pixel[110];
		GPIOC->ODR = pixel[111];
		GPIOC->ODR = pixel[111];
		GPIOC->ODR = pixel[112];
		GPIOC->ODR = pixel[112];
		GPIOC->ODR = pixel[113];
		GPIOC->ODR = pixel[113];
		GPIOC->ODR = pixel[114];
		GPIOC->ODR = pixel[114];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[115];
		GPIOC->ODR = pixel[115];
		GPIOC->ODR = pixel[116];
		GPIOC->ODR = pixel[116];
		GPIOC->ODR = pixel[117];
		GPIOC->ODR = pixel[117];
		GPIOC->ODR = pixel[118];
		GPIOC->ODR = pixel[118];
		GPIOC->ODR = pixel[119];
		GPIOC->ODR = pixel[119];
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = pixel[120];
		GPIOC->ODR = pixel[120];
		GPIOC->ODR = pixel[121];
		GPIOC->ODR = pixel[121];
		GPIOC->ODR = pixel[122];
		GPIOC->ODR = pixel[122];
		GPIOC->ODR = pixel[123];
		GPIOC->ODR = pixel[123];
		GPIOC->ODR = pixel[124];
		GPIOC->ODR = pixel[124];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[125];
		GPIOC->ODR = pixel[125];
		GPIOC->ODR = pixel[126];
		GPIOC->ODR = pixel[126];
		GPIOC->ODR = pixel[127];
		GPIOC->ODR = pixel[127];
		GPIOC->ODR = pixel[128];
		GPIOC->ODR = pixel[128];
		GPIOC->ODR = pixel[129];
		GPIOC->ODR = pixel[129];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[130];
		GPIOC->ODR = pixel[130];
		GPIOC->ODR = pixel[131];
		GPIOC->ODR = pixel[131];
		GPIOC->ODR = pixel[132];
		GPIOC->ODR = pixel[132];
		GPIOC->ODR = pixel[133];
		GPIOC->ODR = pixel[133];
		GPIOC->ODR = pixel[134];
		GPIOC->ODR = pixel[134];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[135];
		GPIOC->ODR = pixel[135];
		GPIOC->ODR = pixel[136];
		GPIOC->ODR = pixel[136];
		GPIOC->ODR = pixel[137];
		GPIOC->ODR = pixel[137];
		GPIOC->ODR = pixel[138];
		GPIOC->ODR = pixel[138];
		GPIOC->ODR = pixel[139];
		GPIOC->ODR = pixel[139];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		waste_of_time = 0;
		GPIOC->ODR = pixel[140];
		GPIOC->ODR = pixel[140];
		GPIOC->ODR = pixel[141];
		GPIOC->ODR = pixel[141];
		GPIOC->ODR = pixel[142];
		GPIOC->ODR = pixel[142];
		GPIOC->ODR = pixel[143];
		GPIOC->ODR = pixel[143];
		GPIOC->ODR = pixel[144];
		GPIOC->ODR = pixel[144];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[145];
		GPIOC->ODR = pixel[145];
		GPIOC->ODR = pixel[146];
		GPIOC->ODR = pixel[146];
		GPIOC->ODR = pixel[147];
		GPIOC->ODR = pixel[147];
		GPIOC->ODR = pixel[148];
		GPIOC->ODR = pixel[148];
		GPIOC->ODR = pixel[149];
		GPIOC->ODR = pixel[149];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 150 ... 156: // acase = 2.5
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = pixel[150];
		GPIOC->ODR = pixel[150];
		GPIOC->ODR = pixel[151];
		GPIOC->ODR = pixel[151];
		GPIOC->ODR = pixel[152];
		GPIOC->ODR = pixel[152];
		GPIOC->ODR = pixel[153];
		GPIOC->ODR = pixel[153];
		GPIOC->ODR = pixel[154];
		GPIOC->ODR = pixel[154];
		GPIOC->ODR |= white[49];
		waste_of_time = 0;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[155];
		GPIOC->ODR = pixel[155];
		GPIOC->ODR = pixel[156];
		GPIOC->ODR = pixel[156];
		GPIOC->ODR = pixel[157];
		GPIOC->ODR = pixel[157];
		GPIOC->ODR = pixel[158];
		GPIOC->ODR = pixel[158];
		GPIOC->ODR = pixel[159];
		GPIOC->ODR = pixel[159];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[160];
		GPIOC->ODR = pixel[160];
		GPIOC->ODR = pixel[161];
		GPIOC->ODR = pixel[161];
		GPIOC->ODR = pixel[162];
		GPIOC->ODR = pixel[162];
		GPIOC->ODR = pixel[163];
		GPIOC->ODR = pixel[163];
		GPIOC->ODR = pixel[164];
		GPIOC->ODR = pixel[164];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[165];
		GPIOC->ODR = pixel[165];
		GPIOC->ODR = pixel[166];
		GPIOC->ODR = pixel[166];
		GPIOC->ODR = pixel[167];
		GPIOC->ODR = pixel[167];
		GPIOC->ODR = pixel[168];
		GPIOC->ODR = pixel[168];
		GPIOC->ODR = pixel[169];
		GPIOC->ODR = pixel[169];
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = pixel[170];
		GPIOC->ODR = pixel[170];
		GPIOC->ODR = pixel[171];
		GPIOC->ODR = pixel[171];
		GPIOC->ODR = pixel[172];
		GPIOC->ODR = pixel[172];
		GPIOC->ODR = pixel[173];
		GPIOC->ODR = pixel[173];
		GPIOC->ODR = pixel[174];
		GPIOC->ODR = pixel[174];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[175];
		GPIOC->ODR = pixel[175];
		GPIOC->ODR = pixel[176];
		GPIOC->ODR = pixel[176];
		GPIOC->ODR = pixel[177];
		GPIOC->ODR = pixel[177];
		GPIOC->ODR = pixel[178];
		GPIOC->ODR = pixel[178];
		GPIOC->ODR = pixel[179];
		GPIOC->ODR = pixel[179];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[180];
		GPIOC->ODR = pixel[180];
		GPIOC->ODR = pixel[181];
		GPIOC->ODR = pixel[181];
		GPIOC->ODR = pixel[182];
		GPIOC->ODR = pixel[182];
		GPIOC->ODR = pixel[183];
		GPIOC->ODR = pixel[183];
		GPIOC->ODR = pixel[184];
		GPIOC->ODR = pixel[184];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[185];
		GPIOC->ODR = pixel[185];
		GPIOC->ODR = pixel[186];
		GPIOC->ODR = pixel[186];
		GPIOC->ODR = pixel[187];
		GPIOC->ODR = pixel[187];
		GPIOC->ODR = pixel[188];
		GPIOC->ODR = pixel[188];
		GPIOC->ODR = pixel[189];
		GPIOC->ODR = pixel[189];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		waste_of_time = 0;
		GPIOC->ODR = pixel[190];
		GPIOC->ODR = pixel[190];
		GPIOC->ODR = pixel[191];
		GPIOC->ODR = pixel[191];
		GPIOC->ODR = pixel[192];
		GPIOC->ODR = pixel[192];
		GPIOC->ODR = pixel[193];
		GPIOC->ODR = pixel[193];
		GPIOC->ODR = pixel[194];
		GPIOC->ODR = pixel[194];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[195];
		GPIOC->ODR = pixel[195];
		GPIOC->ODR = pixel[196];
		GPIOC->ODR = pixel[196];
		GPIOC->ODR = pixel[197];
		GPIOC->ODR = pixel[197];
		GPIOC->ODR = pixel[198];
		GPIOC->ODR = pixel[198];
		GPIOC->ODR = pixel[199];
		GPIOC->ODR = pixel[199];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 157 ... 163: // acase = 2.6
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = pixel[200];
		GPIOC->ODR = pixel[200];
		GPIOC->ODR = pixel[201];
		GPIOC->ODR = pixel[201];
		GPIOC->ODR = pixel[202];
		GPIOC->ODR = pixel[202];
		GPIOC->ODR = pixel[203];
		GPIOC->ODR = pixel[203];
		GPIOC->ODR = pixel[204];
		GPIOC->ODR = pixel[204];
		GPIOC->ODR |= white[49];
		waste_of_time = 0;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[205];
		GPIOC->ODR = pixel[205];
		GPIOC->ODR = pixel[206];
		GPIOC->ODR = pixel[206];
		GPIOC->ODR = pixel[207];
		GPIOC->ODR = pixel[207];
		GPIOC->ODR = pixel[208];
		GPIOC->ODR = pixel[208];
		GPIOC->ODR = pixel[209];
		GPIOC->ODR = pixel[209];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[210];
		GPIOC->ODR = pixel[210];
		GPIOC->ODR = pixel[211];
		GPIOC->ODR = pixel[211];
		GPIOC->ODR = pixel[212];
		GPIOC->ODR = pixel[212];
		GPIOC->ODR = pixel[213];
		GPIOC->ODR = pixel[213];
		GPIOC->ODR = pixel[214];
		GPIOC->ODR = pixel[214];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[215];
		GPIOC->ODR = pixel[215];
		GPIOC->ODR = pixel[216];
		GPIOC->ODR = pixel[216];
		GPIOC->ODR = pixel[217];
		GPIOC->ODR = pixel[217];
		GPIOC->ODR = pixel[218];
		GPIOC->ODR = pixel[218];
		GPIOC->ODR = pixel[219];
		GPIOC->ODR = pixel[219];
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR = pixel[220];
		GPIOC->ODR = pixel[220];
		GPIOC->ODR = pixel[221];
		GPIOC->ODR = pixel[221];
		GPIOC->ODR = pixel[222];
		GPIOC->ODR = pixel[222];
		GPIOC->ODR = pixel[223];
		GPIOC->ODR = pixel[223];
		GPIOC->ODR = pixel[224];
		GPIOC->ODR = pixel[224];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[225];
		GPIOC->ODR = pixel[225];
		GPIOC->ODR = pixel[226];
		GPIOC->ODR = pixel[226];
		GPIOC->ODR = pixel[227];
		GPIOC->ODR = pixel[227];
		GPIOC->ODR = pixel[228];
		GPIOC->ODR = pixel[228];
		GPIOC->ODR = pixel[229];
		GPIOC->ODR = pixel[229];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[230];
		GPIOC->ODR = pixel[230];
		GPIOC->ODR = pixel[231];
		GPIOC->ODR = pixel[231];
		GPIOC->ODR = pixel[232];
		GPIOC->ODR = pixel[232];
		GPIOC->ODR = pixel[233];
		GPIOC->ODR = pixel[233];
		GPIOC->ODR = pixel[234];
		GPIOC->ODR = pixel[234];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[235];
		GPIOC->ODR = pixel[235];
		GPIOC->ODR = pixel[236];
		GPIOC->ODR = pixel[236];
		GPIOC->ODR = pixel[237];
		GPIOC->ODR = pixel[237];
		GPIOC->ODR = pixel[238];
		GPIOC->ODR = pixel[238];
		GPIOC->ODR = pixel[239];
		GPIOC->ODR = pixel[239];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR = white[49];
		waste_of_time = 0;
		GPIOC->ODR = pixel[240];
		GPIOC->ODR = pixel[240];
		GPIOC->ODR = pixel[241];
		GPIOC->ODR = pixel[241];
		GPIOC->ODR = pixel[242];
		GPIOC->ODR = pixel[242];
		GPIOC->ODR = pixel[243];
		GPIOC->ODR = pixel[243];
		GPIOC->ODR = pixel[244];
		GPIOC->ODR = pixel[244];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = pixel[245];
		GPIOC->ODR = pixel[245];
		GPIOC->ODR = pixel[246];
		GPIOC->ODR = pixel[246];
		GPIOC->ODR = pixel[247];
		GPIOC->ODR = pixel[247];
		GPIOC->ODR = pixel[248];
		GPIOC->ODR = pixel[248];
		GPIOC->ODR = pixel[249];
		GPIOC->ODR = pixel[249];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 164 ... 170: // acase = 2.7
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
//		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];
		GPIOC->ODR = white[49];
		GPIOC->ODR |= white[49];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
	}
	break;
	case 171 ... 301://acase = 3
	GPIOC->ODR &= White_OFF;
	break;
	case 302 ... 350: //acase = 4
	while(waste_of_time<2)
	{
		GPIOC->ODR &= White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;
	waste_of_time = 0;

	white[Mine_state] = Yellow_Sand;

	switch(Lines)
	{
		case 301 ... 308: //acase = 4.1
		GPIOC->ODR = white[0];
		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR |= white[0];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[1];
		GPIOC->ODR |= white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR |= white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR |= white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR |= white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR |= white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR |= white[1];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[2];
		GPIOC->ODR |= white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR |= white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR |= white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR |= white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR |= white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR |= white[2];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR |= white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR |= white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR |= white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR |= white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR |= white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR |= white[3];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[4];
		GPIOC->ODR |= white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR |= white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR |= white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR |= white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR |= white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR |= white[4];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[5];
		GPIOC->ODR |= white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR |= white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR |= white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR |= white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR |= white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR |= white[5];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[6];
		GPIOC->ODR |= white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR |= white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR |= white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR |= white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR |= white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR |= white[6];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR |= white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR |= white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR |= white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR |= white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR |= white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR |= white[7];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[8];
		GPIOC->ODR |= white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR |= white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR |= white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR |= white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR |= white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR |= white[8];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[9];
		GPIOC->ODR |= white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR |= white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR |= white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR |= white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR |= white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR |= white[9];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;

		case 309 ... 315: // acase = 4.2 AA1
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;  // BB1

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR |= white[1];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; // CC1

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR |= white[2];

		GPIOC->ODR = White_OFF; //DD1
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR |= white[3];

		GPIOC->ODR = White_OFF;//EE1
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = white[4];

		GPIOC->ODR |= white[4];

		GPIOC->ODR = White_OFF; //FF1
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = white[5];

		GPIOC->ODR |= white[5];

		GPIOC->ODR = White_OFF; //GG1
		GPIOC->ODR &= White_OFF;


		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR |= white[6];

		GPIOC->ODR = White_OFF; //HH1
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR |= white[7];

		GPIOC->ODR = White_OFF;//II1
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR |= white[8];

		GPIOC->ODR = White_OFF;//JJ1
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR |= white[9];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;

		case 316 ... 322: // acase = 4.3 AA2
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];



		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;// BB2

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR = white[1];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR |= white[1];

		GPIOC->ODR = White_OFF; // CC2
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR |= white[2];

		GPIOC->ODR = White_OFF; //DD2
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR |= white[3];


		GPIOC->ODR = White_OFF;//EE2
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR |= white[4];

		GPIOC->ODR = White_OFF;//FF2
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR |= white[5];

		GPIOC->ODR = White_OFF;//GG2
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = white[6];

		GPIOC->ODR |= white[6];

		GPIOC->ODR = White_OFF;//HH2
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR |= white[7];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//II2

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR |= white[8];

		GPIOC->ODR = White_OFF;//JJ2
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];


		GPIOC->ODR |= white[9];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 323 ... 329: // acase = 4.4 AA3
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = White_OFF; // BB3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];


		GPIOC->ODR = White_OFF; //CC3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = White_OFF; //DD3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR |= white[3];

		GPIOC->ODR = White_OFF;//EE3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR |= white[4];

		GPIOC->ODR = White_OFF;//FF3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR |= white[5];

		GPIOC->ODR = White_OFF;//GG3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];


		GPIOC->ODR |= white[6];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//HH3


		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = white[7];

		GPIOC->ODR |= white[7];


		GPIOC->ODR = White_OFF;//II3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR |= white[8];

		GPIOC->ODR = White_OFF;//JJ3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR |= white[9];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 330 ... 336: // acase = 4.5 AA4
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //BB4

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR = white[1];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR |= white[1];

		GPIOC->ODR = White_OFF; //CC4
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR |= white[2];

		GPIOC->ODR = White_OFF;//DD4
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR |= white[3];

		GPIOC->ODR = White_OFF;//EE4
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR |= white[4];

		GPIOC->ODR = White_OFF;//FF4
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR |= white[5];

		GPIOC->ODR = White_OFF;//GG4
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];


		GPIOC->ODR = White_OFF;//HH4
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR |= white[7];

		GPIOC->ODR = White_OFF;//II4
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR |= white[8];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//JJ4

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR |= white[9];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 337 ... 343: // acase = 4.6 AA5
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];

		GPIOC->ODR = White_OFF; // BB5
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];

		GPIOC->ODR |= white[1];

		GPIOC->ODR = White_OFF; //CC5
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];

		GPIOC->ODR |= white[2];

		GPIOC->ODR = White_OFF; //DD5
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];

		GPIOC->ODR |= white[3];

		GPIOC->ODR = White_OFF; //EE5
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];

		GPIOC->ODR = white[4];

		GPIOC->ODR |= white[4];

		GPIOC->ODR = White_OFF;//FF5
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];

		GPIOC->ODR |= white[5];

		GPIOC->ODR = White_OFF;//GG5
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];

		GPIOC->ODR |= white[6];

		GPIOC->ODR = White_OFF;//HH5
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];

		GPIOC->ODR |= white[7];

		GPIOC->ODR = White_OFF;//II5
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];

		GPIOC->ODR |= white[8];

		GPIOC->ODR = White_OFF;//JJ5
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];

		GPIOC->ODR |= white[9];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 344 ... 350: // acase = 4.7
		GPIOC->ODR = white[0];
		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR |= white[0];
		GPIOC->ODR = white[0];
		GPIOC->ODR |= white[0];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[1];
		GPIOC->ODR |= white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR |= white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR |= white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR |= white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR |= white[1];
		GPIOC->ODR = white[1];
		GPIOC->ODR |= white[1];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[2];
		GPIOC->ODR |= white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR |= white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR |= white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR |= white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR |= white[2];
		GPIOC->ODR = white[2];
		GPIOC->ODR |= white[2];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[3];
		GPIOC->ODR |= white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR |= white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR |= white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR |= white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR |= white[3];
		GPIOC->ODR = white[3];
		GPIOC->ODR |= white[3];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[4];
		GPIOC->ODR |= white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR |= white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR |= white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR |= white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR |= white[4];
		GPIOC->ODR = white[4];
		GPIOC->ODR |= white[4];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[5];
		GPIOC->ODR |= white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR |= white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR |= white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR |= white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR |= white[5];
		GPIOC->ODR = white[5];
		GPIOC->ODR |= white[5];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[6];
		GPIOC->ODR |= white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR |= white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR |= white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR |= white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR |= white[6];
		GPIOC->ODR = white[6];
		GPIOC->ODR |= white[6];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[7];
		GPIOC->ODR |= white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR |= white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR |= white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR |= white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR |= white[7];
		GPIOC->ODR = white[7];
		GPIOC->ODR |= white[7];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[8];
		GPIOC->ODR |= white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR |= white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR |= white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR |= white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR |= white[8];
		GPIOC->ODR = white[8];
		GPIOC->ODR |= white[8];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[9];
		GPIOC->ODR |= white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR |= white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR |= white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR |= white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR |= white[9];
		GPIOC->ODR = white[9];
		GPIOC->ODR |= white[9];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
	}
	break;
	case 351 ... 400: //acase = 5
	while(waste_of_time<2)
	{
		GPIOC->ODR &= White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;
	waste_of_time = 0;
	waste_of_time = 0;
	white[Mine_state] = Yellow_Sand;
	switch(Lines)
	{
		case 351 ... 351:
		GPIOC->ODR = White_OFF;
		break;
		case 352 ... 358: //acase = 5.1
		GPIOC->ODR = white[10];
		GPIOC->ODR |= white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR |= white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR |= white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR |= white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR |= white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR |= white[10];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[11];
		GPIOC->ODR |= white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR |= white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR |= white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR |= white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR |= white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR |= white[11];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR |= white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR |= white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR |= white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR |= white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR |= white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR |= white[12];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR |= white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR |= white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR |= white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR |= white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR |= white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR |= white[13];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[14];
		GPIOC->ODR |= white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR |= white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR |= white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR |= white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR |= white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR |= white[14];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[15];
		GPIOC->ODR |= white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR |= white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR |= white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR |= white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR |= white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR |= white[15];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[16];
		GPIOC->ODR |= white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR |= white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR |= white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR |= white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR |= white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR |= white[16];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[17];
		GPIOC->ODR |= white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR |= white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR |= white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR |= white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR |= white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR |= white[17];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[18];
		GPIOC->ODR |= white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR |= white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR |= white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR |= white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR |= white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR |= white[18];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[19];
		GPIOC->ODR |= white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR |= white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR |= white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR |= white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR |= white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR |= white[19];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 359 ... 365: // acase = 5.2 //KK1

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[10];

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR |= white[10];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//LL1

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR |= white[11];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//MM1

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR |= white[12];

		GPIOC->ODR = White_OFF;//NN1
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR |= white[13];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//OO1

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR |= white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = White_OFF;//PP1
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR |= white[15];

		GPIOC->ODR = White_OFF;//QQ1
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR |= white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];


		GPIOC->ODR = White_OFF;//RR1
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR |= white[17];


		GPIOC->ODR = White_OFF;//SS1
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR |= white[18];

		GPIOC->ODR = White_OFF;//TT1
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = white[19];

		GPIOC->ODR = white[19];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[19];

		GPIOC->ODR |= white[19];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 366 ... 372: // acase = 5.3 //KK2

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[10];

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR |= white[10];

		GPIOC->ODR = White_OFF;//LL2
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR |= white[11];


		GPIOC->ODR = White_OFF;//MM2
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR |= white[12];

		GPIOC->ODR = White_OFF;//NN2
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR |= white[13];

		GPIOC->ODR = White_OFF;//OO2
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR |= white[14];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//PP2

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = white[15];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR |= white[15];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//QQ2

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR |= white[16];

		GPIOC->ODR = White_OFF;//RR2
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR = white[17];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR |= white[17];

		GPIOC->ODR = White_OFF;//SS2
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR |= white[18];

		GPIOC->ODR = White_OFF;//TT2
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR |= white[19];
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 373 ... 379: // acase = 5.4KK3

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[10];

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR |= white[10];

		GPIOC->ODR = White_OFF;//LL3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR |= white[11];


		GPIOC->ODR = White_OFF;//MM3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR |= white[12];

		GPIOC->ODR = White_OFF;//NN3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR |= white[13];

		GPIOC->ODR = White_OFF;//OO3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR |= white[14];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//PP3

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR |= white[15];

		GPIOC->ODR = White_OFF;//QQ3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR |= white[16];

		GPIOC->ODR = White_OFF;//RR3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR = White_OFF;//SS3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR |= white[18];

		GPIOC->ODR = White_OFF;//TT3
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR |= white[19];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 380 ... 386: // acase = 5.5KK4

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[10];

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR |= white[10];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//LL4

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR |= white[11];


		GPIOC->ODR = White_OFF;//MM4
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];


		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR |= white[12];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//NN4

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR |= white[13];

		GPIOC->ODR = White_OFF;//OO4
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR |= white[14];

		GPIOC->ODR = White_OFF;//PP4
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR |= white[15];


		GPIOC->ODR = White_OFF;//QQ4
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR |= white[16];
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//RR4

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR |= white[17];

		GPIOC->ODR = White_OFF;//SS4
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR |= white[18];


		GPIOC->ODR = White_OFF;//TT4
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR |= white[19];
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 387 ... 393: // acase = 5.6KK5

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[10];

		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];

		GPIOC->ODR |= white[10];

		GPIOC->ODR = White_OFF;//LL5
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];

		GPIOC->ODR = white[11];

		GPIOC->ODR |= white[11];


		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//MM5

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];

		GPIOC->ODR |= white[12];


		GPIOC->ODR = White_OFF;//NN5
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];

		GPIOC->ODR |= white[13];

		GPIOC->ODR = White_OFF;//OO5
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR |= white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];

		GPIOC->ODR = White_OFF;//PP5
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];

		GPIOC->ODR |= white[15];


		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//QQ5

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR |= white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];

		GPIOC->ODR = White_OFF;//RR5
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];

		GPIOC->ODR |= white[17];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//SS5

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];

		GPIOC->ODR |= white[18];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//TT5

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];

		GPIOC->ODR |= white[19];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 394 ... 400: // acase = 5.7
		GPIOC->ODR = white[10];
		GPIOC->ODR |= white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR |= white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR |= white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR |= white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR |= white[10];
		GPIOC->ODR = white[10];
		GPIOC->ODR |= white[10];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[11];
		GPIOC->ODR |= white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR |= white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR |= white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR |= white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR |= white[11];
		GPIOC->ODR = white[11];
		GPIOC->ODR |= white[11];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[12];
		GPIOC->ODR |= white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR |= white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR |= white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR |= white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR |= white[12];
		GPIOC->ODR = white[12];
		GPIOC->ODR |= white[12];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[13];
		GPIOC->ODR |= white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR |= white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR |= white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR |= white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR |= white[13];
		GPIOC->ODR = white[13];
		GPIOC->ODR |= white[13];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[14];
		GPIOC->ODR |= white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR |= white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR |= white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR |= white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR |= white[14];
		GPIOC->ODR = white[14];
		GPIOC->ODR |= white[14];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[15];
		GPIOC->ODR |= white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR |= white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR |= white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR |= white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR |= white[15];
		GPIOC->ODR = white[15];
		GPIOC->ODR |= white[15];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[16];
		GPIOC->ODR |= white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR |= white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR |= white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR |= white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR |= white[16];
		GPIOC->ODR = white[16];
		GPIOC->ODR |= white[16];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[17];
		GPIOC->ODR |= white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR |= white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR |= white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR |= white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR |= white[17];
		GPIOC->ODR = white[17];
		GPIOC->ODR |= white[17];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[18];
		GPIOC->ODR |= white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR |= white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR |= white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR |= white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR |= white[18];
		GPIOC->ODR = white[18];
		GPIOC->ODR |= white[18];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[19];
		GPIOC->ODR |= white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR |= white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR |= white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR |= white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR |= white[19];
		GPIOC->ODR = white[19];
		GPIOC->ODR |= white[19];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
	}
	break;
	case 401 ... 450: //acase = 6
	while(waste_of_time<2)
	{
		GPIOC->ODR &= White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;
	waste_of_time = 0;
	waste_of_time = 0;
	waste_of_time = 0;
	white[Mine_state] = Yellow_Sand;
	switch(Lines)
	{
		case 401 ... 401:
		GPIOC->ODR = White_OFF;
		break;
		case 402 ... 408: //acase = 6.1
		GPIOC->ODR = white[20];
		GPIOC->ODR |= white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR |= white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR |= white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR |= white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR |= white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR |= white[20];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[21];
		GPIOC->ODR |= white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR |= white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR |= white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR |= white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR |= white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR |= white[21];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[22];
		GPIOC->ODR |= white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR |= white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR |= white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR |= white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR |= white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR |= white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[23];
		GPIOC->ODR |= white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR |= white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR |= white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR |= white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR |= white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR |= white[23];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[24];
		GPIOC->ODR |= white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR |= white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR |= white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR |= white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR |= white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR |= white[24];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[25];
		GPIOC->ODR |= white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR |= white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR |= white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR |= white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR |= white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR |= white[25];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[26];
		GPIOC->ODR |= white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR |= white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR |= white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR |= white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR |= white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR |= white[26];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[27];
		GPIOC->ODR |= white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR |= white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR |= white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR |= white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR |= white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR |= white[27];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[28];
		GPIOC->ODR |= white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR |= white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR |= white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR |= white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR |= white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR |= white[28];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[29];
		GPIOC->ODR |= white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR |= white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR |= white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR |= white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR |= white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR |= white[29];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 409 ... 415: // acase = 6.2 UU1
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR |= white[20];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //VV1

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR |= white[21];


		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//WW1

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR |= white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//XX1

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR |= white[23];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//YY1

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR |= white[24];


		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//ZZ1

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR |= white[25];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; // space1

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];

		GPIOC->ODR |= white[26];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //..1

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];

		GPIOC->ODR |= white[27];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF; //!!1

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];

		GPIOC->ODR |= white[28];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;// Enter1

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR |= white[29];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 416 ... 422: // acase = 6.3 UU2
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR |= white[20];
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//VV2

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR |= white[21];


		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//WW2

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR |= white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//XX2

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR |= white[23];


		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//YY2

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR |= white[24];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//ZZ2

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR |= white[25];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//SPACE2

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];

		GPIOC->ODR |= white[26];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//..2

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];

		GPIOC->ODR |= white[27];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//!!2

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];

		GPIOC->ODR |= white[28];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//ENTER2

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR |= white[29];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 423 ... 429: // acase = 6.4UU3
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR |= white[20];
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//VV3

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR |= white[21];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//WW3

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR |= white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//XX3

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = white[23];

		GPIOC->ODR |= white[23];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//YY3

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];

		GPIOC->ODR |= white[24];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//ZZ3

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR |= white[25];
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//SPACE3

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];

		GPIOC->ODR |= white[26];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//..3

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];

		GPIOC->ODR |= white[27];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//!!3

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];

		GPIOC->ODR |= white[28];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//ENTER3

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[29];

		GPIOC->ODR |= white[29];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 430 ... 436: // acase = 6.5 UU4
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR |= white[20];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//VV4

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR |= white[21];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//WW4

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR |= white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//XX4

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR |= white[23];


		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//YY4

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];

		GPIOC->ODR |= white[24];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//ZZ4

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = white[25];

		GPIOC->ODR |= white[25];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//SPACE4

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR |= white[26];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//..4

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];

		GPIOC->ODR |= white[27];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//!!4

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];

		GPIOC->ODR |= white[28];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//ENTER4

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR |= white[29];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 437 ... 443: // acase = 6.6UU5
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];

		GPIOC->ODR = white[20];

		GPIOC->ODR |= white[20];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//VV5

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = white[21];

		GPIOC->ODR |= white[21];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//WW5

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];

		GPIOC->ODR |= white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//XX5

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];

		GPIOC->ODR |= white[23];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//YY5

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];

		GPIOC->ODR = white[24];

		GPIOC->ODR |= white[24];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//ZZ5

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];

		GPIOC->ODR |= white[25];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//SPACE5

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];

		GPIOC->ODR = white[26];

		GPIOC->ODR |= white[26];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//..5

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];

		GPIOC->ODR = white[27];

		GPIOC->ODR |= white[27];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//!!5

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];

		GPIOC->ODR = white[28];

		GPIOC->ODR |= white[28];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;//ENTER 5

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];

		GPIOC->ODR |= white[29];
		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
		case 444 ... 450: // acase = 6.7
		GPIOC->ODR = white[20];
		GPIOC->ODR |= white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR |= white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR |= white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR |= white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR |= white[20];
		GPIOC->ODR = white[20];
		GPIOC->ODR |= white[20];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[21];
		GPIOC->ODR |= white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR |= white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR |= white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR |= white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR |= white[21];
		GPIOC->ODR = white[21];
		GPIOC->ODR = white[21];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[22];
		GPIOC->ODR |= white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR |= white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR |= white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR |= white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR |= white[22];
		GPIOC->ODR = white[22];
		GPIOC->ODR |= white[22];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[23];
		GPIOC->ODR |= white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR |= white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR |= white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR |= white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR |= white[23];
		GPIOC->ODR = white[23];
		GPIOC->ODR |= white[23];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[24];
		GPIOC->ODR |= white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR |= white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR |= white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR |= white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR |= white[24];
		GPIOC->ODR = white[24];
		GPIOC->ODR |= white[24];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[25];
		GPIOC->ODR |= white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR |= white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR |= white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR |= white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR |= white[25];
		GPIOC->ODR = white[25];
		GPIOC->ODR |= white[25];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[26];
		GPIOC->ODR |= white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR |= white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR |= white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR |= white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR |= white[26];
		GPIOC->ODR = white[26];
		GPIOC->ODR |= white[26];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[27];
		GPIOC->ODR |= white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR |= white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR |= white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR |= white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR |= white[27];
		GPIOC->ODR = white[27];
		GPIOC->ODR |= white[27];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[28];
		GPIOC->ODR |= white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR |= white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR |= white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR |= white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR |= white[28];
		GPIOC->ODR = white[28];
		GPIOC->ODR |= white[28];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = white[29];
		GPIOC->ODR |= white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR |= white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR |= white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR |= white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR |= white[29];
		GPIOC->ODR = white[29];
		GPIOC->ODR |= white[29];

		GPIOC->ODR = White_OFF;
		GPIOC->ODR &= White_OFF;
		break;
	}
	break;
	}
}

void Draw_Winner(int BackGround, int cup_1, int cup_2, int flag, int handle_1, int handle_2)
{
	GPIOC->ODR = BackGround;
	switch(Lines)
	{
	case 0 ... 57: //cupase = 1
	GPIOC->ODR = BackGround;
	while(waste_of_time<70)
	{
		GPIOC->ODR = BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR &= White_OFF;
	break;
	case 58 ... 86: //cupase = 2
	GPIOC->ODR = BackGround;
	while(waste_of_time<3)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;

	while(waste_of_time<20)
	{
		GPIOC->ODR = BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR &= White_OFF;
	break;
	case 87 ... 115://cupase = 3
	GPIOC->ODR = BackGround;
	while(waste_of_time<2)
	{
		GPIOC->ODR = BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;

	GPIOC->ODR = flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;

	GPIOC->ODR = flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	while(waste_of_time<12)
	{
		GPIOC->ODR = BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR &= White_OFF;
	break;
	case 116 ... 144://cupase = 4
	GPIOC->ODR = BackGround;
	while(waste_of_time<3)
	{
		GPIOC->ODR = BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;

	GPIOC->ODR = handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;

	GPIOC->ODR = handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;

	GPIOC->ODR = flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;

	GPIOC->ODR = flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = White_ON;
	GPIOC->ODR |= White_ON;
	GPIOC->ODR |= White_ON;
	GPIOC->ODR |= White_ON;
	GPIOC->ODR |= White_ON;
	GPIOC->ODR &= White_OFF; // fix pabandyk padet &= White_OFF;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;

	GPIOC->ODR = handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;

	GPIOC->ODR = handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	while(waste_of_time<15)
	{
		GPIOC->ODR = BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = White_OFF;
	break;
	case 145 ... 202://cupase = 5
	GPIOC->ODR = BackGround;
	while(waste_of_time<3)
	{
		GPIOC->ODR = BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR = BackGround;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;

	GPIOC->ODR = flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;

	GPIOC->ODR = flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = White_ON;
	GPIOC->ODR |= White_ON;
	GPIOC->ODR |= White_ON;
	GPIOC->ODR |= White_ON;
	GPIOC->ODR |= White_ON;
	GPIOC->ODR &= White_OFF; // fix pabandyk padet &= White_OFF;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	while(waste_of_time<15)
	{
		GPIOC->ODR = BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = White_OFF;

	break;
	case 203 ... 231://cupase = 6
	GPIOC->ODR = BackGround;
	while(waste_of_time<3)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR |= flag;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	while(waste_of_time<15)
	{
		GPIOC->ODR = BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = White_OFF;
	break;
	case 232 ... 260://cupase = 7
	GPIOC->ODR = BackGround;
	while(waste_of_time<3)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;

	GPIOC->ODR = handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;

	GPIOC->ODR = cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;

	GPIOC->ODR = handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	while(waste_of_time<16)
	{
		GPIOC->ODR = BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = White_OFF;
	break;
	case 261 ... 289://cupase = 8
	GPIOC->ODR = BackGround;
	while(waste_of_time<3)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;

	GPIOC->ODR = cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	while(waste_of_time<16)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR &= White_OFF;
	break;
	case 290 ... 318://cupase = 9
	GPIOC->ODR = BackGround;
	while(waste_of_time<3)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;

	GPIOC->ODR = cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	while(waste_of_time<20)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR &= White_OFF;
	break;
	case 319 ... 347://cupase = 10
	GPIOC->ODR = BackGround;
	while(waste_of_time<3)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	while(waste_of_time<20)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR &= White_OFF;
	break;
	case 348 ... 376://cupase = 11
	GPIOC->ODR = BackGround;
	while(waste_of_time<3)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	while(waste_of_time<25)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR &= White_OFF;
	break;
	case 377 ... 464://cupase = 12
	GPIOC->ODR = BackGround;
	while(waste_of_time<3)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	while(waste_of_time<24)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR &= White_OFF;
	break;
	case 465 ... 493://cupase = 13
	GPIOC->ODR = BackGround;
	while(waste_of_time<3)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR |= handle_2;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;
	GPIOC->ODR |= handle_1;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	while(waste_of_time<23)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR &= White_OFF;
	break;
	case 494 ... 551://cupase = 14
	GPIOC->ODR = BackGround;
	while(waste_of_time<3)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR |= cup_2;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;
	GPIOC->ODR |= cup_1;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	while(waste_of_time<23)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR &= White_OFF;
	break;
	case 552 ... 580://cupase = 15
	GPIOC->ODR = BackGround;
	while(waste_of_time<3)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;
	GPIOC->ODR |= BackGround;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR = White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	while(waste_of_time<24)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR &= White_OFF;

	break;
	case 581 ... 610://cupase = 16
	GPIOC->ODR = BackGround;
	while(waste_of_time<60)
	{
		GPIOC->ODR |= BackGround;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR &= White_OFF;
	break;
	case 611 ... 628://cupase = 16
	GPIOC->ODR = White_OFF;
	break;


	}
}


void Draw_Looser(void)
{
	switch(Lines)
	{
	case 0 ... 60: //ccase 1
	GPIOC->ODR &= White_OFF;
	break;
	case 61 ... 90://ccase 2
	while(waste_of_time < 5)
	{
		GPIOC->ODR &= White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	break;
	case 91 ... 150://ccase 3

	while(waste_of_time < 5)
	{
		GPIOC->ODR &= White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	break;
	case 151 ... 180://ccase 4

	while(waste_of_time < 5)
	{
		GPIOC->ODR &= White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	break;
	case 181 ... 240://ccase 5
	while(waste_of_time < 5)
	{
		GPIOC->ODR &= White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	break;
	case 241 ... 270: //ccase 6
	while(waste_of_time < 5)
	{
		GPIOC->ODR &= White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	break;
	case 271 ... 330: //ccase 7
	GPIOC->ODR &= White_OFF;
	break;
	case 331 ... 360: // ccase 8
	while(waste_of_time < 2)
		{
			GPIOC->ODR &= White_OFF;
			waste_of_time++;
		}
		waste_of_time = 0;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	break;
	case 361 ... 390: //ccase 9
	while(waste_of_time < 2)
		{
			GPIOC->ODR &= White_OFF;
			waste_of_time++;
		}
		waste_of_time = 0;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	break;
	case 391 ... 420: //ccase 10
	while(waste_of_time < 2)
	{
		GPIOC->ODR &= White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	break;
	case 421 ... 450: // ccase = 11
	while(waste_of_time < 2)
	{
		GPIOC->ODR &= White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	break;
	case 451 ... 480: // ccase 12
	while(waste_of_time < 2)
	{
		GPIOC->ODR &= White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	break;
	case 481 ... 510: // ccase 13
	while(waste_of_time < 2)
	{
		GPIOC->ODR &= White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	break;
	case 511 ... 540:// ccase 14
	while(waste_of_time < 1)
	{
		GPIOC->ODR &= White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;
	GPIOC->ODR |= RED_1_ON;

	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	GPIOC->ODR &= White_OFF;
	break;

	}
}
void Main_Screen(int Background_colour, int Compl_colour, int Compl_darker, int Compl_brighter, int Compl1_colour, int Compl1_darker, int Compl1_brighter, int Compl2_colour, int Compl2_darker,int Compl2_brighter, int Compl3_colour, int Compl3_darker,int Compl3_brighter)
{
GPIOC->ODR = 0x908;
GPIOC->ODR = 0x908;
GPIOC->ODR = 0x908;
//GPIOC->ODR = Background_colour;
//GPIOC->ODR = Background_colour;
//waste_of_time=0;

switch(Lines)
{
case 0 ... 628:
//	GPIOC->ODR = Background_colour;
	while(waste_of_time<2) // buvo <80
	{
		GPIOC->ODR = Background_colour;
		waste_of_time++;
	}
	waste_of_time=0;

	switch(Lines)
	{
// case 1
	case 0 ... 60:
	GPIOC->ODR = Background_colour;
	while(waste_of_time<60) // buvo <80
	{
		GPIOC->ODR = Background_colour;
		waste_of_time++;
	}
	GPIOC->ODR &= White_OFF;
	waste_of_time=0;
	break;
//case 2 dark
	case 61 ... 66:
	GPIOC->ODR = Background_colour;
	GPIOC->ODR = Background_colour;
	GPIOC->ODR = Background_colour;
	while (waste_of_time<19) //GREEN
	{
		GPIOC->ODR = Compl_darker;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR = Compl_brighter;
	while (waste_of_time<10) // BACKGROUND
	{
		GPIOC->ODR = Background_colour;
		waste_of_time++;
	}
	waste_of_time = 0;
	while (waste_of_time<18) //ORANGE
	{
		GPIOC->ODR = Compl1_darker;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR = Compl1_brighter;
	while (waste_of_time<10) //BACKGROUND
	{
		GPIOC->ODR = Background_colour;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR &= White_OFF;
	break;
//case 3 normal
	case 67 ... 200:
	GPIOC->ODR = 0x908;
	GPIOC->ODR = Compl_darker;
	GPIOC->ODR = Compl_darker;
	GPIOC->ODR = Compl_darker;
	GPIOC->ODR = Compl_colour;
		switch (Lines)
		{
		case 67 ... 74:
//case 3.1
		GPIOC->ODR = Compl_colour;
		while (waste_of_time<16) // GREEN
		{
			GPIOC->ODR = Compl_colour;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = Compl_colour;
		break;
		case 75 ... 82:
//case 3.2
		GPIOC->ODR = Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR = Compl_colour;
		break;
		case 83 ... 90:
//case 3.3
		GPIOC->ODR = Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR = Compl_colour;
		break;
		case 91 ... 98:
//case 3.4
		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;
		waste_of_time = 0;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR = Compl_colour;
		break;
		case 99 ... 106:
//case 3.5
		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;
		waste_of_time = 0;
		break;
		case 107 ... 114:
//case 3.6
		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR = Compl_colour;
		GPIOC->ODR |= Compl_colour;
		waste_of_time = 0;
		break;
		case 115 ... 122:
//case 3.7
		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;
		waste_of_time = 0;
		break;
		case 123 ... 130:
//case 3.8
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;
		break;
		case 131 ... 138:
//case 3.9
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;
		break;
		case 139 ... 146:
//case 3.10
		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;
		break;
		case 147 ... 154:
//case 3.11
		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;
		waste_of_time = 0;
		break;
		case 155 ... 162:
//case 3.12
		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;
		waste_of_time = 0;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR = Compl_colour;
		GPIOC->ODR |= Compl_colour;
		break;
		case 163 ... 170:
//case 3.13
		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;
		waste_of_time = 0;
		break;
		case 171 ... 178:
//case 3.14
		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		waste_of_time = 0;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;
		waste_of_time = 0;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;
		break;
		case 179 ... 186:
//case 3.15
		GPIOC->ODR = Compl_colour;
		waste_of_time = 0;
		waste_of_time = 0;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Light_gray;
		GPIOC->ODR |= Light_gray;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR = Compl_colour;
		waste_of_time = 0;
		break;
		case 187 ... 194:
//case 3.16
		GPIOC->ODR = Compl_colour;
		waste_of_time = 0;
		waste_of_time = 0;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		GPIOC->ODR |= Compl_colour;

		GPIOC->ODR |= Compl_colour;
		break;
		case 195 ... 201:
//case 3.17
		GPIOC->ODR = Compl_colour;
		while (waste_of_time<16) // GREEN
		{
			GPIOC->ODR = Compl_colour;
			waste_of_time++;
		}
		waste_of_time = 0;
		break;
		}
		GPIOC->ODR = Compl_brighter;
		GPIOC->ODR = Compl_brighter;
		GPIOC->ODR = Compl_brighter;

		while (waste_of_time<10) // BACKGROUND
		{
			GPIOC->ODR = Background_colour; // pakeitimas;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = Compl1_darker;
		GPIOC->ODR = Compl1_darker;
		GPIOC->ODR = Compl1_darker;
		GPIOC->ODR = Compl1_colour;
		switch(Lines)
		{
		case 67 ... 75:
		waste_of_time = 0;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR = Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		break;
		case 76 ... 91:
		GPIOC->ODR = Compl1_colour;
		waste_of_time = 0;
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR = Compl1_colour;
		GPIOC->ODR = Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		break;

		case 92 ... 99:

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR = Compl1_colour;
		break;
		case 100 ... 107:
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR = Compl1_colour;
		break;
		case 108 ... 123:
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		break;
		case 124 ... 131:
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		waste_of_time = 0;
		waste_of_time = 0;
		break;
		case 132 ... 147:
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		break;
		case 148 ... 155:
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		waste_of_time = 0;
		waste_of_time = 0;
		break;
		case 156 ... 163:
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;
		waste_of_time = 0;
		waste_of_time = 0;
		break;
		case 164 ... 179:
		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		GPIOC->ODR |= Compl1_colour;

		GPIOC->ODR |= Compl1_colour;
		waste_of_time = 0;
		waste_of_time = 0;
		waste_of_time = 0;
		break;

		case 180 ... 187:
		GPIOC->ODR = Compl1_colour;
		while (waste_of_time<10) // ORANGE
		{
			GPIOC->ODR = Compl1_colour;
			GPIOC->ODR |= Compl1_colour; // pakeitimas: buvo GPIOC->ODR |= Compl1_colour;;
			waste_of_time++;
		}
		waste_of_time = 0;
		break;
		case 188 ... 201:
		GPIOC->ODR = Compl1_colour;
		while (waste_of_time<10) // ORANGE
		{
			GPIOC->ODR = Compl1_colour;
			GPIOC->ODR |= Compl1_colour; //pakeitimas buvo: GPIOC->ODR |= Compl1_colour;;
			waste_of_time++;
		}
		waste_of_time = 0;
		break;
		}
		GPIOC->ODR = Compl1_brighter;
		GPIOC->ODR = Compl1_brighter;
		GPIOC->ODR = Compl1_brighter;
		while (waste_of_time<10) // BACKGROUND
		{
			GPIOC->ODR = Background_colour;
			GPIOC->ODR |= Background_colour;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR &= White_OFF;
	break;
//case 4 bright
	case 201 ... 206:
	GPIOC->ODR = Background_colour;
	GPIOC->ODR = Background_colour;
	GPIOC->ODR = Background_colour;
	GPIOC->ODR = Background_colour;
	GPIOC->ODR = Compl_darker;
	while (waste_of_time<18) //GREEN dark
	{
		GPIOC->ODR = Compl_brighter;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR = Compl_brighter;
	GPIOC->ODR = Compl_brighter;
	while (waste_of_time < 10) // BACKGROUNd
	{
		GPIOC->ODR = Background_colour;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR = Compl1_darker;
	while (waste_of_time < 18) //ORANGe Dark
	{
		GPIOC->ODR = Compl1_brighter;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR = Background_colour;
	while(waste_of_time < 12) // buvo <80)
	{
		GPIOC->ODR |= Background_colour;
		waste_of_time++;
	}
	GPIOC->ODR &= White_OFF;
	waste_of_time=0;
	break;
//caseee 5
	case 207 ... 267:
	GPIOC->ODR = Background_colour;
	while(waste_of_time < 50) // buvo <80)
	{
		GPIOC->ODR |= Background_colour;
		waste_of_time++;
	}
	GPIOC->ODR &= White_OFF;
	waste_of_time=0;
	break;
	case 268 ... 273: // Ranks case 1 dark
	GPIOC->ODR = Background_colour;
	GPIOC->ODR = Background_colour;
	GPIOC->ODR = Background_colour;
	while (waste_of_time<19) //FOO
	{
		GPIOC->ODR = Compl2_darker;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR = Compl2_brighter;
	while (waste_of_time<10) // BACKGROUND
	{
		GPIOC->ODR = Background_colour;
		waste_of_time++;
	}
	waste_of_time = 0;
	while (waste_of_time<18) //OFF
	{
		GPIOC->ODR = Compl3_darker;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR = Compl3_brighter;
	while (waste_of_time<10) //BACKGROUND
	{
		GPIOC->ODR = Background_colour;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR &= White_OFF;
	break;
	case 274 ... 407:
	GPIOC->ODR = 0x908;
	GPIOC->ODR = 0x908;
	GPIOC->ODR = 0x908;
	GPIOC->ODR = 0x908;
	GPIOC->ODR = 0x908;
	GPIOC->ODR = 0x908;
	GPIOC->ODR = 0x908;
	GPIOC->ODR = Compl2_darker;
	GPIOC->ODR = Compl2_darker;
	GPIOC->ODR = Compl2_darker;
	GPIOC->ODR = Compl2_colour;
		switch (Lines)
		{
		case 274 ... 283:
		GPIOC->ODR = Compl2_colour;
		while (waste_of_time<15) // GREEN
		{
			GPIOC->ODR = Compl2_colour;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = Compl2_colour;
		break;
		case 284 ... 293:
		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR |= Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR |= Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR |= Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR |= Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR |= Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		break;
		case 294 ... 303:
		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR = Orange_bright;
		GPIOC->ODR = Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;
		break;
		case 304 ... 313:
		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR = Orange_bright;
		GPIOC->ODR = Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR = Orange_dark;
		GPIOC->ODR = Orange_dark;
		GPIOC->ODR |= Orange_dark;

		GPIOC->ODR |= Orange_dark;
		GPIOC->ODR |= Orange_dark;

		GPIOC->ODR |= Orange_dark;
		GPIOC->ODR |= Orange_dark;

		GPIOC->ODR = Orange_bright;
		GPIOC->ODR = Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;
		break;
		case 314 ... 323:
		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR = Orange_bright;
		GPIOC->ODR = Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR = Yellow_ON;
		GPIOC->ODR = Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR = Orange_bright;
		GPIOC->ODR = Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;
		break;
		case 324 ... 333:
		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR = Orange_dark;
		GPIOC->ODR = Orange_dark;
		GPIOC->ODR |= Orange_dark;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR = Orange_bright;
		GPIOC->ODR = Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR = Yellow_ON;
		GPIOC->ODR = Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR = Orange_bright;
		GPIOC->ODR = Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;
		break;
		case 334 ... 363:
		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR = Orange_dark;
		GPIOC->ODR = Orange_dark;
		GPIOC->ODR |= Orange_dark;

		GPIOC->ODR = Orange_bright;
		GPIOC->ODR = Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR = Yellow_ON;
		GPIOC->ODR = Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR = Orange_bright;
		GPIOC->ODR = Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;
		break;
		case 364 ... 373:
		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR = Yellow_ON;
		GPIOC->ODR = Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR |= Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR |= Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR |= Yellow_ON;
		GPIOC->ODR |= Yellow_ON;

		GPIOC->ODR = Orange_bright;
		GPIOC->ODR = Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR = Orange_dark;
		GPIOC->ODR = Orange_dark;
		GPIOC->ODR |= Orange_dark;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;
		break;
		case 374 ... 383:
		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR |= Orange_bright;
		GPIOC->ODR |= Orange_bright;

		GPIOC->ODR = Orange_dark;
		GPIOC->ODR = Orange_dark;
		GPIOC->ODR |= Orange_dark;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;
		break;
		case 384 ... 393:
		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Orange_dark;
		GPIOC->ODR |= Orange_dark;

		GPIOC->ODR |= Orange_dark;
		GPIOC->ODR |= Orange_dark;

		GPIOC->ODR |= Orange_dark;
		GPIOC->ODR |= Orange_dark;

		GPIOC->ODR |= Orange_dark;
		GPIOC->ODR |= Orange_dark;

		GPIOC->ODR |= Orange_dark;
		GPIOC->ODR |= Orange_dark;

		GPIOC->ODR |= Orange_dark;
		GPIOC->ODR |= Orange_dark;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;

		GPIOC->ODR |= Compl2_colour;
		GPIOC->ODR |= Compl2_colour;
		break;
		case 394 ... 407:
		GPIOC->ODR = Compl2_colour;
		while (waste_of_time<15) // GREEN
		{
			GPIOC->ODR = Compl2_colour;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = Compl2_colour;
		break;
		}
		GPIOC->ODR = Compl2_brighter;
		GPIOC->ODR = Compl2_brighter;
		GPIOC->ODR = Compl2_brighter;

		while (waste_of_time<10) // BACKGROUND
		{
			GPIOC->ODR = Background_colour; // pakeitimas;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = Compl3_darker;
		GPIOC->ODR = Compl3_darker;
		GPIOC->ODR = Compl3_darker;
		GPIOC->ODR = Compl3_colour;
		switch (Lines) // caseee
		{
		case 274 ... 277:
		GPIOC->ODR = Compl3_colour;
		while (waste_of_time<15) // white
		{
			GPIOC->ODR = Compl3_colour;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = Compl3_colour;
		break;
		case 278 ... 281:
		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;
		break;
		case 282 ... 293:
		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;
		break;
		case 294 ... 321:
		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR = Orange;
		GPIOC->ODR = Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;
		break;
		case 322 ... 333:
		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;
		break;
		case 334 ... 341:
		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;
		break;
		case 342 ... 345:
		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;
		break;
		case 346 ... 349:
		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;
		break;
		case 350 ... 357:
		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;
		break;
		case 358 ... 361:
		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;
		break;
		case 362 ... 365:
		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= White_ON;
		GPIOC->ODR |= White_ON;

		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR = GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;
		break;
		case 366 ... 373:
		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR |= GREEN_1_ON;
		GPIOC->ODR |= GREEN_1_ON;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;
		break;
		case 374 ... 377:
		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= GREEN_ON;
		GPIOC->ODR |= GREEN_ON;

		GPIOC->ODR |= GREEN_ON;
		GPIOC->ODR |= GREEN_ON;

		GPIOC->ODR |= GREEN_ON;
		GPIOC->ODR |= GREEN_ON;

		GPIOC->ODR |= GREEN_ON;
		GPIOC->ODR |= GREEN_ON;

		GPIOC->ODR |= GREEN_ON;
		GPIOC->ODR |= GREEN_ON;

		GPIOC->ODR |= GREEN_ON;
		GPIOC->ODR |= GREEN_ON;

		GPIOC->ODR |= GREEN_ON;
		GPIOC->ODR |= GREEN_ON;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;
		break;
		case 378 ... 393:
		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR |= Orange;
		GPIOC->ODR |= Orange;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;
		break;
		case 394 ... 397:
		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR &= White_OFF;
		GPIOC->ODR &= White_OFF;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;

		GPIOC->ODR |= Compl3_colour;
		GPIOC->ODR |= Compl3_colour;
		break;
		case 398 ... 407:
		GPIOC->ODR = Compl3_colour;
		while (waste_of_time<15) // white
		{
			GPIOC->ODR = Compl3_colour;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR = Compl3_colour;
		break;
		}
		GPIOC->ODR = Compl3_brighter;
		GPIOC->ODR = Compl3_brighter;
		GPIOC->ODR = Compl3_brighter;
		while (waste_of_time<10) // BACKGROUND
		{
			GPIOC->ODR = Background_colour;
			GPIOC->ODR |= Background_colour;
			waste_of_time++;
		}
		waste_of_time = 0;
		GPIOC->ODR &= White_OFF;
	break;
	case 408 ... 413:
	GPIOC->ODR = Background_colour;
	GPIOC->ODR = Background_colour;
	GPIOC->ODR = Background_colour;
	GPIOC->ODR = Background_colour;
	GPIOC->ODR = Background_colour;
	while (waste_of_time<19) //FOO
	{
		GPIOC->ODR = Compl2_brighter;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR = Compl2_brighter;
	while (waste_of_time<10) // BACKGROUND
	{
		GPIOC->ODR = Background_colour;
		waste_of_time++;
	}
	waste_of_time = 0;
	while (waste_of_time<18) //OFF
	{
		GPIOC->ODR = Compl3_brighter;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR = Compl3_brighter;
	while (waste_of_time<10) //BACKGROUND
	{
		GPIOC->ODR = Background_colour;
		waste_of_time++;
	}
	waste_of_time = 0;
	GPIOC->ODR &= White_OFF;
	break;
	case 414 ... 627:
	GPIOC->ODR = Background_colour;
	while(waste_of_time < 50) // buvo <80)
	{
		GPIOC->ODR |= Background_colour;
		waste_of_time++;
	}
	GPIOC->ODR &= White_OFF;
	waste_of_time=0;
	break;
	}
break;
}
}

void Draw_MineSweeper(int White, int light_gray, int dark_gray)
{
	Mine_start = 1;
	int White_OFF = ~White;
	int Sand_yellow = Yellow_Sand;
	int Border_L = Light_gray;
	int Border_D = Dark_Gray;
	if (flag_click[Mine_state] == 1)
	{
		Sand_yellow = Orange_bright;
	}
	int waste_of_time=0;
	//	int casee = 1;
	switch(Lines)
	{
	case 0 ... 523:
	GPIOC->ODR = White_OFF;
	switch(Lines)
	{
//	case 0 ... 6:
//	if(((Bomb_pressed == 1 || winning == 90)) && boom[5] == 1)
//	{
//		light_gray = White_OFF;
//		dark_gray = White_OFF;
//		White = White_OFF;
//		Border_L = White_OFF;
//		Border_D = White_OFF;
//	}
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	GPIOC->ODR = White_OFF;
//	while (waste_of_time<72)
//	{
//	GPIOC->ODR = White;
//	waste_of_time++;
//	}
//	waste_of_time=0;
//	GPIOC->ODR = White_OFF;
//	break;

	//	casee = 2;
	case 7 ... 17:
	if((Bomb_pressed == 1 || winning == 90) && boom[9] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	while (waste_of_time<74)
	{
	GPIOC->ODR = light_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	break;
	//	casee = 3;
	case 18 ... 24:
	if((Bomb_pressed == 1 || winning == 90) && boom[11] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;
	while (waste_of_time<72)
	{
	GPIOC->ODR = dark_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	break;
	//	casee = 4;
	case 25 ... 104:
	if((Bomb_pressed == 1 || winning == 90) && boom[22] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = light_gray;
	while (waste_of_time<71)
	{
	GPIOC->ODR = light_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	break;

	//		casee = 5;
	case 105 ... 111:
	if((Bomb_pressed == 1 || winning == 90) && boom[28] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = White;
	while (waste_of_time<72)
	{
	GPIOC->ODR = White;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	break;

	//	casee = 6;
	case 112 ... 122:
	if((Bomb_pressed == 1 || winning == 90) && boom[8] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	while (waste_of_time<75)
	{
	GPIOC->ODR = light_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	break;

//casee = 7;
	case 123 ... 129:
	if((Bomb_pressed == 1 || winning == 90) && boom[18] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;

	while (waste_of_time<72)
	{
	GPIOC->ODR = dark_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;

	break;
//casee = 8;
	case 130 ... 165:
	switch(click[0])
	{
	case 0:
		switch(Mine_state)
		{
		case 0:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 1 ... 99:
		switch(flag_click[0])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 130 ... 134:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[0];
	break;
	case 135 ... 140:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[4];
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[5];
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[6];
		GPIOC->ODR = Number_colour[0];
	break;
	case 141 ... 145:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray; // padek cia break pointa
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	break;
	case 146 ... 150:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[1];
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[2];
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[3];
		GPIOC->ODR = Number_colour[0];
	break;
	case 151 ... 155:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray; // padek cia break pointa
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	break;
	case 156 ... 160:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[7];
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[8];
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[0];
		GPIOC->ODR = Number_colour[0];
	break;
	case 161 ... 165:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray; // padek cia break pointa
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	GPIOC->ODR = Number_colour[0];
	break;
	}
	break;
	}
	switch(click[1])
	{
	case 0:
		switch(Mine_state)
		{
		case 0:
			switch(flag_click[1])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
		break;
		case 1:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 2 ... 99:
		switch(flag_click[1])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 130 ... 134:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
	break;
	case 135 ... 140:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[14];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[15];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[16];
		GPIOC->ODR = Number_colour[10];
	break;
	case 141 ... 145:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
	break;
	case 146 ... 150:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[11];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[12];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[13];
		GPIOC->ODR = Number_colour[10];
	break;
	case 151 ... 155:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
	break;
	case 156 ... 160:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[17];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[18];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
	break;
	case 161 ... 165:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
		GPIOC->ODR = Number_colour[10];
	break;
	}
	break;
	}
	switch(click[2])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 1:
			switch(flag_click[2])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 2:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 3 ... 99:
			switch(flag_click[2])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 130 ... 134:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
	break;
	case 135 ... 140:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[24];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[25];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[26];
		GPIOC->ODR = Number_colour[20];
	break;
	case 141 ... 145:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
	break;
	case 146 ... 150:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[21];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[22];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[23];
		GPIOC->ODR = Number_colour[20];
	break;
	case 151 ... 155:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
	break;
	case 156 ... 160:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[27];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[28];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
	break;
	case 161 ... 165:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
		GPIOC->ODR = Number_colour[20];
	break;
	}
	break;
	}
	switch(click[3])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 2:
			switch(flag_click[3])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 3:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 4 ... 99:
			switch(flag_click[3])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 130 ... 134:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
	break;
	case 135 ... 140:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[34];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[35];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[36];
		GPIOC->ODR = Number_colour[30];
	break;
	case 141 ... 145:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
	break;
	case 146 ... 150:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[31];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[32];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[33];
		GPIOC->ODR = Number_colour[30];
	break;
	case 151 ... 155:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
	break;
	case 156 ... 160:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[37];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[38];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
	break;
	case 161 ... 165:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
		GPIOC->ODR = Number_colour[30];
	break;
	}
	break;
	}
	switch(click[4])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 3:
			switch(flag_click[4])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 4:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 5 ... 99:
		switch(flag_click[4])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 130 ... 134:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
	break;
	case 135 ... 140:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[44];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[45];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[46];
		GPIOC->ODR = Number_colour[40];
	break;
	case 141 ... 145:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
	break;
	case 146 ... 150:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[41];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[42];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[43];
		GPIOC->ODR = Number_colour[40];
	break;
	case 151 ... 155:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
	break;
	case 156 ... 160:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[47];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[48];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
	break;
	case 161 ... 165:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
		GPIOC->ODR = Number_colour[40];
	break;
	}
	break;
	}
	switch(click[5])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 4:
			switch(flag_click[5])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 5:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 6 ... 99:
			switch(flag_click[5])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 130 ... 134:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
	break;
	case 135 ... 140:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[54];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[55];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[56];
		GPIOC->ODR = Number_colour[50];
	break;
	case 141 ... 145:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
	break;
	case 146 ... 150:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[51];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[52];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[53];
		GPIOC->ODR = Number_colour[50];
	break;
	case 151 ... 155:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
	break;
	case 156 ... 160:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[57];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[58];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
	break;
	case 161 ... 165:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
		GPIOC->ODR = Number_colour[50];
	break;
	}
	break;
	}
	switch(click[6])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 5:
		switch(flag_click[6])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;

		break;
		case 6:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 7 ... 99:
		switch(flag_click[6])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 130 ... 134:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
	break;
	case 135 ... 140:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[64];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[65];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[66];
		GPIOC->ODR = Number_colour[60];
	break;
	case 141 ... 145:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
	break;
	case 146 ... 150:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[61];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[62];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[63];
		GPIOC->ODR = Number_colour[60];
	break;
	case 151 ... 155:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
	break;
	case 156 ... 160:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[67];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[68];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
	break;
	case 161 ... 165:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
		GPIOC->ODR = Number_colour[60];
	break;
	}
	break;
	}
	switch(click[7])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 6:
		switch(flag_click[7])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 7:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 8 ... 99:
		switch(flag_click[7])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 130 ... 134:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
	break;
	case 135 ... 140:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[74];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[75];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[76];
		GPIOC->ODR = Number_colour[70];
	break;
	case 141 ... 145:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
	break;
	case 146 ... 150:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[71];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[72];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[73];
		GPIOC->ODR = Number_colour[70];
	break;
	case 151 ... 155:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
	break;
	case 156 ... 160:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[77];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[78];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
	break;
	case 161 ... 165:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
		GPIOC->ODR = Number_colour[70];
	break;
	}
	break;
	}
	switch(click[8])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 7:
		switch(flag_click[8])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 8:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 9 ... 99:
		switch(flag_click[8])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 130 ... 134:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
	break;
	case 135 ... 140:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[84];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[85];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[86];
		GPIOC->ODR = Number_colour[80];
	break;
	case 141 ... 145:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
	break;
	case 146 ... 150:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[81];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[82];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[83];
		GPIOC->ODR = Number_colour[80];
	break;
	case 151 ... 155:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
	break;
	case 156 ... 160:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[87];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[88];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
	break;
	case 161 ... 165:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
		GPIOC->ODR = Number_colour[80];
	break;
	}
	break;
	}
	switch(click[9])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 8:
		switch(flag_click[9])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		case 9:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = White_OFF;
			break;
		case 10 ... 99:
		switch(flag_click[9])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 130 ... 134:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = White_OFF;
	break;
	case 135 ... 140:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[94];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[95];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[96];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = White_OFF;
	break;
	case 141 ... 145:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = White_OFF;
	break;
	case 146 ... 150:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[91];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[92];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[93];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = White_OFF;
	break;
	case 151 ... 155:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = White_OFF;
	break;
	case 156 ... 160:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[97];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[98];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = White_OFF;
	break;
	case 161 ... 165:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = Number_colour[90];
		GPIOC->ODR = White_OFF;
	break;
	}
	break;
	}
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[25] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	break;
	//	casee = 9;
	case 166 ... 166:
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[14] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;
	while (waste_of_time<35)
	{
	GPIOC->ODR = dark_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	break;
	//		casee = 10;
	case 167 ... 202:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	switch(click[10])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 9:
		switch(flag_click[10])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 10:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = Border_L;
			GPIOC->ODR = Border_L;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 11 ... 99:
		switch(flag_click[10])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 167 ... 171:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
	break;
	case 172 ... 177:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[104];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[105];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[106];
		GPIOC->ODR = Number_colour[100];
	break;
	case 178 ... 182:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
	break;
	case 183 ... 187:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[101];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[102];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[103];
		GPIOC->ODR = Number_colour[100];
	break;
	case 188 ... 192:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
	break;
	case 193 ... 197:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[107];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[108];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
	break;
	case 198 ... 202:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
		GPIOC->ODR = Number_colour[100];
	break;
	}
	break;
	}
	switch(click[11])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 10:
			switch(flag_click[11])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
		break;
		case 11:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 12 ... 99:
		switch(flag_click[11])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 167 ... 171:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
	break;
	case 172 ... 177:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[114];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[115];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[116];
		GPIOC->ODR = Number_colour[110];
	break;
	case 178 ... 182:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
	break;
	case 183 ... 187:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[111];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[112];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[113];
		GPIOC->ODR = Number_colour[110];
	break;
	case 188 ... 192:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
	break;
	case 193 ... 197:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[117];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[118];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
	break;
	case 198 ... 202:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
		GPIOC->ODR = Number_colour[110];
	break;
	}
	break;
	}
	switch(click[12])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 11:
			switch(flag_click[12])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 12:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 13 ... 99:
			switch(flag_click[12])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 167 ... 171:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
	break;
	case 172 ... 177:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[124];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[125];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[126];
		GPIOC->ODR = Number_colour[120];
	break;
	case 178 ... 182:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
	break;
	case 183 ... 187:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[121];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[122];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[123];
		GPIOC->ODR = Number_colour[120];
	break;
	case 188 ... 192:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
	break;
	case 193 ... 197:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[127];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[128];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
	break;
	case 198 ... 202:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
		GPIOC->ODR = Number_colour[120];
	break;
	}
	break;
	}
	switch(click[13])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 12:
			switch(flag_click[13])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 13:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 14 ... 99:
			switch(flag_click[13])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 167 ... 171:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
	break;
	case 172 ... 177:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[134];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[135];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[136];
		GPIOC->ODR = Number_colour[130];
	break;
	case 178 ... 182:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
	break;
	case 183 ... 187:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[131];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[132];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[133];
		GPIOC->ODR = Number_colour[130];
	break;
	case 188 ... 192:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
	break;
	case 193 ... 197:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[137];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[138];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
	break;
	case 198 ... 202:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
		GPIOC->ODR = Number_colour[130];
	break;
	}
	break;
	}
	switch(click[14])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 13:
			switch(flag_click[14])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 14:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 15 ... 99:
		switch(flag_click[14])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 167 ... 171:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
	break;
	case 172 ... 177:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[144];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[145];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[146];
		GPIOC->ODR = Number_colour[140];
	break;
	case 178 ... 182:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
	break;
	case 183 ... 187:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[141];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[142];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[143];
		GPIOC->ODR = Number_colour[140];
	break;
	case 188 ... 192:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
	break;
	case 193 ... 197:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[147];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[148];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
	break;
	case 198 ... 202:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
		GPIOC->ODR = Number_colour[140];
	break;
	}
	break;
	}
	switch(click[15])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 14:
			switch(flag_click[15])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 15:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 16 ... 99:
			switch(flag_click[15])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 167 ... 171:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
	break;
	case 172 ... 177:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[154];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[155];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[156];
		GPIOC->ODR = Number_colour[150];
	break;
	case 178 ... 182:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
	break;
	case 183 ... 187:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[151];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[152];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[153];
		GPIOC->ODR = Number_colour[150];
	break;
	case 188 ... 192:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
	break;
	case 193 ... 197:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[157];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[158];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
	break;
	case 198 ... 202:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
		GPIOC->ODR = Number_colour[150];
	break;
	}
	break;
	}
	switch(click[16])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 15:
		switch(flag_click[16])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 16:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 17 ... 99:
		switch(flag_click[16])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 167 ... 171:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
	break;
	case 172 ... 177:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[164];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[165];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[166];
		GPIOC->ODR = Number_colour[160];
	break;
	case 178 ... 182:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
	break;
	case 183 ... 187:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[161];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[162];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[163];
		GPIOC->ODR = Number_colour[160];
	break;
	case 188 ... 192:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
	break;
	case 193 ... 197:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[167];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[168];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
	break;
	case 198 ... 202:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
		GPIOC->ODR = Number_colour[160];
	break;
	}
	break;
	}
	switch(click[17])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 16:
		switch(flag_click[17])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 17:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 18 ... 99:
		switch(flag_click[17])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 167 ... 171:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
	break;
	case 172 ... 177:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[174];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[175];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[176];
		GPIOC->ODR = Number_colour[170];
	break;
	case 178 ... 182:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
	break;
	case 183 ... 187:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[171];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[172];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[173];
		GPIOC->ODR = Number_colour[170];
	break;
	case 188 ... 192:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
	break;
	case 193 ... 197:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[177];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[178];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
	break;
	case 198 ... 202:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
		GPIOC->ODR = Number_colour[170];
	break;
	}
	break;
	}
	switch(click[18])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 17:
		switch(flag_click[18])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 18:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 19 ... 99:
		switch(flag_click[18])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 167 ... 171:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
	break;
	case 172 ... 177:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[184];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[185];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[186];
		GPIOC->ODR = Number_colour[180];
	break;
	case 178 ... 182:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
	break;
	case 183 ... 187:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[181];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[182];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[183];
		GPIOC->ODR = Number_colour[180];
	break;
	case 188 ... 192:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
	break;
	case 193 ... 197:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[187];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[188];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
	break;
	case 198 ... 202:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
		GPIOC->ODR = Number_colour[180];
	break;
	}
	break;
	}
	switch(click[19])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 18:
		switch(flag_click[19])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		case 19:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = White_OFF;
			break;
		case 20 ... 99:
		switch(flag_click[19])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 167 ... 171:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = White_OFF;
	break;
	case 172 ... 177:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[194];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[195];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[196];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = White_OFF;
	break;
	case 178 ... 182:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = White_OFF;
	break;
	case 183 ... 187:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[191];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[192];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[193];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = White_OFF;
	break;
	case 188 ... 192:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = White_OFF;
	break;
	case 193 ... 197:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[197];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[198];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = White_OFF;
	break;
	case 198 ... 202:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = Number_colour[190];
		GPIOC->ODR = White_OFF;
	break;
	}
	break;
	}
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[6] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	break;
	//	casee = 11;
	case 203 ... 203:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[1] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;
	while (waste_of_time<34)
	{
	GPIOC->ODR = dark_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	break;

	//		casee = 12;
	case 204 ... 239:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	switch(click[20])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 19:
		switch(flag_click[20])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		waste_of_time=0;
		break;
		case 20:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 21 ... 99:
		switch(flag_click[20])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 204 ... 208:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
	break;
	case 209 ... 214:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[204];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[205];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[206];
		GPIOC->ODR = Number_colour[200];
	break;
	case 215 ... 219:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
	break;
	case 220 ... 224:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[201];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[202];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[203];
		GPIOC->ODR = Number_colour[200];
	break;
	case 225 ... 229:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
	break;
	case 230 ... 234:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[207];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[208];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
	break;
	case 235 ... 239:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
		GPIOC->ODR = Number_colour[200];
	break;
	}
	break;
	}
	switch(click[21])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 20:
			switch(flag_click[21])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
		break;
		case 21:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 22 ... 99:
		switch(flag_click[21])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 204 ... 208:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
	break;
	case 209 ... 214:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[214];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[215];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[216];
		GPIOC->ODR = Number_colour[210];
	break;
	case 215 ... 219:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
	break;
	case 220 ... 224:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[211];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[212];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[213];
		GPIOC->ODR = Number_colour[210];
	break;
	case 225 ... 229:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
	break;
	case 230 ... 234:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[217];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[218];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
	break;
	case 235 ... 239:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
		GPIOC->ODR = Number_colour[210];
	break;
	}
	break;
	}
	switch(click[22])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 21:
			switch(flag_click[22])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 22:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 23 ... 99:
			switch(flag_click[22])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 204 ... 208:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
	break;
	case 209 ... 214:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[224];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[225];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[226];
		GPIOC->ODR = Number_colour[220];
	break;
	case 215 ... 219:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
	break;
	case 220 ... 224:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[221];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[222];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[223];
		GPIOC->ODR = Number_colour[220];
	break;
	case 225 ... 229:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
	break;
	case 230 ... 234:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[227];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[228];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
	break;
	case 235 ... 239:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
		GPIOC->ODR = Number_colour[220];
	break;
	}
	break;
	}
	switch(click[23])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 22:
			switch(flag_click[23])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 23:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 24 ... 99:
			switch(flag_click[23])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 204 ... 208:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
	break;
	case 209 ... 214:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[234];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[235];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[236];
		GPIOC->ODR = Number_colour[230];
	break;
	case 215 ... 219:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
	break;
	case 220 ... 224:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[231];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[232];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[233];
		GPIOC->ODR = Number_colour[230];
	break;
	case 225 ... 229:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
	break;
	case 230 ... 234:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[237];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[238];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
	break;
	case 235 ... 239:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
		GPIOC->ODR = Number_colour[230];
	break;
	}
	break;
	}
	switch(click[24])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 23:
			switch(flag_click[24])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 24:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 25 ... 99:
		switch(flag_click[24])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 204 ... 208:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
	break;
	case 209 ... 214:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[244];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[245];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[246];
		GPIOC->ODR = Number_colour[240];
	break;
	case 215 ... 219:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
	break;
	case 220 ... 224:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[241];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[242];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[243];
		GPIOC->ODR = Number_colour[240];
	break;
	case 225 ... 229:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
	break;
	case 230 ... 234:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[247];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[248];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
	break;
	case 235 ... 239:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
		GPIOC->ODR = Number_colour[240];
	break;
	}
	break;
	}
	switch(click[25])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 24:
			switch(flag_click[25])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 25:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 26 ... 99:
			switch(flag_click[25])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 204 ... 208:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
	break;
	case 209 ... 214:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[254];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[255];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[256];
		GPIOC->ODR = Number_colour[250];
	break;
	case 215 ... 219:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
	break;
	case 220 ... 224:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[251];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[252];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[253];
		GPIOC->ODR = Number_colour[250];
	break;
	case 225 ... 229:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
	break;
	case 230 ... 234:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[257];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[258];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
	break;
	case 235 ... 239:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
		GPIOC->ODR = Number_colour[250];
	break;
	}
	break;
	}
	switch(click[26])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 25:
		switch(flag_click[26])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 26:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 27 ... 99:
		switch(flag_click[26])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 204 ... 208:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
	break;
	case 209 ... 214:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[264];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[265];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[266];
		GPIOC->ODR = Number_colour[260];
	break;
	case 215 ... 219:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
	break;
	case 220 ... 224:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[261];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[262];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[263];
		GPIOC->ODR = Number_colour[260];
	break;
	case 225 ... 229:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
	break;
	case 230 ... 234:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[267];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[268];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
	break;
	case 235 ... 239:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
		GPIOC->ODR = Number_colour[260];
	break;
	}
	break;
	}
	switch(click[27])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 26:
		switch(flag_click[27])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 27:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 28 ... 99:
		switch(flag_click[27])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 204 ... 208:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
	break;
	case 209 ... 214:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[274];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[275];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[276];
		GPIOC->ODR = Number_colour[270];
	break;
	case 215 ... 219:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
	break;
	case 220 ... 224:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[271];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[272];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[273];
		GPIOC->ODR = Number_colour[270];
	break;
	case 225 ... 229:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
	break;
	case 230 ... 234:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[277];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[278];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
	break;
	case 235 ... 239:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
		GPIOC->ODR = Number_colour[270];
	break;
	}
	break;
	}
	switch(click[28])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 27:
		switch(flag_click[28])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 28:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 29 ... 99:
		switch(flag_click[28])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 204 ... 208:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
	break;
	case 209 ... 214:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[284];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[285];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[286];
		GPIOC->ODR = Number_colour[280];
	break;
	case 215 ... 219:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
	break;
	case 220 ... 224:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[281];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[282];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[283];
		GPIOC->ODR = Number_colour[280];
	break;
	case 225 ... 229:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
	break;
	case 230 ... 234:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[287];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[288];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
	break;
	case 235 ... 239:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
		GPIOC->ODR = Number_colour[280];
	break;
	}
	break;
	}
	switch(click[29])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 28:
		switch(flag_click[29])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		case 29:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = White_OFF;
			break;
		case 30 ... 99:
		switch(flag_click[29])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 204 ... 208:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = White_OFF;
	break;
	case 209 ... 214:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[294];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[295];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[296];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = White_OFF;
	break;
	case 215 ... 219:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = White_OFF;
	break;
	case 220 ... 224:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[291];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[292];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[293];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = White_OFF;
	break;
	case 225 ... 229:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = White_OFF;
	break;
	case 230 ... 234:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[297];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[298];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = White_OFF;
	break;
	case 235 ... 239:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = Number_colour[290];
		GPIOC->ODR = White_OFF;
	break;
	}
	break;
	}
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[4] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	break;
	//	casee = 13;
	case 240 ... 240:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[15] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;
	while (waste_of_time<34)
	{
	GPIOC->ODR = dark_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	break;
//		casee = 14;
	case 241 ... 276:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	switch(click[30])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 29:
		switch(flag_click[30])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		waste_of_time=0;
		break;
		case 30:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 31 ... 99:
		switch(flag_click[30])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 241 ... 245:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
	break;
	case 246 ... 251:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[304];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[305];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[306];
		GPIOC->ODR = Number_colour[300];
	break;
	case 252 ... 256:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
	break;
	case 257 ... 261:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[301];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[302];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[303];
		GPIOC->ODR = Number_colour[300];
	break;
	case 262 ... 266:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
	break;
	case 267 ... 271:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[307];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[308];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
	break;
	case 272 ... 276:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
		GPIOC->ODR = Number_colour[300];
	break;
	}
	break;
	}
	switch(click[31])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 30:
			switch(flag_click[31])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
		break;
		case 31:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 32 ... 99:
		switch(flag_click[31])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 241 ... 245:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
	break;
	case 246 ... 251:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[314];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[315];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[316];
		GPIOC->ODR = Number_colour[310];
	break;
	case 252 ... 256:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
	break;
	case 257 ... 261:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[311];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[312];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[313];
		GPIOC->ODR = Number_colour[310];
	break;
	case 262 ... 266:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
	break;
	case 267 ... 271:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[317];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[318];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
	break;
	case 272 ... 276:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
		GPIOC->ODR = Number_colour[310];
	break;
	}
	break;
	}
	switch(click[32])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 31:
			switch(flag_click[32])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 32:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 33 ... 99:
			switch(flag_click[32])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 241 ... 245:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
	break;
	case 246 ... 251:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[324];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[325];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[326];
		GPIOC->ODR = Number_colour[320];
	break;
	case 252 ... 256:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
	break;
	case 257 ... 261:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[321];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[322];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[323];
		GPIOC->ODR = Number_colour[320];
	break;
	case 262 ... 266:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
	break;
	case 267 ... 271:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[327];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[328];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
	break;
	case 272 ... 276:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
		GPIOC->ODR = Number_colour[320];
	break;
	}
	break;
	}
	switch(click[33])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 32:
			switch(flag_click[33])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 33:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 34 ... 99:
			switch(flag_click[33])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 241 ... 245:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
	break;
	case 246 ... 251:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[334];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[335];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[336];
		GPIOC->ODR = Number_colour[330];
	break;
	case 252 ... 256:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
	break;
	case 257 ... 261:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[331];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[332];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[333];
		GPIOC->ODR = Number_colour[330];
	break;
	case 262 ... 266:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
	break;
	case 267 ... 271:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[337];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[338];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
	break;
	case 272 ... 276:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
		GPIOC->ODR = Number_colour[330];
	break;
	}
	break;
	}
	switch(click[34])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 33:
			switch(flag_click[34])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 34:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 35 ... 99:
		switch(flag_click[34])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 241 ... 245:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
	break;
	case 246 ... 251:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[344];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[345];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[346];
		GPIOC->ODR = Number_colour[340];
	break;
	case 252 ... 256:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
	break;
	case 257 ... 261:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[341];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[342];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[343];
		GPIOC->ODR = Number_colour[340];
	break;
	case 262 ... 266:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
	break;
	case 267 ... 271:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[347];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[348];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
	break;
	case 272 ... 276:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
		GPIOC->ODR = Number_colour[340];
	break;
	}
	break;
	}
	switch(click[35])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 34:
			switch(flag_click[35])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 35:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 36 ... 99:
			switch(flag_click[35])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 241 ... 245:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
	break;
	case 246 ... 251:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[354];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[355];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[356];
		GPIOC->ODR = Number_colour[350];
	break;
	case 252 ... 256:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
	break;
	case 257 ... 261:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[351];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[352];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[353];
		GPIOC->ODR = Number_colour[350];
	break;
	case 262 ... 266:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
	break;
	case 267 ... 271:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[357];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[358];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
	break;
	case 272 ... 276:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
		GPIOC->ODR = Number_colour[350];
	break;
	}
	break;
	}
	switch(click[36])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 35:
		switch(flag_click[36])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 36:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 37 ... 99:
		switch(flag_click[36])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 241 ... 245:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
	break;
	case 246 ... 251:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[364];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[365];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[366];
		GPIOC->ODR = Number_colour[360];
	break;
	case 252 ... 256:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
	break;
	case 257 ... 261:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[361];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[362];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[363];
		GPIOC->ODR = Number_colour[360];
	break;
	case 262 ... 266:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
	break;
	case 267 ... 271:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[367];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[368];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
	break;
	case 272 ... 276:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
		GPIOC->ODR = Number_colour[360];
	break;
	}
	break;
	}
	switch(click[37])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 36:
		switch(flag_click[37])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 37:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 38 ... 99:
		switch(flag_click[37])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 241 ... 245:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
	break;
	case 246 ... 251:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[374];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[375];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[376];
		GPIOC->ODR = Number_colour[370];
	break;
	case 252 ... 256:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
	break;
	case 257 ... 261:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[371];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[372];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[373];
		GPIOC->ODR = Number_colour[370];
	break;
	case 262 ... 266:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
	break;
	case 267 ... 271:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[377];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[378];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
	break;
	case 272 ... 276:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
		GPIOC->ODR = Number_colour[370];
	break;
	}
	break;
	}
	switch(click[38])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 37:
		switch(flag_click[38])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 38:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 39 ... 99:
		switch(flag_click[38])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 241 ... 245:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
	break;
	case 246 ... 251:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[384];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[385];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[386];
		GPIOC->ODR = Number_colour[380];
	break;
	case 252 ... 256:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
	break;
	case 257 ... 261:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[381];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[382];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[383];
		GPIOC->ODR = Number_colour[380];
	break;
	case 262 ... 266:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
	break;
	case 267 ... 271:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[387];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[388];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
	break;
	case 272 ... 276:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
		GPIOC->ODR = Number_colour[380];
	break;
	}
	break;
	}
	switch(click[39])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 38:
		switch(flag_click[39])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		case 39:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = White_OFF;
			break;
		case 40 ... 99:
		switch(flag_click[39])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 241 ... 245:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = White_OFF;
	break;
	case 246 ... 251:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[394];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[395];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[396];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = White_OFF;
	break;
	case 252 ... 256:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = White_OFF;
	break;
	case 257 ... 261:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[391];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[392];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[393];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = White_OFF;
	break;
	case 262 ... 266:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = White_OFF;
	break;
	case 267 ... 271:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[397];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[398];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = White_OFF;
	break;
	case 272 ... 276:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = Number_colour[390];
		GPIOC->ODR = White_OFF;
	break;
	}
	break;
	}
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[24] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	break;

	case 277 ... 277: // casee = 15;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[24] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;
	while (waste_of_time<25)
	{
	GPIOC->ODR = dark_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;

	break;
	break;
	//		casee = 16;
	case 278 ... 313:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	switch(click[40])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 39:
		switch(flag_click[40])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		waste_of_time=0;
		break;
		case 40:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 41 ... 99:
		switch(flag_click[40])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 278 ... 282:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
	break;
	case 283 ... 288:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[404];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[405];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[406];
		GPIOC->ODR = Number_colour[400];
	break;
	case 289 ... 293:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
	break;
	case 294 ... 298:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[401];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[402];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[403];
		GPIOC->ODR = Number_colour[400];
	break;
	case 299 ... 303:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
	break;
	case 304 ... 308:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[407];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[408];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
	break;
	case 309 ... 313:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
		GPIOC->ODR = Number_colour[400];
	break;
	}
	break;
	}
	switch(click[41])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 40:
			switch(flag_click[41])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
		break;
		case 41:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 42 ... 99:
		switch(flag_click[41])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 278 ... 282:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
	break;
	case 283 ... 288:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[414];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[415];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[416];
		GPIOC->ODR = Number_colour[410];
	break;
	case 289 ... 293:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
	break;
	case 294 ... 298:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[411];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[412];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[413];
		GPIOC->ODR = Number_colour[410];
	break;
	case 299 ... 303:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
	break;
	case 304 ... 308:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[417];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[418];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
	break;
	case 309 ... 313:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
		GPIOC->ODR = Number_colour[410];
	break;
	}
	break;
	}
	switch(click[42])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 41:
			switch(flag_click[42])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 42:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 43 ... 99:
			switch(flag_click[42])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 278 ... 282:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
	break;
	case 283 ... 288:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[424];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[425];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[426];
		GPIOC->ODR = Number_colour[420];
	break;
	case 289 ... 293:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
	break;
	case 294 ... 298:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[421];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[422];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[423];
		GPIOC->ODR = Number_colour[420];
	break;
	case 299 ... 303:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
	break;
	case 304 ... 308:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[427];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[428];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
	break;
	case 309 ... 313:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
		GPIOC->ODR = Number_colour[420];
	break;
	}
	break;
	}
	switch(click[43])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 42:
			switch(flag_click[43])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 43:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 44 ... 99:
			switch(flag_click[43])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 278 ... 282:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
	break;
	case 283 ... 288:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[434];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[435];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[436];
		GPIOC->ODR = Number_colour[430];
	break;
	case 289 ... 293:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
	break;
	case 294 ... 298:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[431];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[432];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[433];
		GPIOC->ODR = Number_colour[430];
	break;
	case 299 ... 303:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
	break;
	case 304 ... 308:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[437];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[438];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
	break;
	case 309 ... 313:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
		GPIOC->ODR = Number_colour[430];
	break;
	}
	break;
	}
	switch(click[44])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 43:
			switch(flag_click[44])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 44:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 45 ... 99:
		switch(flag_click[44])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 278 ... 282:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
	break;
	case 283 ... 288:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[444];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[445];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[446];
		GPIOC->ODR = Number_colour[440];
	break;
	case 289 ... 293:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
	break;
	case 294 ... 298:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[441];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[442];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[443];
		GPIOC->ODR = Number_colour[440];
	break;
	case 299 ... 303:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
	break;
	case 304 ... 308:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[447];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[448];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
	break;
	case 309 ... 313:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
		GPIOC->ODR = Number_colour[440];
	break;
	}
	break;
	}
	switch(click[45])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 44:
			switch(flag_click[45])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 45:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 46 ... 99:
			switch(flag_click[45])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 278 ... 282:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
	break;
	case 283 ... 288:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[454];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[455];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[456];
		GPIOC->ODR = Number_colour[450];
	break;
	case 289 ... 293:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
	break;
	case 294 ... 298:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[451];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[452];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[453];
		GPIOC->ODR = Number_colour[450];
	break;
	case 299 ... 303:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
	break;
	case 304 ... 308:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[457];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[458];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
	break;
	case 309 ... 313:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
		GPIOC->ODR = Number_colour[450];
	break;
	}
	break;
	}
	switch(click[46])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 45:
		switch(flag_click[46])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 46:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 47 ... 99:
		switch(flag_click[46])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 278 ... 282:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
	break;
	case 283 ... 288:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[464];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[465];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[466];
		GPIOC->ODR = Number_colour[460];
	break;
	case 289 ... 293:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
	break;
	case 294 ... 298:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[461];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[462];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[463];
		GPIOC->ODR = Number_colour[460];
	break;
	case 299 ... 303:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
	break;
	case 304 ... 308:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[467];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[468];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
	break;
	case 309 ... 313:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
		GPIOC->ODR = Number_colour[460];
	break;
	}
	break;
	}
	switch(click[47])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 46:
		switch(flag_click[47])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 47:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 48 ... 99:
		switch(flag_click[47])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 278 ... 282:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
	break;
	case 283 ... 288:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[474];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[475];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[476];
		GPIOC->ODR = Number_colour[470];
	break;
	case 289 ... 293:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
	break;
	case 294 ... 298:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[471];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[472];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[473];
		GPIOC->ODR = Number_colour[470];
	break;
	case 299 ... 303:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
	break;
	case 304 ... 308:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[477];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[478];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
	break;
	case 309 ... 313:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
		GPIOC->ODR = Number_colour[470];
	break;
	}
	break;
	}
	switch(click[48])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 47:
		switch(flag_click[48])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 48:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 49 ... 99:
		switch(flag_click[48])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 278 ... 282:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
	break;
	case 283 ... 288:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[484];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[485];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[486];
		GPIOC->ODR = Number_colour[480];
	break;
	case 289 ... 293:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
	break;
	case 294 ... 298:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[481];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[482];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[483];
		GPIOC->ODR = Number_colour[480];
	break;
	case 299 ... 303:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
	break;
	case 304 ... 308:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[487];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[488];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
	break;
	case 309 ... 313:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
		GPIOC->ODR = Number_colour[480];
	break;
	}
	break;
	}
	switch(click[49])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 48:
		switch(flag_click[49])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		case 49:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = White_OFF;
			break;
		case 50 ... 99:
		switch(flag_click[49])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 278 ... 282:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = White_OFF;
	break;
	case 283 ... 288:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[494];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[495];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[496];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = White_OFF;
	break;
	case 289 ... 293:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = White_OFF;
	break;
	case 294 ... 298:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[491];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[492];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[493];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = White_OFF;
	break;
	case 299 ... 303:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = White_OFF;
	break;
	case 304 ... 308:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[497];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[498];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = White_OFF;
	break;
	case 309 ... 313:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = Number_colour[490];
		GPIOC->ODR = White_OFF;
	break;
	}
	break;
	}
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[23] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	break;
	//	casee = 17;
	case 314 ... 314:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[20] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;
	while (waste_of_time<25)
	{
	GPIOC->ODR = dark_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;

	break;

	//		casee = 18;
	case 315 ... 350:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	switch(click[50])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 49:
		switch(flag_click[50])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		waste_of_time=0;
		break;
		case 50:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 51 ... 99:
		switch(flag_click[50])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 315 ... 319:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
	break;
	case 320 ... 325:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[504];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[505];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[506];
		GPIOC->ODR = Number_colour[500];
	break;
	case 326 ... 330:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
	break;
	case 331 ... 335:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[501];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[502];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[503];
		GPIOC->ODR = Number_colour[500];
	break;
	case 336 ... 340:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
	break;
	case 341 ... 345:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[507];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[508];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
	break;
	case 346 ... 350:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
		GPIOC->ODR = Number_colour[500];
	break;
	}
	break;
	}
	switch(click[51])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 50:
			switch(flag_click[51])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
		break;
		case 51:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 52 ... 99:
		switch(flag_click[51])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 315 ... 319:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
	break;
	case 320 ... 325:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[514];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[515];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[516];
		GPIOC->ODR = Number_colour[510];
	break;
	case 326 ... 330:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
	break;
	case 331 ... 335:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[511];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[512];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[513];
		GPIOC->ODR = Number_colour[510];
	break;
	case 336 ... 340:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
	break;
	case 341 ... 345:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[517];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[518];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
	break;
	case 346 ... 350:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
		GPIOC->ODR = Number_colour[510];
	break;
	}
	break;
	}
	switch(click[52])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 51:
			switch(flag_click[52])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 52:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 53 ... 99:
			switch(flag_click[52])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 315 ... 319:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
	break;
	case 320 ... 325:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[524];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[525];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[526];
		GPIOC->ODR = Number_colour[520];
	break;
	case 326 ... 330:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
	break;
	case 331 ... 335:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[521];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[522];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[523];
		GPIOC->ODR = Number_colour[520];
	break;
	case 336 ... 340:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
	break;
	case 341 ... 345:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[527];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[528];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
	break;
	case 346 ... 350:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
		GPIOC->ODR = Number_colour[520];
	break;
	}
	break;
	}
	switch(click[53])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 52:
			switch(flag_click[53])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 53:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 54 ... 99:
			switch(flag_click[53])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 315 ... 319:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
	break;
	case 320 ... 325:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[534];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[535];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[536];
		GPIOC->ODR = Number_colour[530];
	break;
	case 326 ... 330:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
	break;
	case 331 ... 335:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[531];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[532];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[533];
		GPIOC->ODR = Number_colour[530];
	break;
	case 336 ... 340:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
	break;
	case 341 ... 345:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[537];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[538];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
	break;
	case 346 ... 350:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
		GPIOC->ODR = Number_colour[530];
	break;
	}
	break;
	}
	switch(click[54])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 53:
			switch(flag_click[54])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 54:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 55 ... 99:
		switch(flag_click[54])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 315 ... 319:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
	break;
	case 320 ... 325:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[544];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[545];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[546];
		GPIOC->ODR = Number_colour[540];
	break;
	case 326 ... 330:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
	break;
	case 331 ... 335:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[541];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[542];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[543];
		GPIOC->ODR = Number_colour[540];
	break;
	case 336 ... 340:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
	break;
	case 341 ... 345:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[547];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[548];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
	break;
	case 346 ... 350:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
		GPIOC->ODR = Number_colour[540];
	break;
	}
	break;
	}
	switch(click[55])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 54:
			switch(flag_click[55])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 55:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 56 ... 99:
			switch(flag_click[55])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 315 ... 319:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
	break;
	case 320 ... 325:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[554];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[555];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[556];
		GPIOC->ODR = Number_colour[550];
	break;
	case 326 ... 330:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
	break;
	case 331 ... 335:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[551];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[552];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[553];
		GPIOC->ODR = Number_colour[550];
	break;
	case 336 ... 340:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
	break;
	case 341 ... 345:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[557];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[558];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
	break;
	case 346 ... 350:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
		GPIOC->ODR = Number_colour[550];
	break;
	}
	break;
	}
	switch(click[56])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 55:
		switch(flag_click[56])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 56:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 57 ... 99:
		switch(flag_click[56])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 315 ... 319:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
	break;
	case 320 ... 325:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[564];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[565];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[566];
		GPIOC->ODR = Number_colour[560];
	break;
	case 326 ... 330:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
	break;
	case 331 ... 335:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[561];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[562];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[563];
		GPIOC->ODR = Number_colour[560];
	break;
	case 336 ... 340:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
	break;
	case 341 ... 345:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[567];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[568];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
	break;
	case 346 ... 350:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
		GPIOC->ODR = Number_colour[560];
	break;
	}
	break;
	}
	switch(click[57])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 56:
		switch(flag_click[57])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 57:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 58 ... 99:
		switch(flag_click[57])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 315 ... 319:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
	break;
	case 320 ... 325:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[574];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[575];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[576];
		GPIOC->ODR = Number_colour[570];
	break;
	case 326 ... 330:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
	break;
	case 331 ... 335:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[571];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[572];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[573];
		GPIOC->ODR = Number_colour[570];
	break;
	case 336 ... 340:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
	break;
	case 341 ... 345:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[577];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[578];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
	break;
	case 346 ... 350:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
		GPIOC->ODR = Number_colour[570];
	break;
	}
	break;
	}
	switch(click[58])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 57:
		switch(flag_click[58])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 58:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 59 ... 99:
		switch(flag_click[58])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 315 ... 319:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
	break;
	case 320 ... 325:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[584];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[585];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[586];
		GPIOC->ODR = Number_colour[580];
	break;
	case 326 ... 330:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
	break;
	case 331 ... 335:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[581];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[582];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[583];
		GPIOC->ODR = Number_colour[580];
	break;
	case 336 ... 340:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
	break;
	case 341 ... 345:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[587];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[588];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
	break;
	case 346 ... 350:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
		GPIOC->ODR = Number_colour[580];
	break;
	}
	break;
	}
	switch(click[59])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 58:
		switch(flag_click[59])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		case 59:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = White_OFF;
			break;
		case 60 ... 99:
		switch(flag_click[59])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 315 ... 319:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = White_OFF;
	break;
	case 320 ... 325:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[594];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[595];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[596];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = White_OFF;
	break;
	case 326 ... 330:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = White_OFF;
	break;
	case 331 ... 335:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[591];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[592];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[593];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = White_OFF;
	break;
	case 336 ... 340:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = White_OFF;
	break;
	case 341 ... 345:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[597];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[598];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = White_OFF;
	break;
	case 346 ... 350:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = Number_colour[590];
		GPIOC->ODR = White_OFF;
	break;
	}
	break;
	}
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[19] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	break;
	//	casee = 19;
	case 351 ... 351:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[12] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;
	while (waste_of_time<24)
	{
	GPIOC->ODR = dark_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	break;
	//	casee = 20;
	case 352 ... 387:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	switch(click[60])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 59:
		switch(flag_click[60])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		waste_of_time=0;
		break;
		case 60:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 61 ... 99:
		switch(flag_click[60])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 352 ... 356:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
	break;
	case 357 ... 362:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[604];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[605];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[606];
		GPIOC->ODR = Number_colour[600];
	break;
	case 363 ... 367:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
	break;
	case 368 ... 372:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[601];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[602];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[603];
		GPIOC->ODR = Number_colour[600];
	break;
	case 373 ... 377:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
	break;
	case 378 ... 382:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[607];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[608];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
	break;
	case 383 ... 387:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
		GPIOC->ODR = Number_colour[600];
	break;
	}
	break;
	}
	switch(click[61])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 60:
			switch(flag_click[61])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
		break;
		case 61:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 62 ... 99:
		switch(flag_click[61])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 352 ... 356:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
	break;
	case 357 ... 362:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[614];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[615];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[616];
		GPIOC->ODR = Number_colour[610];
	break;
	case 363 ... 367:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
	break;
	case 368 ... 372:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[611];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[612];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[613];
		GPIOC->ODR = Number_colour[610];
	break;
	case 373 ... 377:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
	break;
	case 378 ... 382:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[617];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[618];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
	break;
	case 383 ... 387:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
		GPIOC->ODR = Number_colour[610];
	break;
	}
	break;
	}
	switch(click[62])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 61:
			switch(flag_click[62])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 62:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 63 ... 99:
			switch(flag_click[62])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 352 ... 356:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
	break;
	case 357 ... 362:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[624];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[625];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[626];
		GPIOC->ODR = Number_colour[620];
	break;
	case 363 ... 367:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
	break;
	case 368 ... 372:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[621];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[622];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[623];
		GPIOC->ODR = Number_colour[620];
	break;
	case 373 ... 377:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
	break;
	case 378 ... 382:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[627];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[628];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
	break;
	case 383 ... 387:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
		GPIOC->ODR = Number_colour[620];
	break;
	}
	break;
	}
	switch(click[63])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 62:
			switch(flag_click[63])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 63:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 64 ... 99:
			switch(flag_click[63])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 352 ... 356:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
	break;
	case 357 ... 362:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[634];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[635];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[636];
		GPIOC->ODR = Number_colour[630];
	break;
	case 363 ... 367:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
	break;
	case 368 ... 372:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[631];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[632];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[633];
		GPIOC->ODR = Number_colour[630];
	break;
	case 373 ... 377:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
	break;
	case 378 ... 382:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[637];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[638];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
	break;
	case 383 ... 387:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
		GPIOC->ODR = Number_colour[630];
	break;
	}
	break;
	}
	switch(click[64])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 63:
			switch(flag_click[64])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 64:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 65 ... 99:
		switch(flag_click[64])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 352 ... 356:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
	break;
	case 357 ... 362:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[644];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[645];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[646];
		GPIOC->ODR = Number_colour[640];
	break;
	case 363 ... 367:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
	break;
	case 368 ... 372:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[641];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[642];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[643];
		GPIOC->ODR = Number_colour[640];
	break;
	case 373 ... 377:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
	break;
	case 378 ... 382:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[647];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[648];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
	break;
	case 383 ... 387:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
		GPIOC->ODR = Number_colour[640];
	break;
	}
	break;
	}
	switch(click[65])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 64:
			switch(flag_click[65])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 65:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 66 ... 99:
			switch(flag_click[65])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 352 ... 356:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
	break;
	case 357 ... 362:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[654];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[655];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[656];
		GPIOC->ODR = Number_colour[650];
	break;
	case 363 ... 367:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
	break;
	case 368 ... 372:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[651];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[652];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[653];
		GPIOC->ODR = Number_colour[650];
	break;
	case 373 ... 377:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
	break;
	case 378 ... 382:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[657];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[658];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
	break;
	case 383 ... 387:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
		GPIOC->ODR = Number_colour[650];
	break;
	}
	break;
	}
	switch(click[66])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 65:
		switch(flag_click[66])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 66:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 67 ... 99:
		switch(flag_click[66])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 352 ... 356:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
	break;
	case 357 ... 362:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[664];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[665];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[666];
		GPIOC->ODR = Number_colour[660];
	break;
	case 363 ... 367:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
	break;
	case 368 ... 372:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[661];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[662];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[663];
		GPIOC->ODR = Number_colour[660];
	break;
	case 373 ... 377:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
	break;
	case 378 ... 382:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[667];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[668];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
	break;
	case 383 ... 387:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
		GPIOC->ODR = Number_colour[660];
	break;
	}
	break;
	}
	switch(click[67])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 66:
		switch(flag_click[67])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 67:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 68 ... 99:
		switch(flag_click[67])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 352 ... 356:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
	break;
	case 357 ... 362:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[674];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[675];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[676];
		GPIOC->ODR = Number_colour[670];
	break;
	case 363 ... 367:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
	break;
	case 368 ... 372:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[671];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[672];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[673];
		GPIOC->ODR = Number_colour[670];
	break;
	case 373 ... 377:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
	break;
	case 378 ... 382:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[677];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[678];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
	break;
	case 383 ... 387:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
		GPIOC->ODR = Number_colour[670];
	break;
	}
	break;
	}
	switch(click[68])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 67:
		switch(flag_click[68])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 68:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 69 ... 99:
		switch(flag_click[68])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 352 ... 356:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
	break;
	case 357 ... 362:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[684];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[685];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[686];
		GPIOC->ODR = Number_colour[680];
	break;
	case 363 ... 367:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
	break;
	case 368 ... 372:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[681];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[682];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[683];
		GPIOC->ODR = Number_colour[680];
	break;
	case 373 ... 377:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
	break;
	case 378 ... 382:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[687];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[688];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
	break;
	case 383 ... 387:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
		GPIOC->ODR = Number_colour[680];
	break;
	}
	break;
	}
	switch(click[69])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 68:
		switch(flag_click[69])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		case 69:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = White_OFF;
			break;
		case 70 ... 99:
		switch(flag_click[69])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 352 ... 356:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = White_OFF;
	break;
	case 357 ... 362:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[694];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[695];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[696];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = White_OFF;
	break;
	case 363 ... 367:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = White_OFF;
	break;
	case 368 ... 372:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[691];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[692];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[693];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = White_OFF;
	break;
	case 373 ... 377:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = White_OFF;
	break;
	case 378 ... 382:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[697];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[698];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = White_OFF;
	break;
	case 383 ... 387:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = Number_colour[690];
		GPIOC->ODR = White_OFF;
	break;
	}
	break;
	}
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[10] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	break;
	//casee = 21;
	case 388 ... 388:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[2] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;
	while (waste_of_time<24)
	{
	GPIOC->ODR = dark_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	break;
	//casee = 22;
	case 389 ... 424:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	switch(click[70])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 69:
		switch(flag_click[70])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		waste_of_time=0;
		break;
		case 70:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 71 ... 99:
		switch(flag_click[70])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 389 ... 393:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
	break;
	case 394 ... 399:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[704];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[705];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[706];
		GPIOC->ODR = Number_colour[700];
	break;
	case 400 ... 404:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
	break;
	case 405 ... 409:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[701];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[702];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[703];
		GPIOC->ODR = Number_colour[700];
	break;
	case 410 ... 414:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
	break;
	case 415 ... 419:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[707];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[708];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
	break;
	case 420 ... 424:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
		GPIOC->ODR = Number_colour[700];
	break;
	}
	break;
	}
	switch(click[71])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 70:
			switch(flag_click[71])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
		break;
		case 71:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 72 ... 99:
		switch(flag_click[71])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 389 ... 393:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
	break;
	case 394 ... 399:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[714];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[715];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[716];
		GPIOC->ODR = Number_colour[710];
	break;
	case 400 ... 404:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
	break;
	case 405 ... 409:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[711];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[712];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[713];
		GPIOC->ODR = Number_colour[710];
	break;
	case 410 ... 414:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
	break;
	case 415 ... 419:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[717];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[718];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
	break;
	case 420 ... 424:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
		GPIOC->ODR = Number_colour[710];
	break;
	}
	break;
	}
	switch(click[72])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 71:
			switch(flag_click[72])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 72:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 73 ... 99:
			switch(flag_click[72])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 389 ... 393:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
	break;
	case 394 ... 399:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[724];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[725];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[726];
		GPIOC->ODR = Number_colour[720];
	break;
	case 400 ... 404:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
	break;
	case 405 ... 409:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[721];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[722];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[723];
		GPIOC->ODR = Number_colour[720];
	break;
	case 410 ... 414:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
	break;
	case 415 ... 419:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[727];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[728];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
	break;
	case 420 ... 424:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
		GPIOC->ODR = Number_colour[720];
	break;
	}
	break;
	}
	switch(click[73])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 72:
			switch(flag_click[73])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 73:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 74 ... 99:
			switch(flag_click[73])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 389 ... 393:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
	break;
	case 394 ... 399:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[734];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[735];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[736];
		GPIOC->ODR = Number_colour[730];
	break;
	case 400 ... 404:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
	break;
	case 405 ... 409:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[731];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[732];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[733];
		GPIOC->ODR = Number_colour[730];
	break;
	case 410 ... 414:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
	break;
	case 415 ... 419:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[737];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[738];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
	break;
	case 420 ... 424:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
		GPIOC->ODR = Number_colour[730];
	break;
	}
	break;
	}
	switch(click[74])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 73:
			switch(flag_click[74])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 74:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 75 ... 99:
		switch(flag_click[74])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 389 ... 393:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
	break;
	case 394 ... 399:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[744];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[745];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[746];
		GPIOC->ODR = Number_colour[740];
	break;
	case 400 ... 404:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
	break;
	case 405 ... 409:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[741];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[742];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[743];
		GPIOC->ODR = Number_colour[740];
	break;
	case 410 ... 414:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
	break;
	case 415 ... 419:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[747];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[748];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
	break;
	case 420 ... 424:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
		GPIOC->ODR = Number_colour[740];
	break;
	}
	break;
	}
	switch(click[75])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 74:
			switch(flag_click[75])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 75:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 76 ... 99:
			switch(flag_click[75])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 389 ... 393:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
	break;
	case 394 ... 399:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[754];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[755];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[756];
		GPIOC->ODR = Number_colour[750];
	break;
	case 400 ... 404:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
	break;
	case 405 ... 409:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[751];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[752];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[753];
		GPIOC->ODR = Number_colour[750];
	break;
	case 410 ... 414:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
	break;
	case 415 ... 419:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[757];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[758];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
	break;
	case 420 ... 424:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
		GPIOC->ODR = Number_colour[750];
	break;
	}
	break;
	}
	switch(click[76])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 75:
		switch(flag_click[76])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 76:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 77 ... 99:
		switch(flag_click[76])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 389 ... 393:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
	break;
	case 394 ... 399:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[764];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[765];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[766];
		GPIOC->ODR = Number_colour[760];
	break;
	case 400 ... 404:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
	break;
	case 405 ... 409:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[761];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[762];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[763];
		GPIOC->ODR = Number_colour[760];
	break;
	case 410 ... 414:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
	break;
	case 415 ... 419:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[767];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[768];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
	break;
	case 420 ... 424:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
		GPIOC->ODR = Number_colour[760];
	break;
	}
	break;
	}
	switch(click[77])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 76:
		switch(flag_click[77])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 77:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 78 ... 99:
		switch(flag_click[77])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 389 ... 393:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
	break;
	case 394 ... 399:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[774];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[775];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[776];
		GPIOC->ODR = Number_colour[770];
	break;
	case 400 ... 404:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
	break;
	case 405 ... 409:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[771];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[772];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[773];
		GPIOC->ODR = Number_colour[770];
	break;
	case 410 ... 414:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
	break;
	case 415 ... 419:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[777];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[778];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
	break;
	case 420 ... 424:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
		GPIOC->ODR = Number_colour[770];
	break;
	}
	break;
	}
	switch(click[78])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 77:
		switch(flag_click[78])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 78:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 79 ... 99:
		switch(flag_click[78])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 389 ... 393:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
	break;
	case 394 ... 399:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[784];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[785];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[786];
		GPIOC->ODR = Number_colour[780];
	break;
	case 400 ... 404:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
	break;
	case 405 ... 409:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[781];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[782];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[783];
		GPIOC->ODR = Number_colour[780];
	break;
	case 410 ... 414:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
	break;
	case 415 ... 419:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[787];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[788];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
	break;
	case 420 ... 424:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
		GPIOC->ODR = Number_colour[780];
	break;
	}
	break;
	}
	switch(click[79])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 78:
		switch(flag_click[79])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		case 79:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = White_OFF;
			break;
		case 80 ... 99:
		switch(flag_click[79])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 389 ... 393:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = White_OFF;
	break;
	case 394 ... 399:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[794];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[795];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[796];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = White_OFF;
	break;
	case 400 ... 404:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = White_OFF;
	break;
	case 405 ... 409:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[791];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[792];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[793];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = White_OFF;
	break;
	case 410 ... 414:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = White_OFF;
	break;
	case 415 ... 419:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[797];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[798];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = White_OFF;
	break;
	case 420 ... 424:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = Number_colour[790];
		GPIOC->ODR = White_OFF;
	break;
	}
	break;
	}
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[16] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	break;
	//	casee = 23;
	case 425 ... 425:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[21] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;
	while (waste_of_time<24)
	{
	GPIOC->ODR = dark_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	break;
	break;
	case 426 ... 461: // casee = 24;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	switch(click[80])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 79:
		switch(flag_click[80])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		waste_of_time=0;
		break;
		case 80:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 81 ... 99:
		switch(flag_click[80])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 426 ... 430:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
	break;
	case 431 ... 436:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[804];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[805];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[806];
		GPIOC->ODR = Number_colour[800];
	break;
	case 437 ... 441:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
	break;
	case 442 ... 446:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[801];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[802];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[803];
		GPIOC->ODR = Number_colour[800];
	break;
	case 447 ... 451:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
	break;
	case 452 ... 456:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[807];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[808];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
	break;
	case 457 ... 461:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
		GPIOC->ODR = Number_colour[800];
	break;
	}
	break;
	}

	switch(click[81])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 80:
			switch(flag_click[81])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
		break;
		case 81:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 82 ... 99:
		switch(flag_click[81])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 426 ... 430:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
	break;
	case 431 ... 436:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[814];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[815];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[816];
		GPIOC->ODR = Number_colour[810];
	break;
	case 437 ... 441:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
	break;
	case 442 ... 446:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[811];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[812];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[813];
		GPIOC->ODR = Number_colour[810];
	break;
	case 447 ... 451:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
	break;
	case 452 ... 456:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[817];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[818];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
	break;
	case 457 ... 461:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
		GPIOC->ODR = Number_colour[810];
	break;
	}
	break;
	}
	switch(click[82])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 81:
			switch(flag_click[82])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 82:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 83 ... 99:
			switch(flag_click[82])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 426 ... 430:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
	break;
	case 431 ... 436:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[824];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[825];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[826];
		GPIOC->ODR = Number_colour[820];
	break;
	case 437 ... 441:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
	break;
	case 442 ... 446:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[821];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[822];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[823];
		GPIOC->ODR = Number_colour[820];
	break;
	case 447 ... 451:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
	break;
	case 452 ... 456:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[827];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[828];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
	break;
	case 457 ... 461:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
		GPIOC->ODR = Number_colour[820];
	break;
	}
	break;
	}
	switch(click[83])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 82:
			switch(flag_click[83])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 83:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 84 ... 99:
			switch(flag_click[83])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 426 ... 430:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
	break;
	case 431 ... 436:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[834];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[835];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[836];
		GPIOC->ODR = Number_colour[830];
	break;
	case 437 ... 441:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
	break;
	case 442 ... 446:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[831];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[832];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[833];
		GPIOC->ODR = Number_colour[830];
	break;
	case 447 ... 451:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
	break;
	case 452 ... 456:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[837];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[838];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
	break;
	case 457 ... 461:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
		GPIOC->ODR = Number_colour[830];
	break;
	}
	break;
	}
	switch(click[84])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 83:
			switch(flag_click[84])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 84:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 85 ... 99:
		switch(flag_click[84])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 426 ... 430:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
	break;
	case 431 ... 436:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[844];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[845];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[846];
		GPIOC->ODR = Number_colour[840];
	break;
	case 437 ... 441:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
	break;
	case 442 ... 446:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[841];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[842];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[843];
		GPIOC->ODR = Number_colour[840];
	break;
	case 447 ... 451:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
	break;
	case 452 ... 456:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[847];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[848];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
	break;
	case 457 ... 461:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
		GPIOC->ODR = Number_colour[840];
	break;
	}
	break;
	}
	switch(click[85])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 84:
			switch(flag_click[85])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 85:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 86 ... 99:
			switch(flag_click[85])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 426 ... 430:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
	break;
	case 431 ... 436:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[854];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[855];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[856];
		GPIOC->ODR = Number_colour[850];
	break;
	case 437 ... 441:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
	break;
	case 442 ... 446:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[851];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[852];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[853];
		GPIOC->ODR = Number_colour[850];
	break;
	case 447 ... 451:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
	break;
	case 452 ... 456:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[857];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[858];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
	break;
	case 457 ... 461:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
		GPIOC->ODR = Number_colour[850];
	break;
	}
	break;
	}
	switch(click[86])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 85:
		switch(flag_click[86])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 86:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 87 ... 99:
		switch(flag_click[86])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 426 ... 430:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
	break;
	case 431 ... 436:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[864];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[865];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[866];
		GPIOC->ODR = Number_colour[860];
	break;
	case 437 ... 441:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
	break;
	case 442 ... 446:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[861];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[862];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[863];
		GPIOC->ODR = Number_colour[860];
	break;
	case 447 ... 451:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
	break;
	case 452 ... 456:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[867];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[868];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
	break;
	case 457 ... 461:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
		GPIOC->ODR = Number_colour[860];
	break;
	}
	break;
	}
	switch(click[87])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 86:
		switch(flag_click[87])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 87:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 88 ... 99:
		switch(flag_click[87])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 426 ... 430:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
	break;
	case 431 ... 436:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[874];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[875];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[876];
		GPIOC->ODR = Number_colour[870];
	break;
	case 437 ... 441:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
	break;
	case 442 ... 446:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[871];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[872];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[873];
		GPIOC->ODR = Number_colour[870];
	break;
	case 447 ... 451:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
	break;
	case 452 ... 456:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[877];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[878];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
	break;
	case 457 ... 461:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
		GPIOC->ODR = Number_colour[870];
	break;
	}
	break;
	}
	switch(click[88])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 87:
		switch(flag_click[88])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 88:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 89 ... 99:
		switch(flag_click[88])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 426 ... 430:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
	break;
	case 431 ... 436:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[884];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[885];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[886];
		GPIOC->ODR = Number_colour[880];
	break;
	case 437 ... 441:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
	break;
	case 442 ... 446:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[881];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[882];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[883];
		GPIOC->ODR = Number_colour[880];
	break;
	case 447 ... 451:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
	break;
	case 452 ... 456:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[887];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[888];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
	break;
	case 457 ... 461:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
		GPIOC->ODR = Number_colour[880];
	break;
	}
	break;
	}
	switch(click[89])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 88:
		switch(flag_click[89])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		case 89:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = White_OFF;
			break;
		case 90 ... 99:
		switch(flag_click[89])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 426 ... 430:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = White_OFF;
	break;
	case 431 ... 436:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[894];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[895];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[896];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = White_OFF;
	break;
	case 437 ... 441:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = White_OFF;
	break;
	case 442 ... 446:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[891];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[892];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[893];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = White_OFF;
	break;
	case 447 ... 451:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = White_OFF;
	break;
	case 452 ... 456:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[897];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[898];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = White_OFF;
	break;
	case 457 ... 461:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = Number_colour[890];
		GPIOC->ODR = White_OFF;
	break;
	}
	break;
	}
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[26] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	break;
	//		casee = 25
	case 462 ... 462:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[3] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;
	while (waste_of_time<24)
	{
	GPIOC->ODR = dark_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	break;
	//		casee = 26;
	case 463 ... 498:
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = White_OFF;
	switch(click[90])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 89:
		switch(flag_click[90])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		waste_of_time=0;
		break;
		case 90:
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = White_OFF;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = Light_gray;
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 91 ... 99:
		switch(flag_click[90])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = Border_L;
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 463 ... 467:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
	break;
	case 468 ... 473:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[904];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[905];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[906];
		GPIOC->ODR = Number_colour[900];
	break;
	case 474 ... 478:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
	break;
	case 479 ... 483:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[901];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[902];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[903];
		GPIOC->ODR = Number_colour[900];
	break;
	case 484 ... 488:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
	break;
	case 489 ... 493:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[907];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[908];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
	break;
	case 494 ... 498:
		GPIOC->ODR = White_OFF;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray; // padek cia break pointa
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
		GPIOC->ODR = Number_colour[900];
	break;
	}
	break;
	}
	switch(click[91])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 90:
			switch(flag_click[91])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
			GPIOC->ODR = light_gray;
		break;
		case 91:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 92 ... 99:
		switch(flag_click[91])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 463 ... 467:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
	break;
	case 468 ... 473:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[914];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[915];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[916];
		GPIOC->ODR = Number_colour[910];
	break;
	case 474 ... 478:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
	break;
	case 479 ... 483:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[911];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[912];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[913];
		GPIOC->ODR = Number_colour[910];
	break;
	case 484 ... 488:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
	break;
	case 489 ... 493:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[917];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[918];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
	break;
	case 494 ... 498:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
		GPIOC->ODR = Number_colour[910];
	break;
	}
	break;
	}
	switch(click[92])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 91:
			switch(flag_click[92])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 92:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 93 ... 99:
			switch(flag_click[92])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 463 ... 467:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
	break;
	case 468 ... 473:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[924];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[925];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[926];
		GPIOC->ODR = Number_colour[920];
	break;
	case 474 ... 478:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
	break;
	case 479 ... 483:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[921];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[922];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[923];
		GPIOC->ODR = Number_colour[920];
	break;
	case 484 ... 488:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
	break;
	case 489 ... 493:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[927];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[928];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
	break;
	case 494 ... 498:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
		GPIOC->ODR = Number_colour[920];
	break;
	}
	break;
	}
	switch(click[93])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 92:
			switch(flag_click[93])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 93:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
		break;
		case 94 ... 99:
			switch(flag_click[93])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 463 ... 467:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
	break;
	case 468 ... 473:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[934];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[935];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[936];
		GPIOC->ODR = Number_colour[930];
	break;
	case 474 ... 478:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
	break;
	case 479 ... 483:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[931];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[932];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[933];
		GPIOC->ODR = Number_colour[930];
	break;
	case 484 ... 488:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
	break;
	case 489 ... 493:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[937];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[938];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
	break;
	case 494 ... 498:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
		GPIOC->ODR = Number_colour[930];
	break;
	}
	break;
	}
	switch(click[94])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 93:
			switch(flag_click[94])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 94:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 95 ... 99:
		switch(flag_click[94])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 463 ... 467:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
	break;
	case 468 ... 473:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[944];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[945];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[946];
		GPIOC->ODR = Number_colour[940];
	break;
	case 474 ... 478:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
	break;
	case 479 ... 483:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[941];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[942];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[943];
		GPIOC->ODR = Number_colour[940];
	break;
	case 484 ... 488:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
	break;
	case 489 ... 493:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[947];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[948];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
	break;
	case 494 ... 498:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
		GPIOC->ODR = Number_colour[940];
	break;
	}
	break;
	}
	switch(click[95])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 94:
			switch(flag_click[95])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 95:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 96 ... 99:
			switch(flag_click[95])
			{
			case 1:
				light_gray = Orange_bright;
				break;
			case 0:
				light_gray = Light_gray;
				break;
			}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 463 ... 467:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
	break;
	case 468 ... 473:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[954];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[955];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[956];
		GPIOC->ODR = Number_colour[950];
	break;
	case 474 ... 478:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
	break;
	case 479 ... 483:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[951];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[952];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[953];
		GPIOC->ODR = Number_colour[950];
	break;
	case 484 ... 488:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
	break;
	case 489 ... 493:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[957];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[958];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
	break;
	case 494 ... 498:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
		GPIOC->ODR = Number_colour[950];
	break;
	}
	break;
	}
	switch(click[96])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 95:
		switch(flag_click[96])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 96:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 97 ... 99:
		switch(flag_click[96])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 463 ... 467:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
	break;
	case 468 ... 473:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[964];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[965];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[966];
		GPIOC->ODR = Number_colour[960];
	break;
	case 474 ... 478:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
	break;
	case 479 ... 483:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[961];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[962];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[963];
		GPIOC->ODR = Number_colour[960];
	break;
	case 484 ... 488:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
	break;
	case 489 ... 493:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[967];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[968];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
	break;
	case 494 ... 498:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
		GPIOC->ODR = Number_colour[960];
	break;
	}
	break;
	}
	switch(click[97])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 96:
		switch(flag_click[97])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 97:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 98 ... 99:
		switch(flag_click[97])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 463 ... 467:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
	break;
	case 468 ... 473:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[974];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[975];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[976];
		GPIOC->ODR = Number_colour[970];
	break;
	case 474 ... 478:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
	break;
	case 479 ... 483:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[971];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[972];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[973];
		GPIOC->ODR = Number_colour[970];
	break;
	case 484 ... 488:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
	break;
	case 489 ... 493:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[977];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[978];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
	break;
	case 494 ... 498:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
		GPIOC->ODR = Number_colour[970];
	break;
	}
	break;
	}
	switch(click[98])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 97:
		switch(flag_click[98])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		case 98:
			GPIOC->ODR = dark_gray;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			break;
		case 99 ... 99:
		switch(flag_click[98])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 463 ... 467:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
	break;
	case 468 ... 473:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[984];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[985];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[986];
		GPIOC->ODR = Number_colour[980];
	break;
	case 474 ... 478:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
	break;
	case 479 ... 483:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[981];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[982];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[983];
		GPIOC->ODR = Number_colour[980];
	break;
	case 484 ... 488:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
	break;
	case 489 ... 493:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[987];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[988];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
	break;
	case 494 ... 498:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
		GPIOC->ODR = Number_colour[980];
	break;
	}
	break;
	}
	switch(click[99])
	{
	case 0:
		switch(Mine_state)
		{
		case 0 ... 98:
		switch(flag_click[99])
		{
		case 1:
			light_gray = Orange_bright;
			break;
		case 0:
			light_gray = Light_gray;
			break;
		}
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = light_gray;
		GPIOC->ODR = White_OFF;
		break;
		case 99:
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = Sand_yellow;
			GPIOC->ODR = White_OFF;
			break;
		}
	break;
	case 1:
	switch(Lines)
	{
	case 463 ... 467:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = White_OFF;
	break;
	case 468 ... 473:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[994];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[995];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[996];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = White_OFF;
	break;
	case 474 ... 478:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = White_OFF;
	break;
	case 479 ... 483:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[991];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[992];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[993];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = White_OFF;
	break;
	case 484 ... 488:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = White_OFF;
	break;
	case 489 ... 493:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[997];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[998];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = White_OFF;
	break;
	case 494 ... 498:
		GPIOC->ODR = dark_gray;
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = Number_colour[990];
		GPIOC->ODR = White_OFF;
	break;
	}
	break;
	}
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	if((Bomb_pressed == 1 || winning == 90) && boom[17] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	break;
	//	casee = 27;
	case 499 ... 505:
	while(waste_of_time < 12)
	{
		GPIOC->ODR = White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;
	if((Bomb_pressed == 1 || winning == 90) && boom[13] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = White;
	while (waste_of_time<72)
	{
	GPIOC->ODR = White;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	break;

	//casee = 28;
	case 506 ... 516:
	while(waste_of_time < 12)
	{
		GPIOC->ODR = White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;
	if((Bomb_pressed == 1 || winning == 90) && boom[7] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	while (waste_of_time<72)
	{
	GPIOC->ODR = light_gray;
	waste_of_time++;
	}
	GPIOC->ODR = dark_gray;
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = light_gray;
	GPIOC->ODR = White;
	GPIOC->ODR = White_OFF;
	break;
	//casee = 29;
	case 517 ... 523:
	while(waste_of_time < 12)
	{
		GPIOC->ODR = White_OFF;
		waste_of_time++;
	}
	waste_of_time = 0;
	if((Bomb_pressed == 1 || winning == 90) && boom[27] == 1)
	{
		light_gray = White_OFF;
		dark_gray = White_OFF;
		White = White_OFF;
		Border_L = White_OFF;
		Border_D = White_OFF;
	}
	GPIOC->ODR = White_OFF;
	GPIOC->ODR = dark_gray;
	while (waste_of_time<72)
	{
	GPIOC->ODR = dark_gray;
	waste_of_time++;
	}
	waste_of_time=0;
	GPIOC->ODR = White_OFF;
	break;
	}
	break;
	}
	}



	void Color_test(int Color_ON, int Color_OFF)
	{


	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;

	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;

	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;

	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;


	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;

	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;

	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;

	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;

	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;

	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;

	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;

	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;

	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;

	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;

	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;

	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;

	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;

	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;

	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;

	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;
	GPIOC->ODR |= Color_ON;

	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;

	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;

	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;

	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;
	GPIOC->ODR &= Color_OFF;


	}

	void Color_compare(int first_ON, int first_OFF, int second_ON, int second_OFF, int third_ON, int third_OFF, int fourth_ON, int fourth_OFF, int fifth_ON, int fifth_OFF)
	{
	GPIOC->ODR |= first_ON;
	GPIOC->ODR |= first_ON;
	GPIOC->ODR |= first_ON;
	GPIOC->ODR |= first_ON;

	GPIOC->ODR |= first_ON;
	GPIOC->ODR |= first_ON;
	GPIOC->ODR |= first_ON;
	GPIOC->ODR |= first_ON;

	GPIOC->ODR |= first_ON;
	GPIOC->ODR |= first_ON;
	GPIOC->ODR |= first_ON;
	GPIOC->ODR |= first_ON;

	GPIOC->ODR |= first_ON;
	GPIOC->ODR |= first_ON;
	GPIOC->ODR |= first_ON;
	GPIOC->ODR |= first_ON;

	GPIOC->ODR &= first_OFF;
	GPIOC->ODR &= first_OFF;
	GPIOC->ODR &= first_OFF;
	GPIOC->ODR &= first_OFF;

	GPIOC->ODR &= first_OFF;
	GPIOC->ODR &= first_OFF;
	GPIOC->ODR &= first_OFF;
	GPIOC->ODR &= first_OFF;

	GPIOC->ODR &= first_OFF;
	GPIOC->ODR &= first_OFF;
	GPIOC->ODR &= first_OFF;
	GPIOC->ODR &= first_OFF;

	GPIOC->ODR &= first_OFF;
	GPIOC->ODR &= first_OFF;
	GPIOC->ODR &= first_OFF;
	GPIOC->ODR &= first_OFF;

	GPIOC->ODR |= second_ON;
	GPIOC->ODR |= second_ON;
	GPIOC->ODR |= second_ON;
	GPIOC->ODR |= second_ON;

	GPIOC->ODR |= second_ON;
	GPIOC->ODR |= second_ON;
	GPIOC->ODR |= second_ON;
	GPIOC->ODR |= second_ON;

	GPIOC->ODR |= second_ON;
	GPIOC->ODR |= second_ON;
	GPIOC->ODR |= second_ON;
	GPIOC->ODR |= second_ON;

	GPIOC->ODR |= second_ON;
	GPIOC->ODR |= second_ON;
	GPIOC->ODR |= second_ON;
	GPIOC->ODR |= second_ON;

	GPIOC->ODR &= second_OFF;
	GPIOC->ODR &= second_OFF;
	GPIOC->ODR &= second_OFF;
	GPIOC->ODR &= second_OFF;

	GPIOC->ODR &= second_OFF;
	GPIOC->ODR &= second_OFF;
	GPIOC->ODR &= second_OFF;
	GPIOC->ODR &= second_OFF;

	GPIOC->ODR &= second_OFF;
	GPIOC->ODR &= second_OFF;
	GPIOC->ODR &= second_OFF;
	GPIOC->ODR &= second_OFF;

	GPIOC->ODR &= second_OFF;
	GPIOC->ODR &= second_OFF;
	GPIOC->ODR &= second_OFF;
	GPIOC->ODR &= second_OFF;

	GPIOC->ODR |= third_ON;
	GPIOC->ODR |= third_ON;
	GPIOC->ODR |= third_ON;
	GPIOC->ODR |= third_ON;

	GPIOC->ODR |= third_ON;
	GPIOC->ODR |= third_ON;
	GPIOC->ODR |= third_ON;
	GPIOC->ODR |= third_ON;

	GPIOC->ODR |= third_ON;
	GPIOC->ODR |= third_ON;
	GPIOC->ODR |= third_ON;
	GPIOC->ODR |= third_ON;

	GPIOC->ODR |= third_ON;
	GPIOC->ODR |= third_ON;
	GPIOC->ODR |= third_ON;
	GPIOC->ODR |= third_ON;

	GPIOC->ODR &= third_OFF;
	GPIOC->ODR &= third_OFF;
	GPIOC->ODR &= third_OFF;
	GPIOC->ODR &= third_OFF;

	GPIOC->ODR &= third_OFF;
	GPIOC->ODR &= third_OFF;
	GPIOC->ODR &= third_OFF;
	GPIOC->ODR &= third_OFF;

	GPIOC->ODR &= third_OFF;
	GPIOC->ODR &= third_OFF;
	GPIOC->ODR &= third_OFF;
	GPIOC->ODR &= third_OFF;

	GPIOC->ODR &= third_OFF;
	GPIOC->ODR &= third_OFF;
	GPIOC->ODR &= third_OFF;
	GPIOC->ODR &= third_OFF;

	GPIOC->ODR |= fourth_ON;
	GPIOC->ODR |= fourth_ON;
	GPIOC->ODR |= fourth_ON;
	GPIOC->ODR |= fourth_ON;

	GPIOC->ODR |= fourth_ON;
	GPIOC->ODR |= fourth_ON;
	GPIOC->ODR |= fourth_ON;
	GPIOC->ODR |= fourth_ON;

	GPIOC->ODR |= fourth_ON;
	GPIOC->ODR |= fourth_ON;
	GPIOC->ODR |= fourth_ON;
	GPIOC->ODR |= fourth_ON;

	GPIOC->ODR |= fourth_ON;
	GPIOC->ODR |= fourth_ON;
	GPIOC->ODR |= fourth_ON;
	GPIOC->ODR |= fourth_ON;

	GPIOC->ODR &= fourth_OFF;
	GPIOC->ODR &= fourth_OFF;
	GPIOC->ODR &= fourth_OFF;
	GPIOC->ODR &= fourth_OFF;

	GPIOC->ODR &= fourth_OFF;
	GPIOC->ODR &= fourth_OFF;
	GPIOC->ODR &= fourth_OFF;
	GPIOC->ODR &= fourth_OFF;

	GPIOC->ODR &= fourth_OFF;
	GPIOC->ODR &= fourth_OFF;
	GPIOC->ODR &= fourth_OFF;
	GPIOC->ODR &= fourth_OFF;

	GPIOC->ODR &= fourth_OFF;
	GPIOC->ODR &= fourth_OFF;
	GPIOC->ODR &= fourth_OFF;
	GPIOC->ODR &= fourth_OFF;

	GPIOC->ODR |= fifth_ON;
	GPIOC->ODR |= fifth_ON;
	GPIOC->ODR |= fifth_ON;
	GPIOC->ODR |= fifth_ON;

	GPIOC->ODR |= fifth_ON;
	GPIOC->ODR |= fifth_ON;
	GPIOC->ODR |= fifth_ON;
	GPIOC->ODR |= fifth_ON;

	GPIOC->ODR |= fifth_ON;
	GPIOC->ODR |= fifth_ON;
	GPIOC->ODR |= fifth_ON;
	GPIOC->ODR |= fifth_ON;

	GPIOC->ODR |= fifth_ON;
	GPIOC->ODR |= fifth_ON;
	GPIOC->ODR |= fifth_ON;
	GPIOC->ODR |= fifth_ON;

	GPIOC->ODR &= fifth_OFF;
	GPIOC->ODR &= fifth_OFF;
	GPIOC->ODR &= fifth_OFF;
	GPIOC->ODR &= fifth_OFF;

	GPIOC->ODR &= fifth_OFF;
	GPIOC->ODR &= fifth_OFF;
	GPIOC->ODR &= fifth_OFF;
	GPIOC->ODR &= fifth_OFF;

	GPIOC->ODR &= fifth_OFF;
	GPIOC->ODR &= fifth_OFF;
	GPIOC->ODR &= fifth_OFF;
	GPIOC->ODR &= fifth_OFF;

	GPIOC->ODR &= fifth_OFF;
	GPIOC->ODR &= fifth_OFF;
	GPIOC->ODR &= fifth_OFF;
	GPIOC->ODR &= fifth_OFF;

	}
	void colours(int page)
	{
	int colour = 0b10;
	int i = 0;
	if (page == 0)
	{
	switch(Lines)
	{
	int not_colour;
	case 0 ... 9:
	colour = 0x2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 10 ... 19:
	colour = 0x16;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 20 ... 29:
	colour = 0x2A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 30 ... 39:
	colour = 0x3E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 40 ... 49:
	colour = 0x52;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 50 ... 59:
	colour = 0x66;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 60 ... 69:
	colour = 0x7A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 70 ... 79:
	colour = 0x8E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 90 ... 99:
	colour = 0xA2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 100 ... 109:
	colour = 0xB6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 110 ... 119:
	colour = 0xCA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 120 ... 129:
	colour = 0xDE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 130 ... 139:
	colour = 0xF2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 140 ... 149:
	colour = 0x106;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 150 ... 159:
	colour = 0x11A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 160 ... 169:
	colour = 0x12E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 170 ... 179:
	colour = 0x142;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 190 ... 199:
	colour = 0x156;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 200 ... 209:
	colour = 0x16A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 210 ... 219:
	colour = 0x17E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 220 ... 229:
	colour = 0x192;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 230 ... 239:
	colour = 0x1A6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 240 ... 249:
	colour = 0x1BA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 250 ... 259:
	colour = 0x1CE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 260 ... 269:
	colour = 0x1E2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 270 ... 279:
	colour = 0x1F6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 290 ... 299:
	colour = 0x20A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 300 ... 309:
	colour = 0x21E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 310 ... 319:
	colour = 0x232;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 320 ... 329:
	colour = 0x246;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 330 ... 339:
	colour = 0x25A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 340 ... 349:
	colour = 0x26E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 350 ... 359:
	colour = 0x282;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 360 ... 369:
	colour = 0x296;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 370 ... 379:
	colour = 0x2AA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 390 ... 399:
	colour = 0x2BE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 400 ... 409:
	colour = 0x2D2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 410 ... 419:
	colour = 0x2E6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 420 ... 429:
	colour = 0x2FA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 430 ... 439:
	colour = 0x30E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 440 ... 449:
	colour = 0x322;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 450 ... 459:
	colour = 0x336;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 460 ... 469:
	colour = 0x34A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 470 ... 479:
	colour = 0x35E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 490 ... 499:
	colour = 0x372;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 500 ... 509:
	colour = 0x386;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 510 ... 519:
	colour = 0x39A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 520 ... 529:
	colour = 0x3AE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 530 ... 539:
	colour = 0x3C2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 540 ... 549:
	colour = 0x3D6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 550 ... 559:
	colour = 0x3EA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 560 ... 569:
	colour = 0x3FE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 570 ... 579:
	colour = 0x412;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 590 ... 599:
	colour = 0x426;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 600 ... 609:
	colour = 0x43A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 610 ... 619:
	colour = 0x44E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	}
	}
	if (page == 1)
	{
	switch(Lines)
	{
	int not_colour;
	case 0 ... 9:
	colour = 0x462;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 10 ... 19:
	colour = 0x476;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 20 ... 29:
	colour = 0x48A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 30 ... 39:
	colour = 0x49E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 40 ... 49:
	colour = 0x4B2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 50 ... 59:
	colour = 0x4C6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 60 ... 69:
	colour = 0x4DA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 70 ... 79:
	colour = 0x4EE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 90 ... 99:
	colour = 0x502;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 100 ... 109:
	colour = 0x516;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 110 ... 119:
	colour = 0x52A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 120 ... 129:
	colour = 0x53E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 130 ... 139:
	colour = 0x552;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 140 ... 149:
	colour = 0x566;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 150 ... 159:
	colour = 0x57A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 160 ... 169:
	colour = 0x58E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 170 ... 179:
	colour = 0x5A2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 190 ... 199:
	colour = 0x5B6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 200 ... 209:
	colour = 0x5CA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 210 ... 219:
	colour = 0x5DE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 220 ... 229:
	colour = 0x5F2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 230 ... 239:
	colour = 0x606;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 240 ... 249:
	colour = 0x61A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 250 ... 259:
	colour = 0x62E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 260 ... 269:
	colour = 0x642;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 270 ... 279:
	colour = 0x656;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 290 ... 299:
	colour = 0x66A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 300 ... 309:
	colour = 0x67E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 310 ... 319:
	colour = 0x692;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 320 ... 329:
	colour = 0x6A6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 330 ... 339:
	colour = 0x6BA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 340 ... 349:
	colour = 0x6CE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 350 ... 359:
	colour = 0x6E2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 360 ... 369:
	colour = 0x6F6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 370 ... 379:
	colour = 0x70A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 390 ... 399:
	colour = 0x71E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 400 ... 409:
	colour = 0x732;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 410 ... 419:
	colour = 0x746;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 420 ... 429:
	colour = 0x75A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 430 ... 439:
	colour = 0x76E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 440 ... 449:
	colour = 0x782;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 450 ... 459:
	colour = 0x796;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 460 ... 469:
	colour = 0x7AA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 470 ... 479:
	colour = 0x7BE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 490 ... 499:
	colour = 0x7D2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 500 ... 509:
	colour = 0x7E6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 510 ... 519:
	colour = 0x7FA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 520 ... 529:
	colour = 0x80E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 530 ... 539:
	colour = 0x822;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 540 ... 549:
	colour = 0x836;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 550 ... 559:
	colour = 0x84A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 560 ... 569:
	colour = 0x85E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 570 ... 579:
	colour = 0x872;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 590 ... 599:
	colour = 0x886;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 600 ... 609:
	colour = 0x89A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 610 ... 619:
	colour = 0x8AE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	}
	}
	if (page == 2)
	{
	switch(Lines)
	{
	int not_colour;
	case 0 ... 9:
	colour = 0x8C2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 10 ... 19:
	colour = 0x8D6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 20 ... 29:
	colour = 0x8EA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 30 ... 39:
	colour = 0x8FE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 40 ... 49:
	colour = 0x912;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 50 ... 59:
	colour = 0x926;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 60 ... 69:
	colour = 0x93A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 70 ... 79:
	colour = 0x94E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 90 ... 99:
	colour = 0x962;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 100 ... 109:
	colour = 0x976;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 110 ... 119:
	colour = 0x98A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 120 ... 129:
	colour = 0x99E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 130 ... 139:
	colour = 0x9B2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 140 ... 149:
	colour = 0x9C6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 150 ... 159:
	colour = 0x9DA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 160 ... 169:
	colour = 0x9EE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 170 ... 179:
	colour = 0xA02;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 190 ... 199:
	colour = 0xA16;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 200 ... 209:
	colour = 0xA2A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 210 ... 219:
	colour = 0xA3E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 220 ... 229:
	colour = 0xA52;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 230 ... 239:
	colour = 0xA66;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 240 ... 249:
	colour = 0xA7A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 250 ... 259:
	colour = 0xA8E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 260 ... 269:
	colour = 0xAA2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 270 ... 279:
	colour = 0xAB6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 290 ... 299:
	colour = 0xACA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 300 ... 309:
	colour = 0xADE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 310 ... 319:
	colour = 0xAF2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 320 ... 329:
	colour = 0xB06;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 330 ... 339:
	colour = 0xB1A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 340 ... 349:
	colour = 0xB2E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 350 ... 359:
	colour = 0xB42;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 360 ... 369:
	colour = 0xB56;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 370 ... 379:
	colour = 0xB6A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 390 ... 399:
	colour = 0xB7E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 400 ... 409:
	colour = 0xB92;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 410 ... 419:
	colour = 0xBA6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 420 ... 429:
	colour = 0xBBA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 430 ... 439:
	colour = 0xBCE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 440 ... 449:
	colour = 0xBE2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 450 ... 459:
	colour = 0xBF6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 460 ... 469:
	colour = 0xC0A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 470 ... 479:
	colour = 0xC1E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 490 ... 499:
	colour = 0xC32;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 500 ... 509:
	colour = 0xC46;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 510 ... 519:
	colour = 0xC5A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 520 ... 529:
	colour = 0xC6E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 530 ... 539:
	colour = 0xC82;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 540 ... 549:
	colour = 0xC96;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 550 ... 559:
	colour = 0xCAA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 560 ... 569:
	colour = 0xCBE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 570 ... 579:
	colour = 0xCD2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 590 ... 599:
	colour = 0xCE6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 600 ... 609:
	colour = 0xCFA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 610 ... 619:
	colour = 0xD0E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	}
	}
	if (page == 3)
	{
	switch(Lines)
	{
	int not_colour;
	case 0 ... 9:
	colour = 0xD22;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 10 ... 19:
	colour = 0xD36;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 20 ... 29:
	colour = 0xD4A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 30 ... 39:
	colour = 0xD5E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 40 ... 49:
	colour = 0xD72;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 50 ... 59:
	colour = 0xD86;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 60 ... 69:
	colour = 0xD9A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 70 ... 79:
	colour = 0xDAE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 90 ... 99:
	colour = 0xDC2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 100 ... 109:
	colour = 0xDD6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 110 ... 119:
	colour = 0xDEA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 120 ... 129:
	colour = 0xDFE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 130 ... 139:
	colour = 0xE12;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 140 ... 149:
	colour = 0xE26;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 150 ... 159:
	colour = 0xE3A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 160 ... 169:
	colour = 0xE4E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 170 ... 179:
	colour = 0xE62;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 190 ... 199:
	colour = 0xE76;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 200 ... 209:
	colour = 0xE8A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 210 ... 219:
	colour = 0xE9E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 220 ... 229:
	colour = 0xEB2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 230 ... 239:
	colour = 0xEC6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 240 ... 249:
	colour = 0xEDA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 250 ... 259:
	colour = 0xEEE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 260 ... 269:
	colour = 0xF02;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 270 ... 279:
	colour = 0xF16;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 290 ... 299:
	colour = 0xF2A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 300 ... 309:
	colour = 0xF3E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 310 ... 319:
	colour = 0xF52;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 320 ... 329:
	colour = 0xF66;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	//
	case 330 ... 339:
	colour = 0xF7A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 340 ... 349:
	colour = 0xF8E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 350 ... 359:
	colour = 0xFA2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 360 ... 369:
	colour = 0xFB6;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 370 ... 379:
	colour = 0xFCA;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	case 390 ... 399:
	colour = 0xFDE;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 400 ... 409:
	colour = 0xFF2;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 410 ... 419:
	colour = 0x1006;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 420 ... 429:
	colour = 0x101A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 430 ... 439:
	colour = 0x102E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 440 ... 449:
	colour = 0x1042;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 450 ... 459:
	colour = 0x1056;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 460 ... 469:
	colour = 0x106A;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 470 ... 479:
	colour = 0x107E;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 490 ... 499:
	colour = 0x1092;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 500 ... 509:
	colour = 0x109C;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 510 ... 519:
	colour = 0x10B0;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 520 ... 529:
	colour = 0x10C4;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 530 ... 539:
	colour = 0x10D8;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 540 ... 549:
	colour = 0x10EC;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 550 ... 559:
	colour = 0x1100;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 560 ... 569:
	colour = 0x1114;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 570 ... 579:
	colour = 0x1128;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 590 ... 599:
	colour = 0x113C;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;

	case 600 ... 609:
	colour = 0x1150;
	while (i<10)
	{
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	GPIOC->ODR |=colour;
	not_colour = !colour;
	GPIOC->ODR &=not_colour;
	colour = colour+0b10;
	i++;
	}
	i=0;
	break;
	}
	}

	if (page == 4)
	{
		switch(Lines)
		{
		int not_colour;
		case 0 ... 9:
		colour = 0x1164;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 10 ... 19:
		colour = 0x1178;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 20 ... 29:
		colour = 0x118C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 30 ... 39:
		colour = 0x11A0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 40 ... 49:
		colour = 0x11B4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 50 ... 59:
		colour = 0x11C8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 60 ... 69:
		colour = 0x11DC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 70 ... 79:
		colour = 0x12F0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 90 ... 99:
		colour = 0x1204;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 100 ... 109:
		colour = 0x1218;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 110 ... 119:
		colour = 0x122C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 120 ... 129:
		colour = 0x1240;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 130 ... 139:
		colour = 0x1254;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 140 ... 149:
		colour = 0x1268;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 150 ... 159:
		colour = 0x127C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 160 ... 169:
		colour = 0x1290;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 170 ... 179:
		colour = 0x12A4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 190 ... 199:
		colour = 0x12B8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 200 ... 209:
		colour = 0x12CC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 210 ... 219:
		colour = 0x12E0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 220 ... 229:
		colour = 0x12F4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 230 ... 239:
		colour = 0x1308;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 240 ... 249:
		colour = 0x131C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 250 ... 259:
		colour = 0x1330;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 260 ... 269:
		colour = 0x1344;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 270 ... 279:
		colour = 0x1358;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 290 ... 299:
		colour = 0x136C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 300 ... 309:
		colour = 0x1380;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 310 ... 319:
		colour = 0x1396;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 320 ... 329:
		colour = 0x13A8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 330 ... 339:
		colour = 0x13BC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 340 ... 349:
		colour = 0x13D0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 350 ... 359:
		colour = 0x13E4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 360 ... 369:
		colour = 0x13F8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 370 ... 379:
		colour = 0x140C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 390 ... 399:
		colour = 0x1420;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 400 ... 409:
		colour = 0x1434;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 410 ... 419:
		colour = 0x1448;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 420 ... 429:
		colour = 0x145C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 430 ... 439:
		colour = 0x1470;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 440 ... 449:
		colour = 0x1484;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 450 ... 459:
		colour = 0x1498;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 460 ... 469:
		colour = 0x14AC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 470 ... 479:
		colour = 0x14C0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 490 ... 499:
		colour = 0x14D4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 500 ... 509:
		colour = 0x14E8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 510 ... 519:
		colour = 0x14FC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 520 ... 529:
		colour = 0x1510;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 530 ... 539:
		colour = 0x1524;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 540 ... 549:
		colour = 0x1538;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 550 ... 559:
		colour = 0x154C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 560 ... 569:
		colour = 0x1560;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 570 ... 579:
		colour = 0x1574;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 590 ... 599:
		colour = 0x1588;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 600 ... 609:
		colour = 0x159C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		}
	}
	if (page == 5)
	{

		switch(Lines)
		{
		int not_colour;
		case 0 ... 9:
		colour = 0x15B0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 10 ... 19:
		colour = 0x15C4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 20 ... 29:
		colour = 0x15D8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 30 ... 39:
		colour = 0x15EC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 40 ... 49:
		colour = 0x1600;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 50 ... 59:
		colour = 0x1614;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 60 ... 69:
		colour = 0x1628;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 70 ... 79:
		colour = 0x163C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 90 ... 99:
		colour = 0x1650;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 100 ... 109:
		colour = 0x1664;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 110 ... 119:
		colour = 0x1678;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 120 ... 129:
		colour = 0x168C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 130 ... 139:
		colour = 0x16A0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 140 ... 149:
		colour = 0x16B4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 150 ... 159:
		colour = 0x16C8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 160 ... 169:
		colour = 0x16DC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 170 ... 179:
		colour = 0x16F0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 190 ... 199:
		colour = 0x1704;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 200 ... 209:
		colour = 0x1718;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 210 ... 219:
		colour = 0x172C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 220 ... 229:
		colour = 0x1740;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 230 ... 239:
		colour = 0x1754;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 240 ... 249:
		colour = 0x1768;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 250 ... 259:
		colour = 0x177C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 260 ... 269:
		colour = 0x1790;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 270 ... 279:
		colour = 0x17A4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 290 ... 299:
		colour = 0x17B8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 300 ... 309:
		colour = 0x17CC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 310 ... 319:
		colour = 0x17E0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 320 ... 329:
		colour = 0x17F4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 330 ... 339:
		colour = 0x1808;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 340 ... 349:
		colour = 0x181C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 350 ... 359:
		colour = 0x1830;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 360 ... 369:
		colour = 0x1844;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 370 ... 379:
		colour = 0x1858;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 390 ... 399:
		colour = 0x186C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 400 ... 409:
		colour = 0x1880;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 410 ... 419:
		colour = 0x1894;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 420 ... 429:
		colour = 0x18A8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 430 ... 439:
		colour = 0x18BC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 440 ... 449:
		colour = 0x18D0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 450 ... 459:
		colour = 0x18E4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 460 ... 469:
		colour = 0x18F8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 470 ... 479:
		colour = 0x190C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 490 ... 499:
		colour = 0x1920;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 500 ... 509:
		colour = 0x1934;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 510 ... 519:
		colour = 0x1948;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 520 ... 529:
		colour = 0x195C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 530 ... 539:
		colour = 0x1970;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 540 ... 549:
		colour = 0x1984;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 550 ... 559:
		colour = 0x1998;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 560 ... 569:
		colour = 0x19AC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 570 ... 579:
		colour = 0x19C0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 590 ... 599:
		colour = 0x19D4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 600 ... 609:
		colour = 0x19E8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		}

	}
	if (page == 6)
	{
		switch(Lines)
		{
		int not_colour;
		case 0 ... 9:
		colour = 0x19FC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 10 ... 19:
		colour = 0x1A10;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 20 ... 29:
		colour = 0x1A24;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 30 ... 39:
		colour = 0x1A38;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 40 ... 49:
		colour = 0x1A4C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 50 ... 59:
		colour = 0x1A60;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 60 ... 69:
		colour = 0x1A74;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 70 ... 79:
		colour = 0x1A88;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 90 ... 99:
		colour = 0x1A90;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 100 ... 109:
		colour = 0x1AB0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 110 ... 119:
		colour = 0x1AC4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 120 ... 129:
		colour = 0x1AD8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 130 ... 139:
		colour = 0x1AEC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 140 ... 149:
		colour = 0x1B00;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 150 ... 159:
		colour = 0x1B14;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 160 ... 169:
		colour = 0x1B28;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 170 ... 179:
		colour = 0x1B3C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 190 ... 199:
		colour = 0x1B50;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 200 ... 209:
		colour = 0x1B64;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 210 ... 219:
		colour = 0x1B78;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 220 ... 229:
		colour = 0x1B8C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 230 ... 239:
		colour = 0x1BA0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 240 ... 249:
		colour = 0x1BB4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 250 ... 259:
		colour = 0x1BC8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 260 ... 269:
		colour = 0x1BDC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 270 ... 279:
		colour = 0x1BF0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 290 ... 299:
		colour = 0x1C04;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 300 ... 309:
		colour = 0x1C18;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 310 ... 319:
		colour = 0x1C2C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 320 ... 329:
		colour = 0x1C40;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 330 ... 339:
		colour = 0x1C54;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 340 ... 349:
		colour = 0x1C68;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 350 ... 359:
		colour = 0x1C7C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 360 ... 369:
		colour = 0x1C90;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 370 ... 379:
		colour = 0x1CA4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 390 ... 399:
		colour = 0x1CB8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 400 ... 409:
		colour = 0x1CCC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 410 ... 419:
		colour = 0x1CE0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 420 ... 429:
		colour = 0x1CF4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 430 ... 439:
		colour = 0x1D08;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 440 ... 449:
		colour = 0x1D1C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 450 ... 459:
		colour = 0x1D30;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 460 ... 469:
		colour = 0x1D44;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 470 ... 479:
		colour = 0x1D58;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 490 ... 499:
		colour = 0x1D6C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 500 ... 509:
		colour = 0x1D80;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 510 ... 519:
		colour = 0x1D94;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 520 ... 529:
		colour = 0x1DA8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 530 ... 539:
		colour = 0x1DBC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 540 ... 549:
		colour = 0x1DD0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 550 ... 559:
		colour = 0x1DE4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 560 ... 569:
		colour = 0x1DF8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 570 ... 579:
		colour = 0x1E0C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 590 ... 599:
		colour = 0x1E20;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 600 ... 609:
		colour = 0x1E34;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		}
	}
	if (page == 7)
	{
		switch(Lines)
		{
		int not_colour;
		case 0 ... 9:
		colour = 0x1E48;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 10 ... 19:
		colour = 0x1E5C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 20 ... 29:
		colour = 0x1E70;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 30 ... 39:
		colour = 0x1E84;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 40 ... 49:
		colour = 0x1498;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 50 ... 59:
		colour = 0x1EAC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 60 ... 69:
		colour = 0x1EC0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 70 ... 79:
		colour = 0x1ED4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 90 ... 99:
		colour = 0x1EE8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 100 ... 109:
		colour = 0x1EFC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 110 ... 119:
		colour = 0x1F10;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 120 ... 129:
		colour = 0x1F24;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 130 ... 139:
		colour = 0x1F38;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 140 ... 149:
		colour = 0x1F4C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 150 ... 159:
		colour = 0x1F60;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 160 ... 169:
		colour = 0x1F74;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 170 ... 179:
		colour = 0x1F88;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 190 ... 199:
		colour = 0x1F9C;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 200 ... 209:
		colour = 0x1FB0;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 210 ... 219:
		colour = 0x1FC4;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;

		case 220 ... 229:
		colour = 0x1FD8;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		//
		case 230 ... 239:
		colour = 0x1FEC;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
		case 240 ... 249:
		colour = 0X2000;
		while (i<10)
		{
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		GPIOC->ODR |=colour;
		not_colour = !colour;
		GPIOC->ODR &=not_colour;
		colour = colour+0b10;
		i++;
		}
		i=0;
		break;
	}
	}
	}

	void test_colours(int starting_colour)
	{
	int not_colour = !starting_colour;
	int colour = 0b10;
	int i = 0;
	colour = starting_colour;
	while(i < 10)
	{
	GPIOC->ODR |=colour;
			GPIOC->ODR |=colour;
			GPIOC->ODR |=colour;
			GPIOC->ODR |=colour;
			GPIOC->ODR |=colour;
			GPIOC->ODR |=colour;
			GPIOC->ODR |=colour;
			GPIOC->ODR |=colour;
			not_colour = !colour;
			GPIOC->ODR &=not_colour;
			GPIOC->ODR &=not_colour;
			GPIOC->ODR &=not_colour;
			GPIOC->ODR &=not_colour;
			colour = colour+0b10;
			i++;
	}
	i=0;
	}

/* USER CODE END 1 */
